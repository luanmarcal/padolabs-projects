
motor-cc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000740c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  080074c8  080074c8  000174c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800767c  0800767c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800767c  0800767c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800767c  0800767c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800767c  0800767c  0001767c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000000c  08007690  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007690  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111b7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c7  00000000  00000000  000311eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  000335b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00034638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a7  00000000  00000000  000355b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011584  00000000  00000000  00051e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd0cc  00000000  00000000  000633db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001204a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  001204fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080074b0 	.word	0x080074b0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080074b0 	.word	0x080074b0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_f2uiz>:
 80003f0:	219e      	movs	r1, #158	; 0x9e
 80003f2:	b510      	push	{r4, lr}
 80003f4:	05c9      	lsls	r1, r1, #23
 80003f6:	1c04      	adds	r4, r0, #0
 80003f8:	f001 f976 	bl	80016e8 <__aeabi_fcmpge>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d103      	bne.n	8000408 <__aeabi_f2uiz+0x18>
 8000400:	1c20      	adds	r0, r4, #0
 8000402:	f000 faef 	bl	80009e4 <__aeabi_f2iz>
 8000406:	bd10      	pop	{r4, pc}
 8000408:	219e      	movs	r1, #158	; 0x9e
 800040a:	1c20      	adds	r0, r4, #0
 800040c:	05c9      	lsls	r1, r1, #23
 800040e:	f000 f921 	bl	8000654 <__aeabi_fsub>
 8000412:	f000 fae7 	bl	80009e4 <__aeabi_f2iz>
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	061b      	lsls	r3, r3, #24
 800041a:	469c      	mov	ip, r3
 800041c:	4460      	add	r0, ip
 800041e:	e7f2      	b.n	8000406 <__aeabi_f2uiz+0x16>

08000420 <__aeabi_fmul>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	4657      	mov	r7, sl
 8000424:	464e      	mov	r6, r9
 8000426:	4645      	mov	r5, r8
 8000428:	46de      	mov	lr, fp
 800042a:	0244      	lsls	r4, r0, #9
 800042c:	b5e0      	push	{r5, r6, r7, lr}
 800042e:	0045      	lsls	r5, r0, #1
 8000430:	1c0f      	adds	r7, r1, #0
 8000432:	0a64      	lsrs	r4, r4, #9
 8000434:	0e2d      	lsrs	r5, r5, #24
 8000436:	0fc6      	lsrs	r6, r0, #31
 8000438:	2d00      	cmp	r5, #0
 800043a:	d047      	beq.n	80004cc <__aeabi_fmul+0xac>
 800043c:	2dff      	cmp	r5, #255	; 0xff
 800043e:	d04d      	beq.n	80004dc <__aeabi_fmul+0xbc>
 8000440:	2300      	movs	r3, #0
 8000442:	2080      	movs	r0, #128	; 0x80
 8000444:	469a      	mov	sl, r3
 8000446:	469b      	mov	fp, r3
 8000448:	00e4      	lsls	r4, r4, #3
 800044a:	04c0      	lsls	r0, r0, #19
 800044c:	4304      	orrs	r4, r0
 800044e:	3d7f      	subs	r5, #127	; 0x7f
 8000450:	0278      	lsls	r0, r7, #9
 8000452:	0a43      	lsrs	r3, r0, #9
 8000454:	4699      	mov	r9, r3
 8000456:	007a      	lsls	r2, r7, #1
 8000458:	0ffb      	lsrs	r3, r7, #31
 800045a:	4698      	mov	r8, r3
 800045c:	0e12      	lsrs	r2, r2, #24
 800045e:	464b      	mov	r3, r9
 8000460:	d044      	beq.n	80004ec <__aeabi_fmul+0xcc>
 8000462:	2aff      	cmp	r2, #255	; 0xff
 8000464:	d011      	beq.n	800048a <__aeabi_fmul+0x6a>
 8000466:	00d8      	lsls	r0, r3, #3
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	04db      	lsls	r3, r3, #19
 800046c:	4303      	orrs	r3, r0
 800046e:	4699      	mov	r9, r3
 8000470:	2000      	movs	r0, #0
 8000472:	3a7f      	subs	r2, #127	; 0x7f
 8000474:	18ad      	adds	r5, r5, r2
 8000476:	4647      	mov	r7, r8
 8000478:	4653      	mov	r3, sl
 800047a:	4077      	eors	r7, r6
 800047c:	1c69      	adds	r1, r5, #1
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d83f      	bhi.n	8000502 <__aeabi_fmul+0xe2>
 8000482:	4a72      	ldr	r2, [pc, #456]	; (800064c <__aeabi_fmul+0x22c>)
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	58d3      	ldr	r3, [r2, r3]
 8000488:	469f      	mov	pc, r3
 800048a:	35ff      	adds	r5, #255	; 0xff
 800048c:	2b00      	cmp	r3, #0
 800048e:	d000      	beq.n	8000492 <__aeabi_fmul+0x72>
 8000490:	e079      	b.n	8000586 <__aeabi_fmul+0x166>
 8000492:	4652      	mov	r2, sl
 8000494:	2302      	movs	r3, #2
 8000496:	431a      	orrs	r2, r3
 8000498:	4692      	mov	sl, r2
 800049a:	2002      	movs	r0, #2
 800049c:	e7eb      	b.n	8000476 <__aeabi_fmul+0x56>
 800049e:	4647      	mov	r7, r8
 80004a0:	464c      	mov	r4, r9
 80004a2:	4683      	mov	fp, r0
 80004a4:	465b      	mov	r3, fp
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d028      	beq.n	80004fc <__aeabi_fmul+0xdc>
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fmul+0x90>
 80004ae:	e0c6      	b.n	800063e <__aeabi_fmul+0x21e>
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d14f      	bne.n	8000554 <__aeabi_fmul+0x134>
 80004b4:	2000      	movs	r0, #0
 80004b6:	2400      	movs	r4, #0
 80004b8:	05c0      	lsls	r0, r0, #23
 80004ba:	07ff      	lsls	r7, r7, #31
 80004bc:	4320      	orrs	r0, r4
 80004be:	4338      	orrs	r0, r7
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004cc:	2c00      	cmp	r4, #0
 80004ce:	d171      	bne.n	80005b4 <__aeabi_fmul+0x194>
 80004d0:	2304      	movs	r3, #4
 80004d2:	469a      	mov	sl, r3
 80004d4:	3b03      	subs	r3, #3
 80004d6:	2500      	movs	r5, #0
 80004d8:	469b      	mov	fp, r3
 80004da:	e7b9      	b.n	8000450 <__aeabi_fmul+0x30>
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d163      	bne.n	80005a8 <__aeabi_fmul+0x188>
 80004e0:	2308      	movs	r3, #8
 80004e2:	469a      	mov	sl, r3
 80004e4:	3b06      	subs	r3, #6
 80004e6:	25ff      	movs	r5, #255	; 0xff
 80004e8:	469b      	mov	fp, r3
 80004ea:	e7b1      	b.n	8000450 <__aeabi_fmul+0x30>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d150      	bne.n	8000592 <__aeabi_fmul+0x172>
 80004f0:	4652      	mov	r2, sl
 80004f2:	3301      	adds	r3, #1
 80004f4:	431a      	orrs	r2, r3
 80004f6:	4692      	mov	sl, r2
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7bc      	b.n	8000476 <__aeabi_fmul+0x56>
 80004fc:	20ff      	movs	r0, #255	; 0xff
 80004fe:	2400      	movs	r4, #0
 8000500:	e7da      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000502:	4648      	mov	r0, r9
 8000504:	0c26      	lsrs	r6, r4, #16
 8000506:	0424      	lsls	r4, r4, #16
 8000508:	0c22      	lsrs	r2, r4, #16
 800050a:	0404      	lsls	r4, r0, #16
 800050c:	0c24      	lsrs	r4, r4, #16
 800050e:	464b      	mov	r3, r9
 8000510:	0020      	movs	r0, r4
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	4350      	muls	r0, r2
 8000516:	4374      	muls	r4, r6
 8000518:	435a      	muls	r2, r3
 800051a:	435e      	muls	r6, r3
 800051c:	1912      	adds	r2, r2, r4
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	189b      	adds	r3, r3, r2
 8000522:	429c      	cmp	r4, r3
 8000524:	d903      	bls.n	800052e <__aeabi_fmul+0x10e>
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0252      	lsls	r2, r2, #9
 800052a:	4694      	mov	ip, r2
 800052c:	4466      	add	r6, ip
 800052e:	0400      	lsls	r0, r0, #16
 8000530:	041a      	lsls	r2, r3, #16
 8000532:	0c00      	lsrs	r0, r0, #16
 8000534:	1812      	adds	r2, r2, r0
 8000536:	0194      	lsls	r4, r2, #6
 8000538:	1e60      	subs	r0, r4, #1
 800053a:	4184      	sbcs	r4, r0
 800053c:	0c1b      	lsrs	r3, r3, #16
 800053e:	0e92      	lsrs	r2, r2, #26
 8000540:	199b      	adds	r3, r3, r6
 8000542:	4314      	orrs	r4, r2
 8000544:	019b      	lsls	r3, r3, #6
 8000546:	431c      	orrs	r4, r3
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	d572      	bpl.n	8000632 <__aeabi_fmul+0x212>
 800054c:	2001      	movs	r0, #1
 800054e:	0863      	lsrs	r3, r4, #1
 8000550:	4004      	ands	r4, r0
 8000552:	431c      	orrs	r4, r3
 8000554:	0008      	movs	r0, r1
 8000556:	307f      	adds	r0, #127	; 0x7f
 8000558:	2800      	cmp	r0, #0
 800055a:	dd3c      	ble.n	80005d6 <__aeabi_fmul+0x1b6>
 800055c:	0763      	lsls	r3, r4, #29
 800055e:	d004      	beq.n	800056a <__aeabi_fmul+0x14a>
 8000560:	230f      	movs	r3, #15
 8000562:	4023      	ands	r3, r4
 8000564:	2b04      	cmp	r3, #4
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x14a>
 8000568:	3404      	adds	r4, #4
 800056a:	0123      	lsls	r3, r4, #4
 800056c:	d503      	bpl.n	8000576 <__aeabi_fmul+0x156>
 800056e:	3180      	adds	r1, #128	; 0x80
 8000570:	0008      	movs	r0, r1
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <__aeabi_fmul+0x230>)
 8000574:	401c      	ands	r4, r3
 8000576:	28fe      	cmp	r0, #254	; 0xfe
 8000578:	dcc0      	bgt.n	80004fc <__aeabi_fmul+0xdc>
 800057a:	01a4      	lsls	r4, r4, #6
 800057c:	0a64      	lsrs	r4, r4, #9
 800057e:	b2c0      	uxtb	r0, r0
 8000580:	e79a      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000582:	0037      	movs	r7, r6
 8000584:	e78e      	b.n	80004a4 <__aeabi_fmul+0x84>
 8000586:	4652      	mov	r2, sl
 8000588:	2303      	movs	r3, #3
 800058a:	431a      	orrs	r2, r3
 800058c:	4692      	mov	sl, r2
 800058e:	2003      	movs	r0, #3
 8000590:	e771      	b.n	8000476 <__aeabi_fmul+0x56>
 8000592:	4648      	mov	r0, r9
 8000594:	f001 f8b2 	bl	80016fc <__clzsi2>
 8000598:	464a      	mov	r2, r9
 800059a:	1f43      	subs	r3, r0, #5
 800059c:	409a      	lsls	r2, r3
 800059e:	1a2d      	subs	r5, r5, r0
 80005a0:	4691      	mov	r9, r2
 80005a2:	2000      	movs	r0, #0
 80005a4:	3d76      	subs	r5, #118	; 0x76
 80005a6:	e766      	b.n	8000476 <__aeabi_fmul+0x56>
 80005a8:	230c      	movs	r3, #12
 80005aa:	469a      	mov	sl, r3
 80005ac:	3b09      	subs	r3, #9
 80005ae:	25ff      	movs	r5, #255	; 0xff
 80005b0:	469b      	mov	fp, r3
 80005b2:	e74d      	b.n	8000450 <__aeabi_fmul+0x30>
 80005b4:	0020      	movs	r0, r4
 80005b6:	f001 f8a1 	bl	80016fc <__clzsi2>
 80005ba:	2576      	movs	r5, #118	; 0x76
 80005bc:	1f43      	subs	r3, r0, #5
 80005be:	409c      	lsls	r4, r3
 80005c0:	2300      	movs	r3, #0
 80005c2:	426d      	negs	r5, r5
 80005c4:	469a      	mov	sl, r3
 80005c6:	469b      	mov	fp, r3
 80005c8:	1a2d      	subs	r5, r5, r0
 80005ca:	e741      	b.n	8000450 <__aeabi_fmul+0x30>
 80005cc:	2480      	movs	r4, #128	; 0x80
 80005ce:	2700      	movs	r7, #0
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	03e4      	lsls	r4, r4, #15
 80005d4:	e770      	b.n	80004b8 <__aeabi_fmul+0x98>
 80005d6:	2301      	movs	r3, #1
 80005d8:	1a1b      	subs	r3, r3, r0
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dd00      	ble.n	80005e0 <__aeabi_fmul+0x1c0>
 80005de:	e769      	b.n	80004b4 <__aeabi_fmul+0x94>
 80005e0:	319e      	adds	r1, #158	; 0x9e
 80005e2:	0020      	movs	r0, r4
 80005e4:	408c      	lsls	r4, r1
 80005e6:	40d8      	lsrs	r0, r3
 80005e8:	1e63      	subs	r3, r4, #1
 80005ea:	419c      	sbcs	r4, r3
 80005ec:	4304      	orrs	r4, r0
 80005ee:	0763      	lsls	r3, r4, #29
 80005f0:	d004      	beq.n	80005fc <__aeabi_fmul+0x1dc>
 80005f2:	230f      	movs	r3, #15
 80005f4:	4023      	ands	r3, r4
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d000      	beq.n	80005fc <__aeabi_fmul+0x1dc>
 80005fa:	3404      	adds	r4, #4
 80005fc:	0163      	lsls	r3, r4, #5
 80005fe:	d51a      	bpl.n	8000636 <__aeabi_fmul+0x216>
 8000600:	2001      	movs	r0, #1
 8000602:	2400      	movs	r4, #0
 8000604:	e758      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000606:	2080      	movs	r0, #128	; 0x80
 8000608:	03c0      	lsls	r0, r0, #15
 800060a:	4204      	tst	r4, r0
 800060c:	d009      	beq.n	8000622 <__aeabi_fmul+0x202>
 800060e:	464b      	mov	r3, r9
 8000610:	4203      	tst	r3, r0
 8000612:	d106      	bne.n	8000622 <__aeabi_fmul+0x202>
 8000614:	464c      	mov	r4, r9
 8000616:	4304      	orrs	r4, r0
 8000618:	0264      	lsls	r4, r4, #9
 800061a:	4647      	mov	r7, r8
 800061c:	20ff      	movs	r0, #255	; 0xff
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	e74a      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000622:	2080      	movs	r0, #128	; 0x80
 8000624:	03c0      	lsls	r0, r0, #15
 8000626:	4304      	orrs	r4, r0
 8000628:	0264      	lsls	r4, r4, #9
 800062a:	0037      	movs	r7, r6
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	0a64      	lsrs	r4, r4, #9
 8000630:	e742      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000632:	0029      	movs	r1, r5
 8000634:	e78e      	b.n	8000554 <__aeabi_fmul+0x134>
 8000636:	01a4      	lsls	r4, r4, #6
 8000638:	2000      	movs	r0, #0
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	e73c      	b.n	80004b8 <__aeabi_fmul+0x98>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4304      	orrs	r4, r0
 8000644:	0264      	lsls	r4, r4, #9
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	0a64      	lsrs	r4, r4, #9
 800064a:	e735      	b.n	80004b8 <__aeabi_fmul+0x98>
 800064c:	080074c8 	.word	0x080074c8
 8000650:	f7ffffff 	.word	0xf7ffffff

08000654 <__aeabi_fsub>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	4646      	mov	r6, r8
 8000658:	46d6      	mov	lr, sl
 800065a:	464f      	mov	r7, r9
 800065c:	0243      	lsls	r3, r0, #9
 800065e:	0a5b      	lsrs	r3, r3, #9
 8000660:	00da      	lsls	r2, r3, #3
 8000662:	4694      	mov	ip, r2
 8000664:	024a      	lsls	r2, r1, #9
 8000666:	b5c0      	push	{r6, r7, lr}
 8000668:	0044      	lsls	r4, r0, #1
 800066a:	0a56      	lsrs	r6, r2, #9
 800066c:	1c05      	adds	r5, r0, #0
 800066e:	46b0      	mov	r8, r6
 8000670:	0e24      	lsrs	r4, r4, #24
 8000672:	004e      	lsls	r6, r1, #1
 8000674:	0992      	lsrs	r2, r2, #6
 8000676:	001f      	movs	r7, r3
 8000678:	0020      	movs	r0, r4
 800067a:	4692      	mov	sl, r2
 800067c:	0fed      	lsrs	r5, r5, #31
 800067e:	0e36      	lsrs	r6, r6, #24
 8000680:	0fc9      	lsrs	r1, r1, #31
 8000682:	2eff      	cmp	r6, #255	; 0xff
 8000684:	d100      	bne.n	8000688 <__aeabi_fsub+0x34>
 8000686:	e07f      	b.n	8000788 <__aeabi_fsub+0x134>
 8000688:	2201      	movs	r2, #1
 800068a:	4051      	eors	r1, r2
 800068c:	428d      	cmp	r5, r1
 800068e:	d051      	beq.n	8000734 <__aeabi_fsub+0xe0>
 8000690:	1ba2      	subs	r2, r4, r6
 8000692:	4691      	mov	r9, r2
 8000694:	2a00      	cmp	r2, #0
 8000696:	dc00      	bgt.n	800069a <__aeabi_fsub+0x46>
 8000698:	e07e      	b.n	8000798 <__aeabi_fsub+0x144>
 800069a:	2e00      	cmp	r6, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x4c>
 800069e:	e099      	b.n	80007d4 <__aeabi_fsub+0x180>
 80006a0:	2cff      	cmp	r4, #255	; 0xff
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fsub+0x52>
 80006a4:	e08c      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	4652      	mov	r2, sl
 80006aa:	04db      	lsls	r3, r3, #19
 80006ac:	431a      	orrs	r2, r3
 80006ae:	4692      	mov	sl, r2
 80006b0:	464a      	mov	r2, r9
 80006b2:	2301      	movs	r3, #1
 80006b4:	2a1b      	cmp	r2, #27
 80006b6:	dc08      	bgt.n	80006ca <__aeabi_fsub+0x76>
 80006b8:	4653      	mov	r3, sl
 80006ba:	2120      	movs	r1, #32
 80006bc:	40d3      	lsrs	r3, r2
 80006be:	1a89      	subs	r1, r1, r2
 80006c0:	4652      	mov	r2, sl
 80006c2:	408a      	lsls	r2, r1
 80006c4:	1e51      	subs	r1, r2, #1
 80006c6:	418a      	sbcs	r2, r1
 80006c8:	4313      	orrs	r3, r2
 80006ca:	4662      	mov	r2, ip
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	015a      	lsls	r2, r3, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fsub+0x80>
 80006d2:	e0f3      	b.n	80008bc <__aeabi_fsub+0x268>
 80006d4:	019b      	lsls	r3, r3, #6
 80006d6:	099e      	lsrs	r6, r3, #6
 80006d8:	0030      	movs	r0, r6
 80006da:	f001 f80f 	bl	80016fc <__clzsi2>
 80006de:	3805      	subs	r0, #5
 80006e0:	4086      	lsls	r6, r0
 80006e2:	4284      	cmp	r4, r0
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_fsub+0x94>
 80006e6:	e0f7      	b.n	80008d8 <__aeabi_fsub+0x284>
 80006e8:	0032      	movs	r2, r6
 80006ea:	1b04      	subs	r4, r0, r4
 80006ec:	2020      	movs	r0, #32
 80006ee:	3401      	adds	r4, #1
 80006f0:	40e2      	lsrs	r2, r4
 80006f2:	1b04      	subs	r4, r0, r4
 80006f4:	40a6      	lsls	r6, r4
 80006f6:	0033      	movs	r3, r6
 80006f8:	1e5e      	subs	r6, r3, #1
 80006fa:	41b3      	sbcs	r3, r6
 80006fc:	2400      	movs	r4, #0
 80006fe:	4313      	orrs	r3, r2
 8000700:	075a      	lsls	r2, r3, #29
 8000702:	d004      	beq.n	800070e <__aeabi_fsub+0xba>
 8000704:	220f      	movs	r2, #15
 8000706:	401a      	ands	r2, r3
 8000708:	2a04      	cmp	r2, #4
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0xba>
 800070c:	3304      	adds	r3, #4
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	d400      	bmi.n	8000714 <__aeabi_fsub+0xc0>
 8000712:	e0d6      	b.n	80008c2 <__aeabi_fsub+0x26e>
 8000714:	1c62      	adds	r2, r4, #1
 8000716:	2cfe      	cmp	r4, #254	; 0xfe
 8000718:	d100      	bne.n	800071c <__aeabi_fsub+0xc8>
 800071a:	e0da      	b.n	80008d2 <__aeabi_fsub+0x27e>
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	0a5f      	lsrs	r7, r3, #9
 8000720:	b2d0      	uxtb	r0, r2
 8000722:	05c0      	lsls	r0, r0, #23
 8000724:	4338      	orrs	r0, r7
 8000726:	07ed      	lsls	r5, r5, #31
 8000728:	4328      	orrs	r0, r5
 800072a:	bce0      	pop	{r5, r6, r7}
 800072c:	46ba      	mov	sl, r7
 800072e:	46b1      	mov	r9, r6
 8000730:	46a8      	mov	r8, r5
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	1ba2      	subs	r2, r4, r6
 8000736:	4691      	mov	r9, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	dd63      	ble.n	8000804 <__aeabi_fsub+0x1b0>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fsub+0xee>
 8000740:	e099      	b.n	8000876 <__aeabi_fsub+0x222>
 8000742:	2cff      	cmp	r4, #255	; 0xff
 8000744:	d03c      	beq.n	80007c0 <__aeabi_fsub+0x16c>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	4652      	mov	r2, sl
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431a      	orrs	r2, r3
 800074e:	4692      	mov	sl, r2
 8000750:	464a      	mov	r2, r9
 8000752:	2301      	movs	r3, #1
 8000754:	2a1b      	cmp	r2, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fsub+0x116>
 8000758:	4653      	mov	r3, sl
 800075a:	2120      	movs	r1, #32
 800075c:	40d3      	lsrs	r3, r2
 800075e:	1a89      	subs	r1, r1, r2
 8000760:	4652      	mov	r2, sl
 8000762:	408a      	lsls	r2, r1
 8000764:	1e51      	subs	r1, r2, #1
 8000766:	418a      	sbcs	r2, r1
 8000768:	4313      	orrs	r3, r2
 800076a:	4463      	add	r3, ip
 800076c:	015a      	lsls	r2, r3, #5
 800076e:	d400      	bmi.n	8000772 <__aeabi_fsub+0x11e>
 8000770:	e0a4      	b.n	80008bc <__aeabi_fsub+0x268>
 8000772:	3401      	adds	r4, #1
 8000774:	2cff      	cmp	r4, #255	; 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fsub+0x126>
 8000778:	e0ab      	b.n	80008d2 <__aeabi_fsub+0x27e>
 800077a:	2201      	movs	r2, #1
 800077c:	4997      	ldr	r1, [pc, #604]	; (80009dc <__aeabi_fsub+0x388>)
 800077e:	401a      	ands	r2, r3
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	400b      	ands	r3, r1
 8000784:	4313      	orrs	r3, r2
 8000786:	e7bb      	b.n	8000700 <__aeabi_fsub+0xac>
 8000788:	2a00      	cmp	r2, #0
 800078a:	d032      	beq.n	80007f2 <__aeabi_fsub+0x19e>
 800078c:	428d      	cmp	r5, r1
 800078e:	d035      	beq.n	80007fc <__aeabi_fsub+0x1a8>
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	4252      	negs	r2, r2
 8000794:	4691      	mov	r9, r2
 8000796:	44a1      	add	r9, r4
 8000798:	464a      	mov	r2, r9
 800079a:	2a00      	cmp	r2, #0
 800079c:	d051      	beq.n	8000842 <__aeabi_fsub+0x1ee>
 800079e:	1b30      	subs	r0, r6, r4
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fsub+0x152>
 80007a4:	e09c      	b.n	80008e0 <__aeabi_fsub+0x28c>
 80007a6:	4663      	mov	r3, ip
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fsub+0x15a>
 80007ac:	e0df      	b.n	800096e <__aeabi_fsub+0x31a>
 80007ae:	3801      	subs	r0, #1
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fsub+0x162>
 80007b4:	e0f7      	b.n	80009a6 <__aeabi_fsub+0x352>
 80007b6:	2eff      	cmp	r6, #255	; 0xff
 80007b8:	d000      	beq.n	80007bc <__aeabi_fsub+0x168>
 80007ba:	e099      	b.n	80008f0 <__aeabi_fsub+0x29c>
 80007bc:	000d      	movs	r5, r1
 80007be:	4643      	mov	r3, r8
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fsub+0x172>
 80007c4:	e085      	b.n	80008d2 <__aeabi_fsub+0x27e>
 80007c6:	2780      	movs	r7, #128	; 0x80
 80007c8:	03ff      	lsls	r7, r7, #15
 80007ca:	431f      	orrs	r7, r3
 80007cc:	027f      	lsls	r7, r7, #9
 80007ce:	20ff      	movs	r0, #255	; 0xff
 80007d0:	0a7f      	lsrs	r7, r7, #9
 80007d2:	e7a6      	b.n	8000722 <__aeabi_fsub+0xce>
 80007d4:	4652      	mov	r2, sl
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d074      	beq.n	80008c4 <__aeabi_fsub+0x270>
 80007da:	2201      	movs	r2, #1
 80007dc:	4252      	negs	r2, r2
 80007de:	4690      	mov	r8, r2
 80007e0:	44c1      	add	r9, r8
 80007e2:	464a      	mov	r2, r9
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_fsub+0x196>
 80007e8:	e0c8      	b.n	800097c <__aeabi_fsub+0x328>
 80007ea:	2cff      	cmp	r4, #255	; 0xff
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fsub+0x19c>
 80007ee:	e75f      	b.n	80006b0 <__aeabi_fsub+0x5c>
 80007f0:	e7e6      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80007f2:	2201      	movs	r2, #1
 80007f4:	4051      	eors	r1, r2
 80007f6:	42a9      	cmp	r1, r5
 80007f8:	d000      	beq.n	80007fc <__aeabi_fsub+0x1a8>
 80007fa:	e749      	b.n	8000690 <__aeabi_fsub+0x3c>
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	4252      	negs	r2, r2
 8000800:	4691      	mov	r9, r2
 8000802:	44a1      	add	r9, r4
 8000804:	464a      	mov	r2, r9
 8000806:	2a00      	cmp	r2, #0
 8000808:	d043      	beq.n	8000892 <__aeabi_fsub+0x23e>
 800080a:	1b31      	subs	r1, r6, r4
 800080c:	2c00      	cmp	r4, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0x1be>
 8000810:	e08c      	b.n	800092c <__aeabi_fsub+0x2d8>
 8000812:	2eff      	cmp	r6, #255	; 0xff
 8000814:	d100      	bne.n	8000818 <__aeabi_fsub+0x1c4>
 8000816:	e092      	b.n	800093e <__aeabi_fsub+0x2ea>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	4662      	mov	r2, ip
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431a      	orrs	r2, r3
 8000820:	4694      	mov	ip, r2
 8000822:	2301      	movs	r3, #1
 8000824:	291b      	cmp	r1, #27
 8000826:	dc09      	bgt.n	800083c <__aeabi_fsub+0x1e8>
 8000828:	2020      	movs	r0, #32
 800082a:	4663      	mov	r3, ip
 800082c:	4662      	mov	r2, ip
 800082e:	40cb      	lsrs	r3, r1
 8000830:	1a41      	subs	r1, r0, r1
 8000832:	408a      	lsls	r2, r1
 8000834:	0011      	movs	r1, r2
 8000836:	1e48      	subs	r0, r1, #1
 8000838:	4181      	sbcs	r1, r0
 800083a:	430b      	orrs	r3, r1
 800083c:	0034      	movs	r4, r6
 800083e:	4453      	add	r3, sl
 8000840:	e794      	b.n	800076c <__aeabi_fsub+0x118>
 8000842:	22fe      	movs	r2, #254	; 0xfe
 8000844:	1c66      	adds	r6, r4, #1
 8000846:	4232      	tst	r2, r6
 8000848:	d164      	bne.n	8000914 <__aeabi_fsub+0x2c0>
 800084a:	2c00      	cmp	r4, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fsub+0x1fc>
 800084e:	e082      	b.n	8000956 <__aeabi_fsub+0x302>
 8000850:	4663      	mov	r3, ip
 8000852:	2b00      	cmp	r3, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x204>
 8000856:	e0ab      	b.n	80009b0 <__aeabi_fsub+0x35c>
 8000858:	4653      	mov	r3, sl
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x20c>
 800085e:	e760      	b.n	8000722 <__aeabi_fsub+0xce>
 8000860:	4663      	mov	r3, ip
 8000862:	4652      	mov	r2, sl
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	015a      	lsls	r2, r3, #5
 8000868:	d400      	bmi.n	800086c <__aeabi_fsub+0x218>
 800086a:	e0aa      	b.n	80009c2 <__aeabi_fsub+0x36e>
 800086c:	4663      	mov	r3, ip
 800086e:	4652      	mov	r2, sl
 8000870:	000d      	movs	r5, r1
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	e744      	b.n	8000700 <__aeabi_fsub+0xac>
 8000876:	4652      	mov	r2, sl
 8000878:	2a00      	cmp	r2, #0
 800087a:	d023      	beq.n	80008c4 <__aeabi_fsub+0x270>
 800087c:	2201      	movs	r2, #1
 800087e:	4252      	negs	r2, r2
 8000880:	4690      	mov	r8, r2
 8000882:	44c1      	add	r9, r8
 8000884:	464a      	mov	r2, r9
 8000886:	2a00      	cmp	r2, #0
 8000888:	d075      	beq.n	8000976 <__aeabi_fsub+0x322>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d000      	beq.n	8000890 <__aeabi_fsub+0x23c>
 800088e:	e75f      	b.n	8000750 <__aeabi_fsub+0xfc>
 8000890:	e796      	b.n	80007c0 <__aeabi_fsub+0x16c>
 8000892:	26fe      	movs	r6, #254	; 0xfe
 8000894:	3401      	adds	r4, #1
 8000896:	4226      	tst	r6, r4
 8000898:	d153      	bne.n	8000942 <__aeabi_fsub+0x2ee>
 800089a:	2800      	cmp	r0, #0
 800089c:	d172      	bne.n	8000984 <__aeabi_fsub+0x330>
 800089e:	4663      	mov	r3, ip
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fsub+0x252>
 80008a4:	e093      	b.n	80009ce <__aeabi_fsub+0x37a>
 80008a6:	4653      	mov	r3, sl
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_fsub+0x25a>
 80008ac:	e739      	b.n	8000722 <__aeabi_fsub+0xce>
 80008ae:	4463      	add	r3, ip
 80008b0:	2400      	movs	r4, #0
 80008b2:	015a      	lsls	r2, r3, #5
 80008b4:	d502      	bpl.n	80008bc <__aeabi_fsub+0x268>
 80008b6:	4a4a      	ldr	r2, [pc, #296]	; (80009e0 <__aeabi_fsub+0x38c>)
 80008b8:	3401      	adds	r4, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	075a      	lsls	r2, r3, #29
 80008be:	d000      	beq.n	80008c2 <__aeabi_fsub+0x26e>
 80008c0:	e720      	b.n	8000704 <__aeabi_fsub+0xb0>
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	2cff      	cmp	r4, #255	; 0xff
 80008c6:	d100      	bne.n	80008ca <__aeabi_fsub+0x276>
 80008c8:	e77a      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80008ca:	025b      	lsls	r3, r3, #9
 80008cc:	0a5f      	lsrs	r7, r3, #9
 80008ce:	b2e0      	uxtb	r0, r4
 80008d0:	e727      	b.n	8000722 <__aeabi_fsub+0xce>
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	2700      	movs	r7, #0
 80008d6:	e724      	b.n	8000722 <__aeabi_fsub+0xce>
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <__aeabi_fsub+0x38c>)
 80008da:	1a24      	subs	r4, r4, r0
 80008dc:	4033      	ands	r3, r6
 80008de:	e70f      	b.n	8000700 <__aeabi_fsub+0xac>
 80008e0:	2eff      	cmp	r6, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fsub+0x292>
 80008e4:	e76a      	b.n	80007bc <__aeabi_fsub+0x168>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	4662      	mov	r2, ip
 80008ea:	04db      	lsls	r3, r3, #19
 80008ec:	431a      	orrs	r2, r3
 80008ee:	4694      	mov	ip, r2
 80008f0:	2301      	movs	r3, #1
 80008f2:	281b      	cmp	r0, #27
 80008f4:	dc09      	bgt.n	800090a <__aeabi_fsub+0x2b6>
 80008f6:	2420      	movs	r4, #32
 80008f8:	4663      	mov	r3, ip
 80008fa:	4662      	mov	r2, ip
 80008fc:	40c3      	lsrs	r3, r0
 80008fe:	1a20      	subs	r0, r4, r0
 8000900:	4082      	lsls	r2, r0
 8000902:	0010      	movs	r0, r2
 8000904:	1e44      	subs	r4, r0, #1
 8000906:	41a0      	sbcs	r0, r4
 8000908:	4303      	orrs	r3, r0
 800090a:	4652      	mov	r2, sl
 800090c:	000d      	movs	r5, r1
 800090e:	0034      	movs	r4, r6
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	e6dc      	b.n	80006ce <__aeabi_fsub+0x7a>
 8000914:	4663      	mov	r3, ip
 8000916:	4652      	mov	r2, sl
 8000918:	1a9e      	subs	r6, r3, r2
 800091a:	0173      	lsls	r3, r6, #5
 800091c:	d417      	bmi.n	800094e <__aeabi_fsub+0x2fa>
 800091e:	2e00      	cmp	r6, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_fsub+0x2d0>
 8000922:	e6d9      	b.n	80006d8 <__aeabi_fsub+0x84>
 8000924:	2500      	movs	r5, #0
 8000926:	2000      	movs	r0, #0
 8000928:	2700      	movs	r7, #0
 800092a:	e6fa      	b.n	8000722 <__aeabi_fsub+0xce>
 800092c:	4663      	mov	r3, ip
 800092e:	2b00      	cmp	r3, #0
 8000930:	d044      	beq.n	80009bc <__aeabi_fsub+0x368>
 8000932:	3901      	subs	r1, #1
 8000934:	2900      	cmp	r1, #0
 8000936:	d04c      	beq.n	80009d2 <__aeabi_fsub+0x37e>
 8000938:	2eff      	cmp	r6, #255	; 0xff
 800093a:	d000      	beq.n	800093e <__aeabi_fsub+0x2ea>
 800093c:	e771      	b.n	8000822 <__aeabi_fsub+0x1ce>
 800093e:	4643      	mov	r3, r8
 8000940:	e73e      	b.n	80007c0 <__aeabi_fsub+0x16c>
 8000942:	2cff      	cmp	r4, #255	; 0xff
 8000944:	d0c5      	beq.n	80008d2 <__aeabi_fsub+0x27e>
 8000946:	4652      	mov	r2, sl
 8000948:	4462      	add	r2, ip
 800094a:	0853      	lsrs	r3, r2, #1
 800094c:	e7b6      	b.n	80008bc <__aeabi_fsub+0x268>
 800094e:	4663      	mov	r3, ip
 8000950:	000d      	movs	r5, r1
 8000952:	1ad6      	subs	r6, r2, r3
 8000954:	e6c0      	b.n	80006d8 <__aeabi_fsub+0x84>
 8000956:	4662      	mov	r2, ip
 8000958:	2a00      	cmp	r2, #0
 800095a:	d116      	bne.n	800098a <__aeabi_fsub+0x336>
 800095c:	4653      	mov	r3, sl
 800095e:	2b00      	cmp	r3, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fsub+0x310>
 8000962:	e72b      	b.n	80007bc <__aeabi_fsub+0x168>
 8000964:	2780      	movs	r7, #128	; 0x80
 8000966:	2500      	movs	r5, #0
 8000968:	20ff      	movs	r0, #255	; 0xff
 800096a:	03ff      	lsls	r7, r7, #15
 800096c:	e6d9      	b.n	8000722 <__aeabi_fsub+0xce>
 800096e:	000d      	movs	r5, r1
 8000970:	4643      	mov	r3, r8
 8000972:	0034      	movs	r4, r6
 8000974:	e7a6      	b.n	80008c4 <__aeabi_fsub+0x270>
 8000976:	4653      	mov	r3, sl
 8000978:	4463      	add	r3, ip
 800097a:	e6f7      	b.n	800076c <__aeabi_fsub+0x118>
 800097c:	4663      	mov	r3, ip
 800097e:	4652      	mov	r2, sl
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	e6a4      	b.n	80006ce <__aeabi_fsub+0x7a>
 8000984:	4662      	mov	r2, ip
 8000986:	2a00      	cmp	r2, #0
 8000988:	d0d9      	beq.n	800093e <__aeabi_fsub+0x2ea>
 800098a:	4652      	mov	r2, sl
 800098c:	2a00      	cmp	r2, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fsub+0x33e>
 8000990:	e716      	b.n	80007c0 <__aeabi_fsub+0x16c>
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	03d2      	lsls	r2, r2, #15
 8000996:	4213      	tst	r3, r2
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x348>
 800099a:	e711      	b.n	80007c0 <__aeabi_fsub+0x16c>
 800099c:	4640      	mov	r0, r8
 800099e:	4210      	tst	r0, r2
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fsub+0x350>
 80009a2:	e70d      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80009a4:	e70a      	b.n	80007bc <__aeabi_fsub+0x168>
 80009a6:	4652      	mov	r2, sl
 80009a8:	000d      	movs	r5, r1
 80009aa:	0034      	movs	r4, r6
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	e68e      	b.n	80006ce <__aeabi_fsub+0x7a>
 80009b0:	4653      	mov	r3, sl
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <__aeabi_fsub+0x374>
 80009b6:	000d      	movs	r5, r1
 80009b8:	4647      	mov	r7, r8
 80009ba:	e6b2      	b.n	8000722 <__aeabi_fsub+0xce>
 80009bc:	4643      	mov	r3, r8
 80009be:	0034      	movs	r4, r6
 80009c0:	e780      	b.n	80008c4 <__aeabi_fsub+0x270>
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0x374>
 80009c6:	e779      	b.n	80008bc <__aeabi_fsub+0x268>
 80009c8:	2500      	movs	r5, #0
 80009ca:	2700      	movs	r7, #0
 80009cc:	e6a9      	b.n	8000722 <__aeabi_fsub+0xce>
 80009ce:	4647      	mov	r7, r8
 80009d0:	e6a7      	b.n	8000722 <__aeabi_fsub+0xce>
 80009d2:	4653      	mov	r3, sl
 80009d4:	0034      	movs	r4, r6
 80009d6:	4463      	add	r3, ip
 80009d8:	e6c8      	b.n	800076c <__aeabi_fsub+0x118>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	7dffffff 	.word	0x7dffffff
 80009e0:	fbffffff 	.word	0xfbffffff

080009e4 <__aeabi_f2iz>:
 80009e4:	0241      	lsls	r1, r0, #9
 80009e6:	0042      	lsls	r2, r0, #1
 80009e8:	0fc3      	lsrs	r3, r0, #31
 80009ea:	0a49      	lsrs	r1, r1, #9
 80009ec:	2000      	movs	r0, #0
 80009ee:	0e12      	lsrs	r2, r2, #24
 80009f0:	2a7e      	cmp	r2, #126	; 0x7e
 80009f2:	d903      	bls.n	80009fc <__aeabi_f2iz+0x18>
 80009f4:	2a9d      	cmp	r2, #157	; 0x9d
 80009f6:	d902      	bls.n	80009fe <__aeabi_f2iz+0x1a>
 80009f8:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <__aeabi_f2iz+0x3c>)
 80009fa:	1898      	adds	r0, r3, r2
 80009fc:	4770      	bx	lr
 80009fe:	2080      	movs	r0, #128	; 0x80
 8000a00:	0400      	lsls	r0, r0, #16
 8000a02:	4301      	orrs	r1, r0
 8000a04:	2a95      	cmp	r2, #149	; 0x95
 8000a06:	dc07      	bgt.n	8000a18 <__aeabi_f2iz+0x34>
 8000a08:	2096      	movs	r0, #150	; 0x96
 8000a0a:	1a82      	subs	r2, r0, r2
 8000a0c:	40d1      	lsrs	r1, r2
 8000a0e:	4248      	negs	r0, r1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f3      	bne.n	80009fc <__aeabi_f2iz+0x18>
 8000a14:	0008      	movs	r0, r1
 8000a16:	e7f1      	b.n	80009fc <__aeabi_f2iz+0x18>
 8000a18:	3a96      	subs	r2, #150	; 0x96
 8000a1a:	4091      	lsls	r1, r2
 8000a1c:	e7f7      	b.n	8000a0e <__aeabi_f2iz+0x2a>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	7fffffff 	.word	0x7fffffff

08000a24 <__aeabi_ddiv>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	4657      	mov	r7, sl
 8000a28:	464e      	mov	r6, r9
 8000a2a:	4645      	mov	r5, r8
 8000a2c:	46de      	mov	lr, fp
 8000a2e:	b5e0      	push	{r5, r6, r7, lr}
 8000a30:	4681      	mov	r9, r0
 8000a32:	0005      	movs	r5, r0
 8000a34:	030c      	lsls	r4, r1, #12
 8000a36:	0048      	lsls	r0, r1, #1
 8000a38:	4692      	mov	sl, r2
 8000a3a:	001f      	movs	r7, r3
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	0b24      	lsrs	r4, r4, #12
 8000a40:	0d40      	lsrs	r0, r0, #21
 8000a42:	0fce      	lsrs	r6, r1, #31
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d059      	beq.n	8000afc <__aeabi_ddiv+0xd8>
 8000a48:	4b87      	ldr	r3, [pc, #540]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_ddiv+0x2c>
 8000a4e:	e098      	b.n	8000b82 <__aeabi_ddiv+0x15e>
 8000a50:	0f6b      	lsrs	r3, r5, #29
 8000a52:	00e4      	lsls	r4, r4, #3
 8000a54:	431c      	orrs	r4, r3
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	041b      	lsls	r3, r3, #16
 8000a5a:	4323      	orrs	r3, r4
 8000a5c:	4698      	mov	r8, r3
 8000a5e:	4b83      	ldr	r3, [pc, #524]	; (8000c6c <__aeabi_ddiv+0x248>)
 8000a60:	00ed      	lsls	r5, r5, #3
 8000a62:	469b      	mov	fp, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	4699      	mov	r9, r3
 8000a68:	4483      	add	fp, r0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	033c      	lsls	r4, r7, #12
 8000a6e:	007b      	lsls	r3, r7, #1
 8000a70:	4650      	mov	r0, sl
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	0d5b      	lsrs	r3, r3, #21
 8000a76:	0fff      	lsrs	r7, r7, #31
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d067      	beq.n	8000b4c <__aeabi_ddiv+0x128>
 8000a7c:	4a7a      	ldr	r2, [pc, #488]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d018      	beq.n	8000ab4 <__aeabi_ddiv+0x90>
 8000a82:	497a      	ldr	r1, [pc, #488]	; (8000c6c <__aeabi_ddiv+0x248>)
 8000a84:	0f42      	lsrs	r2, r0, #29
 8000a86:	468c      	mov	ip, r1
 8000a88:	00e4      	lsls	r4, r4, #3
 8000a8a:	4659      	mov	r1, fp
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	4463      	add	r3, ip
 8000a92:	0412      	lsls	r2, r2, #16
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	4314      	orrs	r4, r2
 8000a98:	469b      	mov	fp, r3
 8000a9a:	00c2      	lsls	r2, r0, #3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	0033      	movs	r3, r6
 8000aa0:	407b      	eors	r3, r7
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d900      	bls.n	8000aac <__aeabi_ddiv+0x88>
 8000aaa:	e0ef      	b.n	8000c8c <__aeabi_ddiv+0x268>
 8000aac:	4970      	ldr	r1, [pc, #448]	; (8000c70 <__aeabi_ddiv+0x24c>)
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	58cb      	ldr	r3, [r1, r3]
 8000ab2:	469f      	mov	pc, r3
 8000ab4:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <__aeabi_ddiv+0x250>)
 8000ab6:	4652      	mov	r2, sl
 8000ab8:	469c      	mov	ip, r3
 8000aba:	4322      	orrs	r2, r4
 8000abc:	44e3      	add	fp, ip
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_ddiv+0xa0>
 8000ac2:	e095      	b.n	8000bf0 <__aeabi_ddiv+0x1cc>
 8000ac4:	4649      	mov	r1, r9
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	4689      	mov	r9, r1
 8000acc:	2400      	movs	r4, #0
 8000ace:	2002      	movs	r0, #2
 8000ad0:	e7e5      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	4652      	mov	r2, sl
 8000ada:	051b      	lsls	r3, r3, #20
 8000adc:	4323      	orrs	r3, r4
 8000ade:	07d2      	lsls	r2, r2, #31
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	0028      	movs	r0, r5
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	b005      	add	sp, #20
 8000ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8000aea:	46bb      	mov	fp, r7
 8000aec:	46b2      	mov	sl, r6
 8000aee:	46a9      	mov	r9, r5
 8000af0:	46a0      	mov	r8, r4
 8000af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af4:	2400      	movs	r4, #0
 8000af6:	2500      	movs	r5, #0
 8000af8:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000afa:	e7ed      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000afc:	464b      	mov	r3, r9
 8000afe:	4323      	orrs	r3, r4
 8000b00:	4698      	mov	r8, r3
 8000b02:	d100      	bne.n	8000b06 <__aeabi_ddiv+0xe2>
 8000b04:	e089      	b.n	8000c1a <__aeabi_ddiv+0x1f6>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_ddiv+0xe8>
 8000b0a:	e1e0      	b.n	8000ece <__aeabi_ddiv+0x4aa>
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f000 fdf5 	bl	80016fc <__clzsi2>
 8000b12:	0001      	movs	r1, r0
 8000b14:	0002      	movs	r2, r0
 8000b16:	390b      	subs	r1, #11
 8000b18:	231d      	movs	r3, #29
 8000b1a:	1a5b      	subs	r3, r3, r1
 8000b1c:	4649      	mov	r1, r9
 8000b1e:	0010      	movs	r0, r2
 8000b20:	40d9      	lsrs	r1, r3
 8000b22:	3808      	subs	r0, #8
 8000b24:	4084      	lsls	r4, r0
 8000b26:	000b      	movs	r3, r1
 8000b28:	464d      	mov	r5, r9
 8000b2a:	4323      	orrs	r3, r4
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	4085      	lsls	r5, r0
 8000b30:	4851      	ldr	r0, [pc, #324]	; (8000c78 <__aeabi_ddiv+0x254>)
 8000b32:	033c      	lsls	r4, r7, #12
 8000b34:	1a83      	subs	r3, r0, r2
 8000b36:	469b      	mov	fp, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4699      	mov	r9, r3
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	007b      	lsls	r3, r7, #1
 8000b40:	4650      	mov	r0, sl
 8000b42:	0b24      	lsrs	r4, r4, #12
 8000b44:	0d5b      	lsrs	r3, r3, #21
 8000b46:	0fff      	lsrs	r7, r7, #31
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d197      	bne.n	8000a7c <__aeabi_ddiv+0x58>
 8000b4c:	4652      	mov	r2, sl
 8000b4e:	4322      	orrs	r2, r4
 8000b50:	d055      	beq.n	8000bfe <__aeabi_ddiv+0x1da>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_ddiv+0x134>
 8000b56:	e1ca      	b.n	8000eee <__aeabi_ddiv+0x4ca>
 8000b58:	0020      	movs	r0, r4
 8000b5a:	f000 fdcf 	bl	80016fc <__clzsi2>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	3a0b      	subs	r2, #11
 8000b62:	231d      	movs	r3, #29
 8000b64:	0001      	movs	r1, r0
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	4652      	mov	r2, sl
 8000b6a:	3908      	subs	r1, #8
 8000b6c:	40da      	lsrs	r2, r3
 8000b6e:	408c      	lsls	r4, r1
 8000b70:	4314      	orrs	r4, r2
 8000b72:	4652      	mov	r2, sl
 8000b74:	408a      	lsls	r2, r1
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <__aeabi_ddiv+0x258>)
 8000b78:	4458      	add	r0, fp
 8000b7a:	469b      	mov	fp, r3
 8000b7c:	4483      	add	fp, r0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	e78d      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000b82:	464b      	mov	r3, r9
 8000b84:	4323      	orrs	r3, r4
 8000b86:	4698      	mov	r8, r3
 8000b88:	d140      	bne.n	8000c0c <__aeabi_ddiv+0x1e8>
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	3b06      	subs	r3, #6
 8000b90:	2500      	movs	r5, #0
 8000b92:	4683      	mov	fp, r0
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	e769      	b.n	8000a6c <__aeabi_ddiv+0x48>
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	9b00      	ldr	r3, [sp, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d0a9      	beq.n	8000af4 <__aeabi_ddiv+0xd0>
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_ddiv+0x182>
 8000ba4:	e211      	b.n	8000fca <__aeabi_ddiv+0x5a6>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d093      	beq.n	8000ad2 <__aeabi_ddiv+0xae>
 8000baa:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <__aeabi_ddiv+0x25c>)
 8000bac:	445a      	add	r2, fp
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	dc00      	bgt.n	8000bb4 <__aeabi_ddiv+0x190>
 8000bb2:	e13c      	b.n	8000e2e <__aeabi_ddiv+0x40a>
 8000bb4:	076b      	lsls	r3, r5, #29
 8000bb6:	d000      	beq.n	8000bba <__aeabi_ddiv+0x196>
 8000bb8:	e1a7      	b.n	8000f0a <__aeabi_ddiv+0x4e6>
 8000bba:	08ed      	lsrs	r5, r5, #3
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	01db      	lsls	r3, r3, #7
 8000bc0:	d506      	bpl.n	8000bd0 <__aeabi_ddiv+0x1ac>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <__aeabi_ddiv+0x260>)
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	4690      	mov	r8, r2
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	445a      	add	r2, fp
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <__aeabi_ddiv+0x264>)
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dc8e      	bgt.n	8000af4 <__aeabi_ddiv+0xd0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	0552      	lsls	r2, r2, #21
 8000bda:	0758      	lsls	r0, r3, #29
 8000bdc:	025c      	lsls	r4, r3, #9
 8000bde:	4305      	orrs	r5, r0
 8000be0:	0b24      	lsrs	r4, r4, #12
 8000be2:	0d53      	lsrs	r3, r2, #21
 8000be4:	e778      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000be6:	46ba      	mov	sl, r7
 8000be8:	46a0      	mov	r8, r4
 8000bea:	0015      	movs	r5, r2
 8000bec:	9000      	str	r0, [sp, #0]
 8000bee:	e7d4      	b.n	8000b9a <__aeabi_ddiv+0x176>
 8000bf0:	464a      	mov	r2, r9
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	4691      	mov	r9, r2
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	4652      	mov	r2, sl
 8000bfc:	e74f      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	2301      	movs	r3, #1
 8000c02:	4319      	orrs	r1, r3
 8000c04:	4689      	mov	r9, r1
 8000c06:	2400      	movs	r4, #0
 8000c08:	2001      	movs	r0, #1
 8000c0a:	e748      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	4699      	mov	r9, r3
 8000c10:	3b09      	subs	r3, #9
 8000c12:	46a0      	mov	r8, r4
 8000c14:	4683      	mov	fp, r0
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	e728      	b.n	8000a6c <__aeabi_ddiv+0x48>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	469b      	mov	fp, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	2500      	movs	r5, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	e720      	b.n	8000a6c <__aeabi_ddiv+0x48>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2480      	movs	r4, #128	; 0x80
 8000c2e:	469a      	mov	sl, r3
 8000c30:	2500      	movs	r5, #0
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000c34:	0324      	lsls	r4, r4, #12
 8000c36:	e74f      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	4641      	mov	r1, r8
 8000c3c:	031b      	lsls	r3, r3, #12
 8000c3e:	4219      	tst	r1, r3
 8000c40:	d008      	beq.n	8000c54 <__aeabi_ddiv+0x230>
 8000c42:	421c      	tst	r4, r3
 8000c44:	d106      	bne.n	8000c54 <__aeabi_ddiv+0x230>
 8000c46:	431c      	orrs	r4, r3
 8000c48:	0324      	lsls	r4, r4, #12
 8000c4a:	46ba      	mov	sl, r7
 8000c4c:	0015      	movs	r5, r2
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	e741      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000c54:	2480      	movs	r4, #128	; 0x80
 8000c56:	4643      	mov	r3, r8
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	0324      	lsls	r4, r4, #12
 8000c5e:	46b2      	mov	sl, r6
 8000c60:	4b01      	ldr	r3, [pc, #4]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000c62:	0b24      	lsrs	r4, r4, #12
 8000c64:	e738      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	fffffc01 	.word	0xfffffc01
 8000c70:	08007508 	.word	0x08007508
 8000c74:	fffff801 	.word	0xfffff801
 8000c78:	fffffc0d 	.word	0xfffffc0d
 8000c7c:	000003f3 	.word	0x000003f3
 8000c80:	000003ff 	.word	0x000003ff
 8000c84:	feffffff 	.word	0xfeffffff
 8000c88:	000007fe 	.word	0x000007fe
 8000c8c:	4544      	cmp	r4, r8
 8000c8e:	d200      	bcs.n	8000c92 <__aeabi_ddiv+0x26e>
 8000c90:	e116      	b.n	8000ec0 <__aeabi_ddiv+0x49c>
 8000c92:	d100      	bne.n	8000c96 <__aeabi_ddiv+0x272>
 8000c94:	e111      	b.n	8000eba <__aeabi_ddiv+0x496>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425b      	negs	r3, r3
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	002e      	movs	r6, r5
 8000c9e:	4640      	mov	r0, r8
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	44e3      	add	fp, ip
 8000ca4:	0223      	lsls	r3, r4, #8
 8000ca6:	0e14      	lsrs	r4, r2, #24
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	4699      	mov	r9, r3
 8000cae:	0423      	lsls	r3, r4, #16
 8000cb0:	0c1f      	lsrs	r7, r3, #16
 8000cb2:	0212      	lsls	r2, r2, #8
 8000cb4:	4649      	mov	r1, r9
 8000cb6:	9200      	str	r2, [sp, #0]
 8000cb8:	9701      	str	r7, [sp, #4]
 8000cba:	f7ff faa9 	bl	8000210 <__aeabi_uidivmod>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	437a      	muls	r2, r7
 8000cc2:	040b      	lsls	r3, r1, #16
 8000cc4:	0c31      	lsrs	r1, r6, #16
 8000cc6:	4680      	mov	r8, r0
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	d90b      	bls.n	8000ce6 <__aeabi_ddiv+0x2c2>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	1909      	adds	r1, r1, r4
 8000cd6:	44e0      	add	r8, ip
 8000cd8:	428c      	cmp	r4, r1
 8000cda:	d804      	bhi.n	8000ce6 <__aeabi_ddiv+0x2c2>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	d902      	bls.n	8000ce6 <__aeabi_ddiv+0x2c2>
 8000ce0:	1e83      	subs	r3, r0, #2
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	1909      	adds	r1, r1, r4
 8000ce6:	1a88      	subs	r0, r1, r2
 8000ce8:	4649      	mov	r1, r9
 8000cea:	f7ff fa91 	bl	8000210 <__aeabi_uidivmod>
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	0431      	lsls	r1, r6, #16
 8000cf4:	4666      	mov	r6, ip
 8000cf6:	9a01      	ldr	r2, [sp, #4]
 8000cf8:	0c09      	lsrs	r1, r1, #16
 8000cfa:	4342      	muls	r2, r0
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	4331      	orrs	r1, r6
 8000d00:	428a      	cmp	r2, r1
 8000d02:	d904      	bls.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000d04:	1909      	adds	r1, r1, r4
 8000d06:	3b01      	subs	r3, #1
 8000d08:	428c      	cmp	r4, r1
 8000d0a:	d800      	bhi.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000d0c:	e111      	b.n	8000f32 <__aeabi_ddiv+0x50e>
 8000d0e:	1a89      	subs	r1, r1, r2
 8000d10:	4642      	mov	r2, r8
 8000d12:	9e00      	ldr	r6, [sp, #0]
 8000d14:	0412      	lsls	r2, r2, #16
 8000d16:	431a      	orrs	r2, r3
 8000d18:	0c33      	lsrs	r3, r6, #16
 8000d1a:	001f      	movs	r7, r3
 8000d1c:	0c10      	lsrs	r0, r2, #16
 8000d1e:	4690      	mov	r8, r2
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	0413      	lsls	r3, r2, #16
 8000d24:	0432      	lsls	r2, r6, #16
 8000d26:	0c16      	lsrs	r6, r2, #16
 8000d28:	0032      	movs	r2, r6
 8000d2a:	0c1b      	lsrs	r3, r3, #16
 8000d2c:	435a      	muls	r2, r3
 8000d2e:	9603      	str	r6, [sp, #12]
 8000d30:	437b      	muls	r3, r7
 8000d32:	4346      	muls	r6, r0
 8000d34:	4378      	muls	r0, r7
 8000d36:	0c17      	lsrs	r7, r2, #16
 8000d38:	46bc      	mov	ip, r7
 8000d3a:	199b      	adds	r3, r3, r6
 8000d3c:	4463      	add	r3, ip
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	d903      	bls.n	8000d4a <__aeabi_ddiv+0x326>
 8000d42:	2680      	movs	r6, #128	; 0x80
 8000d44:	0276      	lsls	r6, r6, #9
 8000d46:	46b4      	mov	ip, r6
 8000d48:	4460      	add	r0, ip
 8000d4a:	0c1e      	lsrs	r6, r3, #16
 8000d4c:	1830      	adds	r0, r6, r0
 8000d4e:	0416      	lsls	r6, r2, #16
 8000d50:	041b      	lsls	r3, r3, #16
 8000d52:	0c36      	lsrs	r6, r6, #16
 8000d54:	199e      	adds	r6, r3, r6
 8000d56:	4281      	cmp	r1, r0
 8000d58:	d200      	bcs.n	8000d5c <__aeabi_ddiv+0x338>
 8000d5a:	e09c      	b.n	8000e96 <__aeabi_ddiv+0x472>
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x33c>
 8000d5e:	e097      	b.n	8000e90 <__aeabi_ddiv+0x46c>
 8000d60:	1bae      	subs	r6, r5, r6
 8000d62:	1a09      	subs	r1, r1, r0
 8000d64:	42b5      	cmp	r5, r6
 8000d66:	4180      	sbcs	r0, r0
 8000d68:	4240      	negs	r0, r0
 8000d6a:	1a08      	subs	r0, r1, r0
 8000d6c:	4284      	cmp	r4, r0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0x34e>
 8000d70:	e111      	b.n	8000f96 <__aeabi_ddiv+0x572>
 8000d72:	4649      	mov	r1, r9
 8000d74:	f7ff fa4c 	bl	8000210 <__aeabi_uidivmod>
 8000d78:	9a01      	ldr	r2, [sp, #4]
 8000d7a:	040b      	lsls	r3, r1, #16
 8000d7c:	4342      	muls	r2, r0
 8000d7e:	0c31      	lsrs	r1, r6, #16
 8000d80:	0005      	movs	r5, r0
 8000d82:	4319      	orrs	r1, r3
 8000d84:	428a      	cmp	r2, r1
 8000d86:	d907      	bls.n	8000d98 <__aeabi_ddiv+0x374>
 8000d88:	1909      	adds	r1, r1, r4
 8000d8a:	3d01      	subs	r5, #1
 8000d8c:	428c      	cmp	r4, r1
 8000d8e:	d803      	bhi.n	8000d98 <__aeabi_ddiv+0x374>
 8000d90:	428a      	cmp	r2, r1
 8000d92:	d901      	bls.n	8000d98 <__aeabi_ddiv+0x374>
 8000d94:	1e85      	subs	r5, r0, #2
 8000d96:	1909      	adds	r1, r1, r4
 8000d98:	1a88      	subs	r0, r1, r2
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	f7ff fa38 	bl	8000210 <__aeabi_uidivmod>
 8000da0:	0409      	lsls	r1, r1, #16
 8000da2:	468c      	mov	ip, r1
 8000da4:	0431      	lsls	r1, r6, #16
 8000da6:	4666      	mov	r6, ip
 8000da8:	9a01      	ldr	r2, [sp, #4]
 8000daa:	0c09      	lsrs	r1, r1, #16
 8000dac:	4342      	muls	r2, r0
 8000dae:	0003      	movs	r3, r0
 8000db0:	4331      	orrs	r1, r6
 8000db2:	428a      	cmp	r2, r1
 8000db4:	d907      	bls.n	8000dc6 <__aeabi_ddiv+0x3a2>
 8000db6:	1909      	adds	r1, r1, r4
 8000db8:	3b01      	subs	r3, #1
 8000dba:	428c      	cmp	r4, r1
 8000dbc:	d803      	bhi.n	8000dc6 <__aeabi_ddiv+0x3a2>
 8000dbe:	428a      	cmp	r2, r1
 8000dc0:	d901      	bls.n	8000dc6 <__aeabi_ddiv+0x3a2>
 8000dc2:	1e83      	subs	r3, r0, #2
 8000dc4:	1909      	adds	r1, r1, r4
 8000dc6:	9e03      	ldr	r6, [sp, #12]
 8000dc8:	1a89      	subs	r1, r1, r2
 8000dca:	0032      	movs	r2, r6
 8000dcc:	042d      	lsls	r5, r5, #16
 8000dce:	431d      	orrs	r5, r3
 8000dd0:	9f02      	ldr	r7, [sp, #8]
 8000dd2:	042b      	lsls	r3, r5, #16
 8000dd4:	0c1b      	lsrs	r3, r3, #16
 8000dd6:	435a      	muls	r2, r3
 8000dd8:	437b      	muls	r3, r7
 8000dda:	469c      	mov	ip, r3
 8000ddc:	0c28      	lsrs	r0, r5, #16
 8000dde:	4346      	muls	r6, r0
 8000de0:	0c13      	lsrs	r3, r2, #16
 8000de2:	44b4      	add	ip, r6
 8000de4:	4463      	add	r3, ip
 8000de6:	4378      	muls	r0, r7
 8000de8:	429e      	cmp	r6, r3
 8000dea:	d903      	bls.n	8000df4 <__aeabi_ddiv+0x3d0>
 8000dec:	2680      	movs	r6, #128	; 0x80
 8000dee:	0276      	lsls	r6, r6, #9
 8000df0:	46b4      	mov	ip, r6
 8000df2:	4460      	add	r0, ip
 8000df4:	0c1e      	lsrs	r6, r3, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	0c12      	lsrs	r2, r2, #16
 8000dfc:	1830      	adds	r0, r6, r0
 8000dfe:	189b      	adds	r3, r3, r2
 8000e00:	4281      	cmp	r1, r0
 8000e02:	d306      	bcc.n	8000e12 <__aeabi_ddiv+0x3ee>
 8000e04:	d002      	beq.n	8000e0c <__aeabi_ddiv+0x3e8>
 8000e06:	2301      	movs	r3, #1
 8000e08:	431d      	orrs	r5, r3
 8000e0a:	e6ce      	b.n	8000baa <__aeabi_ddiv+0x186>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_ddiv+0x3ee>
 8000e10:	e6cb      	b.n	8000baa <__aeabi_ddiv+0x186>
 8000e12:	1861      	adds	r1, r4, r1
 8000e14:	1e6e      	subs	r6, r5, #1
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	d200      	bcs.n	8000e1c <__aeabi_ddiv+0x3f8>
 8000e1a:	e0a4      	b.n	8000f66 <__aeabi_ddiv+0x542>
 8000e1c:	4281      	cmp	r1, r0
 8000e1e:	d200      	bcs.n	8000e22 <__aeabi_ddiv+0x3fe>
 8000e20:	e0c9      	b.n	8000fb6 <__aeabi_ddiv+0x592>
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x402>
 8000e24:	e0d9      	b.n	8000fda <__aeabi_ddiv+0x5b6>
 8000e26:	0035      	movs	r5, r6
 8000e28:	e7ed      	b.n	8000e06 <__aeabi_ddiv+0x3e2>
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	426d      	negs	r5, r5
 8000e2e:	2101      	movs	r1, #1
 8000e30:	1a89      	subs	r1, r1, r2
 8000e32:	2938      	cmp	r1, #56	; 0x38
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_ddiv+0x414>
 8000e36:	e64c      	b.n	8000ad2 <__aeabi_ddiv+0xae>
 8000e38:	291f      	cmp	r1, #31
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_ddiv+0x41a>
 8000e3c:	e07f      	b.n	8000f3e <__aeabi_ddiv+0x51a>
 8000e3e:	231f      	movs	r3, #31
 8000e40:	425b      	negs	r3, r3
 8000e42:	1a9a      	subs	r2, r3, r2
 8000e44:	4643      	mov	r3, r8
 8000e46:	40d3      	lsrs	r3, r2
 8000e48:	2920      	cmp	r1, #32
 8000e4a:	d004      	beq.n	8000e56 <__aeabi_ddiv+0x432>
 8000e4c:	4644      	mov	r4, r8
 8000e4e:	4a65      	ldr	r2, [pc, #404]	; (8000fe4 <__aeabi_ddiv+0x5c0>)
 8000e50:	445a      	add	r2, fp
 8000e52:	4094      	lsls	r4, r2
 8000e54:	4325      	orrs	r5, r4
 8000e56:	1e6a      	subs	r2, r5, #1
 8000e58:	4195      	sbcs	r5, r2
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	432b      	orrs	r3, r5
 8000e5e:	0015      	movs	r5, r2
 8000e60:	2400      	movs	r4, #0
 8000e62:	401d      	ands	r5, r3
 8000e64:	421a      	tst	r2, r3
 8000e66:	d100      	bne.n	8000e6a <__aeabi_ddiv+0x446>
 8000e68:	e0a1      	b.n	8000fae <__aeabi_ddiv+0x58a>
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	401a      	ands	r2, r3
 8000e70:	2a04      	cmp	r2, #4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x452>
 8000e74:	e098      	b.n	8000fa8 <__aeabi_ddiv+0x584>
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	419b      	sbcs	r3, r3
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	18e4      	adds	r4, r4, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	0222      	lsls	r2, r4, #8
 8000e84:	d400      	bmi.n	8000e88 <__aeabi_ddiv+0x464>
 8000e86:	e08f      	b.n	8000fa8 <__aeabi_ddiv+0x584>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2400      	movs	r4, #0
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	e623      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000e90:	42b5      	cmp	r5, r6
 8000e92:	d300      	bcc.n	8000e96 <__aeabi_ddiv+0x472>
 8000e94:	e764      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000e96:	4643      	mov	r3, r8
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	9b00      	ldr	r3, [sp, #0]
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	4465      	add	r5, ip
 8000ea0:	001f      	movs	r7, r3
 8000ea2:	429d      	cmp	r5, r3
 8000ea4:	419b      	sbcs	r3, r3
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	191b      	adds	r3, r3, r4
 8000eaa:	18c9      	adds	r1, r1, r3
 8000eac:	428c      	cmp	r4, r1
 8000eae:	d23a      	bcs.n	8000f26 <__aeabi_ddiv+0x502>
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	d863      	bhi.n	8000f7c <__aeabi_ddiv+0x558>
 8000eb4:	d060      	beq.n	8000f78 <__aeabi_ddiv+0x554>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e752      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000eba:	42aa      	cmp	r2, r5
 8000ebc:	d900      	bls.n	8000ec0 <__aeabi_ddiv+0x49c>
 8000ebe:	e6ea      	b.n	8000c96 <__aeabi_ddiv+0x272>
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	07de      	lsls	r6, r3, #31
 8000ec4:	0858      	lsrs	r0, r3, #1
 8000ec6:	086b      	lsrs	r3, r5, #1
 8000ec8:	431e      	orrs	r6, r3
 8000eca:	07ed      	lsls	r5, r5, #31
 8000ecc:	e6ea      	b.n	8000ca4 <__aeabi_ddiv+0x280>
 8000ece:	4648      	mov	r0, r9
 8000ed0:	f000 fc14 	bl	80016fc <__clzsi2>
 8000ed4:	0001      	movs	r1, r0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	3115      	adds	r1, #21
 8000eda:	3220      	adds	r2, #32
 8000edc:	291c      	cmp	r1, #28
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_ddiv+0x4be>
 8000ee0:	e61a      	b.n	8000b18 <__aeabi_ddiv+0xf4>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	3808      	subs	r0, #8
 8000ee6:	4083      	lsls	r3, r0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4698      	mov	r8, r3
 8000eec:	e620      	b.n	8000b30 <__aeabi_ddiv+0x10c>
 8000eee:	f000 fc05 	bl	80016fc <__clzsi2>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	3215      	adds	r2, #21
 8000ef8:	3020      	adds	r0, #32
 8000efa:	2a1c      	cmp	r2, #28
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_ddiv+0x4dc>
 8000efe:	e630      	b.n	8000b62 <__aeabi_ddiv+0x13e>
 8000f00:	4654      	mov	r4, sl
 8000f02:	3b08      	subs	r3, #8
 8000f04:	2200      	movs	r2, #0
 8000f06:	409c      	lsls	r4, r3
 8000f08:	e635      	b.n	8000b76 <__aeabi_ddiv+0x152>
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	402b      	ands	r3, r5
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x4f0>
 8000f12:	e652      	b.n	8000bba <__aeabi_ddiv+0x196>
 8000f14:	2305      	movs	r3, #5
 8000f16:	425b      	negs	r3, r3
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	419b      	sbcs	r3, r3
 8000f1c:	3504      	adds	r5, #4
 8000f1e:	425b      	negs	r3, r3
 8000f20:	08ed      	lsrs	r5, r5, #3
 8000f22:	4498      	add	r8, r3
 8000f24:	e64a      	b.n	8000bbc <__aeabi_ddiv+0x198>
 8000f26:	428c      	cmp	r4, r1
 8000f28:	d1c5      	bne.n	8000eb6 <__aeabi_ddiv+0x492>
 8000f2a:	42af      	cmp	r7, r5
 8000f2c:	d9c0      	bls.n	8000eb0 <__aeabi_ddiv+0x48c>
 8000f2e:	4690      	mov	r8, r2
 8000f30:	e716      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000f32:	428a      	cmp	r2, r1
 8000f34:	d800      	bhi.n	8000f38 <__aeabi_ddiv+0x514>
 8000f36:	e6ea      	b.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000f38:	1e83      	subs	r3, r0, #2
 8000f3a:	1909      	adds	r1, r1, r4
 8000f3c:	e6e7      	b.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000f3e:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <__aeabi_ddiv+0x5c4>)
 8000f40:	0028      	movs	r0, r5
 8000f42:	445a      	add	r2, fp
 8000f44:	4643      	mov	r3, r8
 8000f46:	4095      	lsls	r5, r2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	40c8      	lsrs	r0, r1
 8000f4c:	1e6a      	subs	r2, r5, #1
 8000f4e:	4195      	sbcs	r5, r2
 8000f50:	4644      	mov	r4, r8
 8000f52:	4303      	orrs	r3, r0
 8000f54:	432b      	orrs	r3, r5
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	075a      	lsls	r2, r3, #29
 8000f5a:	d092      	beq.n	8000e82 <__aeabi_ddiv+0x45e>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	401a      	ands	r2, r3
 8000f60:	2a04      	cmp	r2, #4
 8000f62:	d188      	bne.n	8000e76 <__aeabi_ddiv+0x452>
 8000f64:	e78d      	b.n	8000e82 <__aeabi_ddiv+0x45e>
 8000f66:	0035      	movs	r5, r6
 8000f68:	4281      	cmp	r1, r0
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_ddiv+0x54a>
 8000f6c:	e74b      	b.n	8000e06 <__aeabi_ddiv+0x3e2>
 8000f6e:	9a00      	ldr	r2, [sp, #0]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x552>
 8000f74:	e747      	b.n	8000e06 <__aeabi_ddiv+0x3e2>
 8000f76:	e618      	b.n	8000baa <__aeabi_ddiv+0x186>
 8000f78:	42ae      	cmp	r6, r5
 8000f7a:	d99c      	bls.n	8000eb6 <__aeabi_ddiv+0x492>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	425b      	negs	r3, r3
 8000f80:	469c      	mov	ip, r3
 8000f82:	9b00      	ldr	r3, [sp, #0]
 8000f84:	44e0      	add	r8, ip
 8000f86:	469c      	mov	ip, r3
 8000f88:	4465      	add	r5, ip
 8000f8a:	429d      	cmp	r5, r3
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	425b      	negs	r3, r3
 8000f90:	191b      	adds	r3, r3, r4
 8000f92:	18c9      	adds	r1, r1, r3
 8000f94:	e6e4      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <__aeabi_ddiv+0x5c8>)
 8000f98:	445a      	add	r2, fp
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	dc00      	bgt.n	8000fa0 <__aeabi_ddiv+0x57c>
 8000f9e:	e744      	b.n	8000e2a <__aeabi_ddiv+0x406>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	4498      	add	r8, r3
 8000fa6:	e609      	b.n	8000bbc <__aeabi_ddiv+0x198>
 8000fa8:	0765      	lsls	r5, r4, #29
 8000faa:	0264      	lsls	r4, r4, #9
 8000fac:	0b24      	lsrs	r4, r4, #12
 8000fae:	08db      	lsrs	r3, r3, #3
 8000fb0:	431d      	orrs	r5, r3
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e590      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000fb6:	9e00      	ldr	r6, [sp, #0]
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	0072      	lsls	r2, r6, #1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	41bf      	sbcs	r7, r7
 8000fc0:	427f      	negs	r7, r7
 8000fc2:	193c      	adds	r4, r7, r4
 8000fc4:	1909      	adds	r1, r1, r4
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	e7ce      	b.n	8000f68 <__aeabi_ddiv+0x544>
 8000fca:	2480      	movs	r4, #128	; 0x80
 8000fcc:	4643      	mov	r3, r8
 8000fce:	0324      	lsls	r4, r4, #12
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <__aeabi_ddiv+0x5cc>)
 8000fd6:	0b24      	lsrs	r4, r4, #12
 8000fd8:	e57e      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000fda:	9a00      	ldr	r2, [sp, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3ea      	bcc.n	8000fb6 <__aeabi_ddiv+0x592>
 8000fe0:	0035      	movs	r5, r6
 8000fe2:	e7c4      	b.n	8000f6e <__aeabi_ddiv+0x54a>
 8000fe4:	0000043e 	.word	0x0000043e
 8000fe8:	0000041e 	.word	0x0000041e
 8000fec:	000003ff 	.word	0x000003ff
 8000ff0:	000007ff 	.word	0x000007ff

08000ff4 <__aeabi_dmul>:
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	4657      	mov	r7, sl
 8000ff8:	464e      	mov	r6, r9
 8000ffa:	4645      	mov	r5, r8
 8000ffc:	46de      	mov	lr, fp
 8000ffe:	b5e0      	push	{r5, r6, r7, lr}
 8001000:	4698      	mov	r8, r3
 8001002:	030c      	lsls	r4, r1, #12
 8001004:	004b      	lsls	r3, r1, #1
 8001006:	0006      	movs	r6, r0
 8001008:	4692      	mov	sl, r2
 800100a:	b087      	sub	sp, #28
 800100c:	0b24      	lsrs	r4, r4, #12
 800100e:	0d5b      	lsrs	r3, r3, #21
 8001010:	0fcf      	lsrs	r7, r1, #31
 8001012:	2b00      	cmp	r3, #0
 8001014:	d06c      	beq.n	80010f0 <__aeabi_dmul+0xfc>
 8001016:	4add      	ldr	r2, [pc, #884]	; (800138c <__aeabi_dmul+0x398>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d100      	bne.n	800101e <__aeabi_dmul+0x2a>
 800101c:	e086      	b.n	800112c <__aeabi_dmul+0x138>
 800101e:	0f42      	lsrs	r2, r0, #29
 8001020:	00e4      	lsls	r4, r4, #3
 8001022:	4314      	orrs	r4, r2
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	4314      	orrs	r4, r2
 800102a:	4ad9      	ldr	r2, [pc, #868]	; (8001390 <__aeabi_dmul+0x39c>)
 800102c:	00c5      	lsls	r5, r0, #3
 800102e:	4694      	mov	ip, r2
 8001030:	4463      	add	r3, ip
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2300      	movs	r3, #0
 8001036:	4699      	mov	r9, r3
 8001038:	469b      	mov	fp, r3
 800103a:	4643      	mov	r3, r8
 800103c:	4642      	mov	r2, r8
 800103e:	031e      	lsls	r6, r3, #12
 8001040:	0fd2      	lsrs	r2, r2, #31
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4650      	mov	r0, sl
 8001046:	4690      	mov	r8, r2
 8001048:	0b36      	lsrs	r6, r6, #12
 800104a:	0d5b      	lsrs	r3, r3, #21
 800104c:	d100      	bne.n	8001050 <__aeabi_dmul+0x5c>
 800104e:	e078      	b.n	8001142 <__aeabi_dmul+0x14e>
 8001050:	4ace      	ldr	r2, [pc, #824]	; (800138c <__aeabi_dmul+0x398>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01d      	beq.n	8001092 <__aeabi_dmul+0x9e>
 8001056:	49ce      	ldr	r1, [pc, #824]	; (8001390 <__aeabi_dmul+0x39c>)
 8001058:	0f42      	lsrs	r2, r0, #29
 800105a:	468c      	mov	ip, r1
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	4463      	add	r3, ip
 8001060:	00f6      	lsls	r6, r6, #3
 8001062:	468c      	mov	ip, r1
 8001064:	4316      	orrs	r6, r2
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	449c      	add	ip, r3
 800106a:	0412      	lsls	r2, r2, #16
 800106c:	4663      	mov	r3, ip
 800106e:	4316      	orrs	r6, r2
 8001070:	00c2      	lsls	r2, r0, #3
 8001072:	2000      	movs	r0, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	9900      	ldr	r1, [sp, #0]
 8001078:	4643      	mov	r3, r8
 800107a:	3101      	adds	r1, #1
 800107c:	468c      	mov	ip, r1
 800107e:	4649      	mov	r1, r9
 8001080:	407b      	eors	r3, r7
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	290f      	cmp	r1, #15
 8001086:	d900      	bls.n	800108a <__aeabi_dmul+0x96>
 8001088:	e07e      	b.n	8001188 <__aeabi_dmul+0x194>
 800108a:	4bc2      	ldr	r3, [pc, #776]	; (8001394 <__aeabi_dmul+0x3a0>)
 800108c:	0089      	lsls	r1, r1, #2
 800108e:	5859      	ldr	r1, [r3, r1]
 8001090:	468f      	mov	pc, r1
 8001092:	4652      	mov	r2, sl
 8001094:	9b00      	ldr	r3, [sp, #0]
 8001096:	4332      	orrs	r2, r6
 8001098:	d000      	beq.n	800109c <__aeabi_dmul+0xa8>
 800109a:	e156      	b.n	800134a <__aeabi_dmul+0x356>
 800109c:	49bb      	ldr	r1, [pc, #748]	; (800138c <__aeabi_dmul+0x398>)
 800109e:	2600      	movs	r6, #0
 80010a0:	468c      	mov	ip, r1
 80010a2:	4463      	add	r3, ip
 80010a4:	4649      	mov	r1, r9
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	4319      	orrs	r1, r3
 80010ac:	4689      	mov	r9, r1
 80010ae:	2002      	movs	r0, #2
 80010b0:	e7e1      	b.n	8001076 <__aeabi_dmul+0x82>
 80010b2:	4643      	mov	r3, r8
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	0034      	movs	r4, r6
 80010b8:	0015      	movs	r5, r2
 80010ba:	4683      	mov	fp, r0
 80010bc:	465b      	mov	r3, fp
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d05e      	beq.n	8001180 <__aeabi_dmul+0x18c>
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dmul+0xd4>
 80010c6:	e1f3      	b.n	80014b0 <__aeabi_dmul+0x4bc>
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d000      	beq.n	80010ce <__aeabi_dmul+0xda>
 80010cc:	e118      	b.n	8001300 <__aeabi_dmul+0x30c>
 80010ce:	2200      	movs	r2, #0
 80010d0:	2400      	movs	r4, #0
 80010d2:	2500      	movs	r5, #0
 80010d4:	9b01      	ldr	r3, [sp, #4]
 80010d6:	0512      	lsls	r2, r2, #20
 80010d8:	4322      	orrs	r2, r4
 80010da:	07db      	lsls	r3, r3, #31
 80010dc:	431a      	orrs	r2, r3
 80010de:	0028      	movs	r0, r5
 80010e0:	0011      	movs	r1, r2
 80010e2:	b007      	add	sp, #28
 80010e4:	bcf0      	pop	{r4, r5, r6, r7}
 80010e6:	46bb      	mov	fp, r7
 80010e8:	46b2      	mov	sl, r6
 80010ea:	46a9      	mov	r9, r5
 80010ec:	46a0      	mov	r8, r4
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	0025      	movs	r5, r4
 80010f2:	4305      	orrs	r5, r0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dmul+0x104>
 80010f6:	e141      	b.n	800137c <__aeabi_dmul+0x388>
 80010f8:	2c00      	cmp	r4, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_dmul+0x10a>
 80010fc:	e1ad      	b.n	800145a <__aeabi_dmul+0x466>
 80010fe:	0020      	movs	r0, r4
 8001100:	f000 fafc 	bl	80016fc <__clzsi2>
 8001104:	0001      	movs	r1, r0
 8001106:	0002      	movs	r2, r0
 8001108:	390b      	subs	r1, #11
 800110a:	231d      	movs	r3, #29
 800110c:	0010      	movs	r0, r2
 800110e:	1a5b      	subs	r3, r3, r1
 8001110:	0031      	movs	r1, r6
 8001112:	0035      	movs	r5, r6
 8001114:	3808      	subs	r0, #8
 8001116:	4084      	lsls	r4, r0
 8001118:	40d9      	lsrs	r1, r3
 800111a:	4085      	lsls	r5, r0
 800111c:	430c      	orrs	r4, r1
 800111e:	489e      	ldr	r0, [pc, #632]	; (8001398 <__aeabi_dmul+0x3a4>)
 8001120:	1a83      	subs	r3, r0, r2
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	4699      	mov	r9, r3
 8001128:	469b      	mov	fp, r3
 800112a:	e786      	b.n	800103a <__aeabi_dmul+0x46>
 800112c:	0005      	movs	r5, r0
 800112e:	4325      	orrs	r5, r4
 8001130:	d000      	beq.n	8001134 <__aeabi_dmul+0x140>
 8001132:	e11c      	b.n	800136e <__aeabi_dmul+0x37a>
 8001134:	2208      	movs	r2, #8
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2302      	movs	r3, #2
 800113a:	2400      	movs	r4, #0
 800113c:	4691      	mov	r9, r2
 800113e:	469b      	mov	fp, r3
 8001140:	e77b      	b.n	800103a <__aeabi_dmul+0x46>
 8001142:	4652      	mov	r2, sl
 8001144:	4332      	orrs	r2, r6
 8001146:	d100      	bne.n	800114a <__aeabi_dmul+0x156>
 8001148:	e10a      	b.n	8001360 <__aeabi_dmul+0x36c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_dmul+0x15c>
 800114e:	e176      	b.n	800143e <__aeabi_dmul+0x44a>
 8001150:	0030      	movs	r0, r6
 8001152:	f000 fad3 	bl	80016fc <__clzsi2>
 8001156:	0002      	movs	r2, r0
 8001158:	3a0b      	subs	r2, #11
 800115a:	231d      	movs	r3, #29
 800115c:	0001      	movs	r1, r0
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	4652      	mov	r2, sl
 8001162:	3908      	subs	r1, #8
 8001164:	40da      	lsrs	r2, r3
 8001166:	408e      	lsls	r6, r1
 8001168:	4316      	orrs	r6, r2
 800116a:	4652      	mov	r2, sl
 800116c:	408a      	lsls	r2, r1
 800116e:	9b00      	ldr	r3, [sp, #0]
 8001170:	4989      	ldr	r1, [pc, #548]	; (8001398 <__aeabi_dmul+0x3a4>)
 8001172:	1a18      	subs	r0, r3, r0
 8001174:	0003      	movs	r3, r0
 8001176:	468c      	mov	ip, r1
 8001178:	4463      	add	r3, ip
 800117a:	2000      	movs	r0, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	e77a      	b.n	8001076 <__aeabi_dmul+0x82>
 8001180:	2400      	movs	r4, #0
 8001182:	2500      	movs	r5, #0
 8001184:	4a81      	ldr	r2, [pc, #516]	; (800138c <__aeabi_dmul+0x398>)
 8001186:	e7a5      	b.n	80010d4 <__aeabi_dmul+0xe0>
 8001188:	0c2f      	lsrs	r7, r5, #16
 800118a:	042d      	lsls	r5, r5, #16
 800118c:	0c2d      	lsrs	r5, r5, #16
 800118e:	002b      	movs	r3, r5
 8001190:	0c11      	lsrs	r1, r2, #16
 8001192:	0412      	lsls	r2, r2, #16
 8001194:	0c12      	lsrs	r2, r2, #16
 8001196:	4353      	muls	r3, r2
 8001198:	4698      	mov	r8, r3
 800119a:	0013      	movs	r3, r2
 800119c:	0028      	movs	r0, r5
 800119e:	437b      	muls	r3, r7
 80011a0:	4699      	mov	r9, r3
 80011a2:	4348      	muls	r0, r1
 80011a4:	4448      	add	r0, r9
 80011a6:	4683      	mov	fp, r0
 80011a8:	4640      	mov	r0, r8
 80011aa:	000b      	movs	r3, r1
 80011ac:	0c00      	lsrs	r0, r0, #16
 80011ae:	4682      	mov	sl, r0
 80011b0:	4658      	mov	r0, fp
 80011b2:	437b      	muls	r3, r7
 80011b4:	4450      	add	r0, sl
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	4581      	cmp	r9, r0
 80011ba:	d906      	bls.n	80011ca <__aeabi_dmul+0x1d6>
 80011bc:	469a      	mov	sl, r3
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	025b      	lsls	r3, r3, #9
 80011c2:	4699      	mov	r9, r3
 80011c4:	44ca      	add	sl, r9
 80011c6:	4653      	mov	r3, sl
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	0c03      	lsrs	r3, r0, #16
 80011cc:	469b      	mov	fp, r3
 80011ce:	4643      	mov	r3, r8
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	0400      	lsls	r0, r0, #16
 80011d4:	0c1b      	lsrs	r3, r3, #16
 80011d6:	4698      	mov	r8, r3
 80011d8:	0003      	movs	r3, r0
 80011da:	4443      	add	r3, r8
 80011dc:	9304      	str	r3, [sp, #16]
 80011de:	0c33      	lsrs	r3, r6, #16
 80011e0:	4699      	mov	r9, r3
 80011e2:	002b      	movs	r3, r5
 80011e4:	0436      	lsls	r6, r6, #16
 80011e6:	0c36      	lsrs	r6, r6, #16
 80011e8:	4373      	muls	r3, r6
 80011ea:	4698      	mov	r8, r3
 80011ec:	0033      	movs	r3, r6
 80011ee:	437b      	muls	r3, r7
 80011f0:	469a      	mov	sl, r3
 80011f2:	464b      	mov	r3, r9
 80011f4:	435d      	muls	r5, r3
 80011f6:	435f      	muls	r7, r3
 80011f8:	4643      	mov	r3, r8
 80011fa:	4455      	add	r5, sl
 80011fc:	0c18      	lsrs	r0, r3, #16
 80011fe:	1940      	adds	r0, r0, r5
 8001200:	4582      	cmp	sl, r0
 8001202:	d903      	bls.n	800120c <__aeabi_dmul+0x218>
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	025b      	lsls	r3, r3, #9
 8001208:	469a      	mov	sl, r3
 800120a:	4457      	add	r7, sl
 800120c:	0c05      	lsrs	r5, r0, #16
 800120e:	19eb      	adds	r3, r5, r7
 8001210:	9305      	str	r3, [sp, #20]
 8001212:	4643      	mov	r3, r8
 8001214:	041d      	lsls	r5, r3, #16
 8001216:	0c2d      	lsrs	r5, r5, #16
 8001218:	0400      	lsls	r0, r0, #16
 800121a:	1940      	adds	r0, r0, r5
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	0424      	lsls	r4, r4, #16
 8001220:	0c24      	lsrs	r4, r4, #16
 8001222:	0027      	movs	r7, r4
 8001224:	4357      	muls	r7, r2
 8001226:	436a      	muls	r2, r5
 8001228:	4690      	mov	r8, r2
 800122a:	002a      	movs	r2, r5
 800122c:	0c3b      	lsrs	r3, r7, #16
 800122e:	469a      	mov	sl, r3
 8001230:	434a      	muls	r2, r1
 8001232:	4361      	muls	r1, r4
 8001234:	4441      	add	r1, r8
 8001236:	4451      	add	r1, sl
 8001238:	4483      	add	fp, r0
 800123a:	4588      	cmp	r8, r1
 800123c:	d903      	bls.n	8001246 <__aeabi_dmul+0x252>
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4698      	mov	r8, r3
 8001244:	4442      	add	r2, r8
 8001246:	043f      	lsls	r7, r7, #16
 8001248:	0c0b      	lsrs	r3, r1, #16
 800124a:	0c3f      	lsrs	r7, r7, #16
 800124c:	0409      	lsls	r1, r1, #16
 800124e:	19c9      	adds	r1, r1, r7
 8001250:	0027      	movs	r7, r4
 8001252:	4698      	mov	r8, r3
 8001254:	464b      	mov	r3, r9
 8001256:	4377      	muls	r7, r6
 8001258:	435c      	muls	r4, r3
 800125a:	436e      	muls	r6, r5
 800125c:	435d      	muls	r5, r3
 800125e:	0c3b      	lsrs	r3, r7, #16
 8001260:	4699      	mov	r9, r3
 8001262:	19a4      	adds	r4, r4, r6
 8001264:	444c      	add	r4, r9
 8001266:	4442      	add	r2, r8
 8001268:	9503      	str	r5, [sp, #12]
 800126a:	42a6      	cmp	r6, r4
 800126c:	d904      	bls.n	8001278 <__aeabi_dmul+0x284>
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	4698      	mov	r8, r3
 8001274:	4445      	add	r5, r8
 8001276:	9503      	str	r5, [sp, #12]
 8001278:	9b02      	ldr	r3, [sp, #8]
 800127a:	043f      	lsls	r7, r7, #16
 800127c:	445b      	add	r3, fp
 800127e:	001e      	movs	r6, r3
 8001280:	4283      	cmp	r3, r0
 8001282:	4180      	sbcs	r0, r0
 8001284:	0423      	lsls	r3, r4, #16
 8001286:	4698      	mov	r8, r3
 8001288:	9b05      	ldr	r3, [sp, #20]
 800128a:	0c3f      	lsrs	r7, r7, #16
 800128c:	4447      	add	r7, r8
 800128e:	4698      	mov	r8, r3
 8001290:	1876      	adds	r6, r6, r1
 8001292:	428e      	cmp	r6, r1
 8001294:	4189      	sbcs	r1, r1
 8001296:	4447      	add	r7, r8
 8001298:	4240      	negs	r0, r0
 800129a:	183d      	adds	r5, r7, r0
 800129c:	46a8      	mov	r8, r5
 800129e:	4693      	mov	fp, r2
 80012a0:	4249      	negs	r1, r1
 80012a2:	468a      	mov	sl, r1
 80012a4:	44c3      	add	fp, r8
 80012a6:	429f      	cmp	r7, r3
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	4580      	cmp	r8, r0
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	9b03      	ldr	r3, [sp, #12]
 80012b0:	44da      	add	sl, fp
 80012b2:	4698      	mov	r8, r3
 80012b4:	4653      	mov	r3, sl
 80012b6:	4240      	negs	r0, r0
 80012b8:	427f      	negs	r7, r7
 80012ba:	4307      	orrs	r7, r0
 80012bc:	0c24      	lsrs	r4, r4, #16
 80012be:	4593      	cmp	fp, r2
 80012c0:	4192      	sbcs	r2, r2
 80012c2:	458a      	cmp	sl, r1
 80012c4:	4189      	sbcs	r1, r1
 80012c6:	193f      	adds	r7, r7, r4
 80012c8:	0ddc      	lsrs	r4, r3, #23
 80012ca:	9b04      	ldr	r3, [sp, #16]
 80012cc:	0275      	lsls	r5, r6, #9
 80012ce:	431d      	orrs	r5, r3
 80012d0:	1e68      	subs	r0, r5, #1
 80012d2:	4185      	sbcs	r5, r0
 80012d4:	4653      	mov	r3, sl
 80012d6:	4252      	negs	r2, r2
 80012d8:	4249      	negs	r1, r1
 80012da:	430a      	orrs	r2, r1
 80012dc:	18bf      	adds	r7, r7, r2
 80012de:	4447      	add	r7, r8
 80012e0:	0df6      	lsrs	r6, r6, #23
 80012e2:	027f      	lsls	r7, r7, #9
 80012e4:	4335      	orrs	r5, r6
 80012e6:	025a      	lsls	r2, r3, #9
 80012e8:	433c      	orrs	r4, r7
 80012ea:	4315      	orrs	r5, r2
 80012ec:	01fb      	lsls	r3, r7, #7
 80012ee:	d400      	bmi.n	80012f2 <__aeabi_dmul+0x2fe>
 80012f0:	e0c1      	b.n	8001476 <__aeabi_dmul+0x482>
 80012f2:	2101      	movs	r1, #1
 80012f4:	086a      	lsrs	r2, r5, #1
 80012f6:	400d      	ands	r5, r1
 80012f8:	4315      	orrs	r5, r2
 80012fa:	07e2      	lsls	r2, r4, #31
 80012fc:	4315      	orrs	r5, r2
 80012fe:	0864      	lsrs	r4, r4, #1
 8001300:	4926      	ldr	r1, [pc, #152]	; (800139c <__aeabi_dmul+0x3a8>)
 8001302:	4461      	add	r1, ip
 8001304:	2900      	cmp	r1, #0
 8001306:	dd56      	ble.n	80013b6 <__aeabi_dmul+0x3c2>
 8001308:	076b      	lsls	r3, r5, #29
 800130a:	d009      	beq.n	8001320 <__aeabi_dmul+0x32c>
 800130c:	220f      	movs	r2, #15
 800130e:	402a      	ands	r2, r5
 8001310:	2a04      	cmp	r2, #4
 8001312:	d005      	beq.n	8001320 <__aeabi_dmul+0x32c>
 8001314:	1d2a      	adds	r2, r5, #4
 8001316:	42aa      	cmp	r2, r5
 8001318:	41ad      	sbcs	r5, r5
 800131a:	426d      	negs	r5, r5
 800131c:	1964      	adds	r4, r4, r5
 800131e:	0015      	movs	r5, r2
 8001320:	01e3      	lsls	r3, r4, #7
 8001322:	d504      	bpl.n	800132e <__aeabi_dmul+0x33a>
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <__aeabi_dmul+0x3ac>)
 8001328:	00c9      	lsls	r1, r1, #3
 800132a:	4014      	ands	r4, r2
 800132c:	4461      	add	r1, ip
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <__aeabi_dmul+0x3b0>)
 8001330:	4291      	cmp	r1, r2
 8001332:	dd00      	ble.n	8001336 <__aeabi_dmul+0x342>
 8001334:	e724      	b.n	8001180 <__aeabi_dmul+0x18c>
 8001336:	0762      	lsls	r2, r4, #29
 8001338:	08ed      	lsrs	r5, r5, #3
 800133a:	0264      	lsls	r4, r4, #9
 800133c:	0549      	lsls	r1, r1, #21
 800133e:	4315      	orrs	r5, r2
 8001340:	0b24      	lsrs	r4, r4, #12
 8001342:	0d4a      	lsrs	r2, r1, #21
 8001344:	e6c6      	b.n	80010d4 <__aeabi_dmul+0xe0>
 8001346:	9701      	str	r7, [sp, #4]
 8001348:	e6b8      	b.n	80010bc <__aeabi_dmul+0xc8>
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <__aeabi_dmul+0x398>)
 800134c:	2003      	movs	r0, #3
 800134e:	4694      	mov	ip, r2
 8001350:	4463      	add	r3, ip
 8001352:	464a      	mov	r2, r9
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2303      	movs	r3, #3
 8001358:	431a      	orrs	r2, r3
 800135a:	4691      	mov	r9, r2
 800135c:	4652      	mov	r2, sl
 800135e:	e68a      	b.n	8001076 <__aeabi_dmul+0x82>
 8001360:	4649      	mov	r1, r9
 8001362:	2301      	movs	r3, #1
 8001364:	4319      	orrs	r1, r3
 8001366:	4689      	mov	r9, r1
 8001368:	2600      	movs	r6, #0
 800136a:	2001      	movs	r0, #1
 800136c:	e683      	b.n	8001076 <__aeabi_dmul+0x82>
 800136e:	220c      	movs	r2, #12
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2303      	movs	r3, #3
 8001374:	0005      	movs	r5, r0
 8001376:	4691      	mov	r9, r2
 8001378:	469b      	mov	fp, r3
 800137a:	e65e      	b.n	800103a <__aeabi_dmul+0x46>
 800137c:	2304      	movs	r3, #4
 800137e:	4699      	mov	r9, r3
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	2400      	movs	r4, #0
 8001388:	469b      	mov	fp, r3
 800138a:	e656      	b.n	800103a <__aeabi_dmul+0x46>
 800138c:	000007ff 	.word	0x000007ff
 8001390:	fffffc01 	.word	0xfffffc01
 8001394:	08007548 	.word	0x08007548
 8001398:	fffffc0d 	.word	0xfffffc0d
 800139c:	000003ff 	.word	0x000003ff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	000007fe 	.word	0x000007fe
 80013a8:	2300      	movs	r3, #0
 80013aa:	2480      	movs	r4, #128	; 0x80
 80013ac:	2500      	movs	r5, #0
 80013ae:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <__aeabi_dmul+0x4cc>)
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	0324      	lsls	r4, r4, #12
 80013b4:	e68e      	b.n	80010d4 <__aeabi_dmul+0xe0>
 80013b6:	2001      	movs	r0, #1
 80013b8:	1a40      	subs	r0, r0, r1
 80013ba:	2838      	cmp	r0, #56	; 0x38
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dmul+0x3cc>
 80013be:	e686      	b.n	80010ce <__aeabi_dmul+0xda>
 80013c0:	281f      	cmp	r0, #31
 80013c2:	dd5b      	ble.n	800147c <__aeabi_dmul+0x488>
 80013c4:	221f      	movs	r2, #31
 80013c6:	0023      	movs	r3, r4
 80013c8:	4252      	negs	r2, r2
 80013ca:	1a51      	subs	r1, r2, r1
 80013cc:	40cb      	lsrs	r3, r1
 80013ce:	0019      	movs	r1, r3
 80013d0:	2820      	cmp	r0, #32
 80013d2:	d003      	beq.n	80013dc <__aeabi_dmul+0x3e8>
 80013d4:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <__aeabi_dmul+0x4d0>)
 80013d6:	4462      	add	r2, ip
 80013d8:	4094      	lsls	r4, r2
 80013da:	4325      	orrs	r5, r4
 80013dc:	1e6a      	subs	r2, r5, #1
 80013de:	4195      	sbcs	r5, r2
 80013e0:	002a      	movs	r2, r5
 80013e2:	430a      	orrs	r2, r1
 80013e4:	2107      	movs	r1, #7
 80013e6:	000d      	movs	r5, r1
 80013e8:	2400      	movs	r4, #0
 80013ea:	4015      	ands	r5, r2
 80013ec:	4211      	tst	r1, r2
 80013ee:	d05b      	beq.n	80014a8 <__aeabi_dmul+0x4b4>
 80013f0:	210f      	movs	r1, #15
 80013f2:	2400      	movs	r4, #0
 80013f4:	4011      	ands	r1, r2
 80013f6:	2904      	cmp	r1, #4
 80013f8:	d053      	beq.n	80014a2 <__aeabi_dmul+0x4ae>
 80013fa:	1d11      	adds	r1, r2, #4
 80013fc:	4291      	cmp	r1, r2
 80013fe:	4192      	sbcs	r2, r2
 8001400:	4252      	negs	r2, r2
 8001402:	18a4      	adds	r4, r4, r2
 8001404:	000a      	movs	r2, r1
 8001406:	0223      	lsls	r3, r4, #8
 8001408:	d54b      	bpl.n	80014a2 <__aeabi_dmul+0x4ae>
 800140a:	2201      	movs	r2, #1
 800140c:	2400      	movs	r4, #0
 800140e:	2500      	movs	r5, #0
 8001410:	e660      	b.n	80010d4 <__aeabi_dmul+0xe0>
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	031b      	lsls	r3, r3, #12
 8001416:	421c      	tst	r4, r3
 8001418:	d009      	beq.n	800142e <__aeabi_dmul+0x43a>
 800141a:	421e      	tst	r6, r3
 800141c:	d107      	bne.n	800142e <__aeabi_dmul+0x43a>
 800141e:	4333      	orrs	r3, r6
 8001420:	031c      	lsls	r4, r3, #12
 8001422:	4643      	mov	r3, r8
 8001424:	0015      	movs	r5, r2
 8001426:	0b24      	lsrs	r4, r4, #12
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <__aeabi_dmul+0x4cc>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	e652      	b.n	80010d4 <__aeabi_dmul+0xe0>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	0312      	lsls	r2, r2, #12
 8001432:	4314      	orrs	r4, r2
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <__aeabi_dmul+0x4cc>)
 8001438:	0b24      	lsrs	r4, r4, #12
 800143a:	9701      	str	r7, [sp, #4]
 800143c:	e64a      	b.n	80010d4 <__aeabi_dmul+0xe0>
 800143e:	f000 f95d 	bl	80016fc <__clzsi2>
 8001442:	0003      	movs	r3, r0
 8001444:	001a      	movs	r2, r3
 8001446:	3215      	adds	r2, #21
 8001448:	3020      	adds	r0, #32
 800144a:	2a1c      	cmp	r2, #28
 800144c:	dc00      	bgt.n	8001450 <__aeabi_dmul+0x45c>
 800144e:	e684      	b.n	800115a <__aeabi_dmul+0x166>
 8001450:	4656      	mov	r6, sl
 8001452:	3b08      	subs	r3, #8
 8001454:	2200      	movs	r2, #0
 8001456:	409e      	lsls	r6, r3
 8001458:	e689      	b.n	800116e <__aeabi_dmul+0x17a>
 800145a:	f000 f94f 	bl	80016fc <__clzsi2>
 800145e:	0001      	movs	r1, r0
 8001460:	0002      	movs	r2, r0
 8001462:	3115      	adds	r1, #21
 8001464:	3220      	adds	r2, #32
 8001466:	291c      	cmp	r1, #28
 8001468:	dc00      	bgt.n	800146c <__aeabi_dmul+0x478>
 800146a:	e64e      	b.n	800110a <__aeabi_dmul+0x116>
 800146c:	0034      	movs	r4, r6
 800146e:	3808      	subs	r0, #8
 8001470:	2500      	movs	r5, #0
 8001472:	4084      	lsls	r4, r0
 8001474:	e653      	b.n	800111e <__aeabi_dmul+0x12a>
 8001476:	9b00      	ldr	r3, [sp, #0]
 8001478:	469c      	mov	ip, r3
 800147a:	e741      	b.n	8001300 <__aeabi_dmul+0x30c>
 800147c:	4912      	ldr	r1, [pc, #72]	; (80014c8 <__aeabi_dmul+0x4d4>)
 800147e:	0022      	movs	r2, r4
 8001480:	4461      	add	r1, ip
 8001482:	002e      	movs	r6, r5
 8001484:	408d      	lsls	r5, r1
 8001486:	408a      	lsls	r2, r1
 8001488:	40c6      	lsrs	r6, r0
 800148a:	1e69      	subs	r1, r5, #1
 800148c:	418d      	sbcs	r5, r1
 800148e:	4332      	orrs	r2, r6
 8001490:	432a      	orrs	r2, r5
 8001492:	40c4      	lsrs	r4, r0
 8001494:	0753      	lsls	r3, r2, #29
 8001496:	d0b6      	beq.n	8001406 <__aeabi_dmul+0x412>
 8001498:	210f      	movs	r1, #15
 800149a:	4011      	ands	r1, r2
 800149c:	2904      	cmp	r1, #4
 800149e:	d1ac      	bne.n	80013fa <__aeabi_dmul+0x406>
 80014a0:	e7b1      	b.n	8001406 <__aeabi_dmul+0x412>
 80014a2:	0765      	lsls	r5, r4, #29
 80014a4:	0264      	lsls	r4, r4, #9
 80014a6:	0b24      	lsrs	r4, r4, #12
 80014a8:	08d2      	lsrs	r2, r2, #3
 80014aa:	4315      	orrs	r5, r2
 80014ac:	2200      	movs	r2, #0
 80014ae:	e611      	b.n	80010d4 <__aeabi_dmul+0xe0>
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0312      	lsls	r2, r2, #12
 80014b4:	4314      	orrs	r4, r2
 80014b6:	0324      	lsls	r4, r4, #12
 80014b8:	4a01      	ldr	r2, [pc, #4]	; (80014c0 <__aeabi_dmul+0x4cc>)
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	e60a      	b.n	80010d4 <__aeabi_dmul+0xe0>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	000007ff 	.word	0x000007ff
 80014c4:	0000043e 	.word	0x0000043e
 80014c8:	0000041e 	.word	0x0000041e

080014cc <__aeabi_i2d>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d016      	beq.n	8001500 <__aeabi_i2d+0x34>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f000 f90e 	bl	80016fc <__clzsi2>
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <__aeabi_i2d+0x5c>)
 80014e2:	1a12      	subs	r2, r2, r0
 80014e4:	280a      	cmp	r0, #10
 80014e6:	dc16      	bgt.n	8001516 <__aeabi_i2d+0x4a>
 80014e8:	0003      	movs	r3, r0
 80014ea:	002e      	movs	r6, r5
 80014ec:	3315      	adds	r3, #21
 80014ee:	409e      	lsls	r6, r3
 80014f0:	230b      	movs	r3, #11
 80014f2:	1a18      	subs	r0, r3, r0
 80014f4:	40c5      	lsrs	r5, r0
 80014f6:	0553      	lsls	r3, r2, #21
 80014f8:	032d      	lsls	r5, r5, #12
 80014fa:	0b2d      	lsrs	r5, r5, #12
 80014fc:	0d5b      	lsrs	r3, r3, #21
 80014fe:	e003      	b.n	8001508 <__aeabi_i2d+0x3c>
 8001500:	2400      	movs	r4, #0
 8001502:	2300      	movs	r3, #0
 8001504:	2500      	movs	r5, #0
 8001506:	2600      	movs	r6, #0
 8001508:	051b      	lsls	r3, r3, #20
 800150a:	432b      	orrs	r3, r5
 800150c:	07e4      	lsls	r4, r4, #31
 800150e:	4323      	orrs	r3, r4
 8001510:	0030      	movs	r0, r6
 8001512:	0019      	movs	r1, r3
 8001514:	bd70      	pop	{r4, r5, r6, pc}
 8001516:	380b      	subs	r0, #11
 8001518:	4085      	lsls	r5, r0
 800151a:	0553      	lsls	r3, r2, #21
 800151c:	032d      	lsls	r5, r5, #12
 800151e:	2600      	movs	r6, #0
 8001520:	0b2d      	lsrs	r5, r5, #12
 8001522:	0d5b      	lsrs	r3, r3, #21
 8001524:	e7f0      	b.n	8001508 <__aeabi_i2d+0x3c>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	0000041e 	.word	0x0000041e

0800152c <__aeabi_ui2d>:
 800152c:	b510      	push	{r4, lr}
 800152e:	1e04      	subs	r4, r0, #0
 8001530:	d010      	beq.n	8001554 <__aeabi_ui2d+0x28>
 8001532:	f000 f8e3 	bl	80016fc <__clzsi2>
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <__aeabi_ui2d+0x48>)
 8001538:	1a1b      	subs	r3, r3, r0
 800153a:	280a      	cmp	r0, #10
 800153c:	dc11      	bgt.n	8001562 <__aeabi_ui2d+0x36>
 800153e:	220b      	movs	r2, #11
 8001540:	0021      	movs	r1, r4
 8001542:	1a12      	subs	r2, r2, r0
 8001544:	40d1      	lsrs	r1, r2
 8001546:	3015      	adds	r0, #21
 8001548:	030a      	lsls	r2, r1, #12
 800154a:	055b      	lsls	r3, r3, #21
 800154c:	4084      	lsls	r4, r0
 800154e:	0b12      	lsrs	r2, r2, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	e001      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	051b      	lsls	r3, r3, #20
 800155a:	4313      	orrs	r3, r2
 800155c:	0020      	movs	r0, r4
 800155e:	0019      	movs	r1, r3
 8001560:	bd10      	pop	{r4, pc}
 8001562:	0022      	movs	r2, r4
 8001564:	380b      	subs	r0, #11
 8001566:	4082      	lsls	r2, r0
 8001568:	055b      	lsls	r3, r3, #21
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	2400      	movs	r4, #0
 800156e:	0b12      	lsrs	r2, r2, #12
 8001570:	0d5b      	lsrs	r3, r3, #21
 8001572:	e7f1      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001574:	0000041e 	.word	0x0000041e

08001578 <__aeabi_d2f>:
 8001578:	0002      	movs	r2, r0
 800157a:	004b      	lsls	r3, r1, #1
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	0308      	lsls	r0, r1, #12
 8001580:	0d5b      	lsrs	r3, r3, #21
 8001582:	4e3d      	ldr	r6, [pc, #244]	; (8001678 <__aeabi_d2f+0x100>)
 8001584:	0fcc      	lsrs	r4, r1, #31
 8001586:	0a40      	lsrs	r0, r0, #9
 8001588:	0f51      	lsrs	r1, r2, #29
 800158a:	1c5f      	adds	r7, r3, #1
 800158c:	4308      	orrs	r0, r1
 800158e:	00d5      	lsls	r5, r2, #3
 8001590:	4237      	tst	r7, r6
 8001592:	d00a      	beq.n	80015aa <__aeabi_d2f+0x32>
 8001594:	4939      	ldr	r1, [pc, #228]	; (800167c <__aeabi_d2f+0x104>)
 8001596:	185e      	adds	r6, r3, r1
 8001598:	2efe      	cmp	r6, #254	; 0xfe
 800159a:	dd16      	ble.n	80015ca <__aeabi_d2f+0x52>
 800159c:	23ff      	movs	r3, #255	; 0xff
 800159e:	2100      	movs	r1, #0
 80015a0:	05db      	lsls	r3, r3, #23
 80015a2:	430b      	orrs	r3, r1
 80015a4:	07e0      	lsls	r0, r4, #31
 80015a6:	4318      	orrs	r0, r3
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <__aeabi_d2f+0x44>
 80015ae:	4328      	orrs	r0, r5
 80015b0:	d027      	beq.n	8001602 <__aeabi_d2f+0x8a>
 80015b2:	2105      	movs	r1, #5
 80015b4:	0189      	lsls	r1, r1, #6
 80015b6:	0a49      	lsrs	r1, r1, #9
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e7f1      	b.n	80015a0 <__aeabi_d2f+0x28>
 80015bc:	4305      	orrs	r5, r0
 80015be:	d0ed      	beq.n	800159c <__aeabi_d2f+0x24>
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	03c9      	lsls	r1, r1, #15
 80015c4:	23ff      	movs	r3, #255	; 0xff
 80015c6:	4301      	orrs	r1, r0
 80015c8:	e7ea      	b.n	80015a0 <__aeabi_d2f+0x28>
 80015ca:	2e00      	cmp	r6, #0
 80015cc:	dd1c      	ble.n	8001608 <__aeabi_d2f+0x90>
 80015ce:	0192      	lsls	r2, r2, #6
 80015d0:	0011      	movs	r1, r2
 80015d2:	1e4a      	subs	r2, r1, #1
 80015d4:	4191      	sbcs	r1, r2
 80015d6:	00c0      	lsls	r0, r0, #3
 80015d8:	0f6d      	lsrs	r5, r5, #29
 80015da:	4301      	orrs	r1, r0
 80015dc:	4329      	orrs	r1, r5
 80015de:	074b      	lsls	r3, r1, #29
 80015e0:	d048      	beq.n	8001674 <__aeabi_d2f+0xfc>
 80015e2:	230f      	movs	r3, #15
 80015e4:	400b      	ands	r3, r1
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d000      	beq.n	80015ec <__aeabi_d2f+0x74>
 80015ea:	3104      	adds	r1, #4
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	04db      	lsls	r3, r3, #19
 80015f0:	400b      	ands	r3, r1
 80015f2:	d03f      	beq.n	8001674 <__aeabi_d2f+0xfc>
 80015f4:	1c72      	adds	r2, r6, #1
 80015f6:	2efe      	cmp	r6, #254	; 0xfe
 80015f8:	d0d0      	beq.n	800159c <__aeabi_d2f+0x24>
 80015fa:	0189      	lsls	r1, r1, #6
 80015fc:	0a49      	lsrs	r1, r1, #9
 80015fe:	b2d3      	uxtb	r3, r2
 8001600:	e7ce      	b.n	80015a0 <__aeabi_d2f+0x28>
 8001602:	2300      	movs	r3, #0
 8001604:	2100      	movs	r1, #0
 8001606:	e7cb      	b.n	80015a0 <__aeabi_d2f+0x28>
 8001608:	0032      	movs	r2, r6
 800160a:	3217      	adds	r2, #23
 800160c:	db22      	blt.n	8001654 <__aeabi_d2f+0xdc>
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	221e      	movs	r2, #30
 8001612:	0409      	lsls	r1, r1, #16
 8001614:	4308      	orrs	r0, r1
 8001616:	1b92      	subs	r2, r2, r6
 8001618:	2a1f      	cmp	r2, #31
 800161a:	dd1d      	ble.n	8001658 <__aeabi_d2f+0xe0>
 800161c:	2102      	movs	r1, #2
 800161e:	4249      	negs	r1, r1
 8001620:	1b8e      	subs	r6, r1, r6
 8001622:	0001      	movs	r1, r0
 8001624:	40f1      	lsrs	r1, r6
 8001626:	000e      	movs	r6, r1
 8001628:	2a20      	cmp	r2, #32
 800162a:	d004      	beq.n	8001636 <__aeabi_d2f+0xbe>
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <__aeabi_d2f+0x108>)
 800162e:	4694      	mov	ip, r2
 8001630:	4463      	add	r3, ip
 8001632:	4098      	lsls	r0, r3
 8001634:	4305      	orrs	r5, r0
 8001636:	0029      	movs	r1, r5
 8001638:	1e4d      	subs	r5, r1, #1
 800163a:	41a9      	sbcs	r1, r5
 800163c:	4331      	orrs	r1, r6
 800163e:	2600      	movs	r6, #0
 8001640:	074b      	lsls	r3, r1, #29
 8001642:	d1ce      	bne.n	80015e2 <__aeabi_d2f+0x6a>
 8001644:	2080      	movs	r0, #128	; 0x80
 8001646:	000b      	movs	r3, r1
 8001648:	04c0      	lsls	r0, r0, #19
 800164a:	2201      	movs	r2, #1
 800164c:	4003      	ands	r3, r0
 800164e:	4201      	tst	r1, r0
 8001650:	d1d3      	bne.n	80015fa <__aeabi_d2f+0x82>
 8001652:	e7af      	b.n	80015b4 <__aeabi_d2f+0x3c>
 8001654:	2300      	movs	r3, #0
 8001656:	e7ac      	b.n	80015b2 <__aeabi_d2f+0x3a>
 8001658:	490a      	ldr	r1, [pc, #40]	; (8001684 <__aeabi_d2f+0x10c>)
 800165a:	468c      	mov	ip, r1
 800165c:	0029      	movs	r1, r5
 800165e:	4463      	add	r3, ip
 8001660:	40d1      	lsrs	r1, r2
 8001662:	409d      	lsls	r5, r3
 8001664:	000a      	movs	r2, r1
 8001666:	0029      	movs	r1, r5
 8001668:	4098      	lsls	r0, r3
 800166a:	1e4d      	subs	r5, r1, #1
 800166c:	41a9      	sbcs	r1, r5
 800166e:	4301      	orrs	r1, r0
 8001670:	4311      	orrs	r1, r2
 8001672:	e7e4      	b.n	800163e <__aeabi_d2f+0xc6>
 8001674:	0033      	movs	r3, r6
 8001676:	e79d      	b.n	80015b4 <__aeabi_d2f+0x3c>
 8001678:	000007fe 	.word	0x000007fe
 800167c:	fffffc80 	.word	0xfffffc80
 8001680:	fffffca2 	.word	0xfffffca2
 8001684:	fffffc82 	.word	0xfffffc82

08001688 <__aeabi_cfrcmple>:
 8001688:	4684      	mov	ip, r0
 800168a:	1c08      	adds	r0, r1, #0
 800168c:	4661      	mov	r1, ip
 800168e:	e7ff      	b.n	8001690 <__aeabi_cfcmpeq>

08001690 <__aeabi_cfcmpeq>:
 8001690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001692:	f000 f8c5 	bl	8001820 <__lesf2>
 8001696:	2800      	cmp	r0, #0
 8001698:	d401      	bmi.n	800169e <__aeabi_cfcmpeq+0xe>
 800169a:	2100      	movs	r1, #0
 800169c:	42c8      	cmn	r0, r1
 800169e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016a0 <__aeabi_fcmpeq>:
 80016a0:	b510      	push	{r4, lr}
 80016a2:	f000 f849 	bl	8001738 <__eqsf2>
 80016a6:	4240      	negs	r0, r0
 80016a8:	3001      	adds	r0, #1
 80016aa:	bd10      	pop	{r4, pc}

080016ac <__aeabi_fcmplt>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	f000 f8b7 	bl	8001820 <__lesf2>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	db01      	blt.n	80016ba <__aeabi_fcmplt+0xe>
 80016b6:	2000      	movs	r0, #0
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	2001      	movs	r0, #1
 80016bc:	bd10      	pop	{r4, pc}
 80016be:	46c0      	nop			; (mov r8, r8)

080016c0 <__aeabi_fcmple>:
 80016c0:	b510      	push	{r4, lr}
 80016c2:	f000 f8ad 	bl	8001820 <__lesf2>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	dd01      	ble.n	80016ce <__aeabi_fcmple+0xe>
 80016ca:	2000      	movs	r0, #0
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	2001      	movs	r0, #1
 80016d0:	bd10      	pop	{r4, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)

080016d4 <__aeabi_fcmpgt>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	f000 f857 	bl	8001788 <__gesf2>
 80016da:	2800      	cmp	r0, #0
 80016dc:	dc01      	bgt.n	80016e2 <__aeabi_fcmpgt+0xe>
 80016de:	2000      	movs	r0, #0
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	2001      	movs	r0, #1
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)

080016e8 <__aeabi_fcmpge>:
 80016e8:	b510      	push	{r4, lr}
 80016ea:	f000 f84d 	bl	8001788 <__gesf2>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	da01      	bge.n	80016f6 <__aeabi_fcmpge+0xe>
 80016f2:	2000      	movs	r0, #0
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	2001      	movs	r0, #1
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)

080016fc <__clzsi2>:
 80016fc:	211c      	movs	r1, #28
 80016fe:	2301      	movs	r3, #1
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	4298      	cmp	r0, r3
 8001704:	d301      	bcc.n	800170a <__clzsi2+0xe>
 8001706:	0c00      	lsrs	r0, r0, #16
 8001708:	3910      	subs	r1, #16
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	4298      	cmp	r0, r3
 800170e:	d301      	bcc.n	8001714 <__clzsi2+0x18>
 8001710:	0a00      	lsrs	r0, r0, #8
 8001712:	3908      	subs	r1, #8
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	4298      	cmp	r0, r3
 8001718:	d301      	bcc.n	800171e <__clzsi2+0x22>
 800171a:	0900      	lsrs	r0, r0, #4
 800171c:	3904      	subs	r1, #4
 800171e:	a202      	add	r2, pc, #8	; (adr r2, 8001728 <__clzsi2+0x2c>)
 8001720:	5c10      	ldrb	r0, [r2, r0]
 8001722:	1840      	adds	r0, r0, r1
 8001724:	4770      	bx	lr
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	02020304 	.word	0x02020304
 800172c:	01010101 	.word	0x01010101
	...

08001738 <__eqsf2>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	0042      	lsls	r2, r0, #1
 800173c:	024e      	lsls	r6, r1, #9
 800173e:	004c      	lsls	r4, r1, #1
 8001740:	0245      	lsls	r5, r0, #9
 8001742:	0a6d      	lsrs	r5, r5, #9
 8001744:	0e12      	lsrs	r2, r2, #24
 8001746:	0fc3      	lsrs	r3, r0, #31
 8001748:	0a76      	lsrs	r6, r6, #9
 800174a:	0e24      	lsrs	r4, r4, #24
 800174c:	0fc9      	lsrs	r1, r1, #31
 800174e:	2aff      	cmp	r2, #255	; 0xff
 8001750:	d00f      	beq.n	8001772 <__eqsf2+0x3a>
 8001752:	2cff      	cmp	r4, #255	; 0xff
 8001754:	d011      	beq.n	800177a <__eqsf2+0x42>
 8001756:	2001      	movs	r0, #1
 8001758:	42a2      	cmp	r2, r4
 800175a:	d000      	beq.n	800175e <__eqsf2+0x26>
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	42b5      	cmp	r5, r6
 8001760:	d1fc      	bne.n	800175c <__eqsf2+0x24>
 8001762:	428b      	cmp	r3, r1
 8001764:	d00d      	beq.n	8001782 <__eqsf2+0x4a>
 8001766:	2a00      	cmp	r2, #0
 8001768:	d1f8      	bne.n	800175c <__eqsf2+0x24>
 800176a:	0028      	movs	r0, r5
 800176c:	1e45      	subs	r5, r0, #1
 800176e:	41a8      	sbcs	r0, r5
 8001770:	e7f4      	b.n	800175c <__eqsf2+0x24>
 8001772:	2001      	movs	r0, #1
 8001774:	2d00      	cmp	r5, #0
 8001776:	d1f1      	bne.n	800175c <__eqsf2+0x24>
 8001778:	e7eb      	b.n	8001752 <__eqsf2+0x1a>
 800177a:	2001      	movs	r0, #1
 800177c:	2e00      	cmp	r6, #0
 800177e:	d1ed      	bne.n	800175c <__eqsf2+0x24>
 8001780:	e7e9      	b.n	8001756 <__eqsf2+0x1e>
 8001782:	2000      	movs	r0, #0
 8001784:	e7ea      	b.n	800175c <__eqsf2+0x24>
 8001786:	46c0      	nop			; (mov r8, r8)

08001788 <__gesf2>:
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	0042      	lsls	r2, r0, #1
 800178c:	0246      	lsls	r6, r0, #9
 800178e:	024d      	lsls	r5, r1, #9
 8001790:	004c      	lsls	r4, r1, #1
 8001792:	0fc3      	lsrs	r3, r0, #31
 8001794:	0a76      	lsrs	r6, r6, #9
 8001796:	0e12      	lsrs	r2, r2, #24
 8001798:	0a6d      	lsrs	r5, r5, #9
 800179a:	0e24      	lsrs	r4, r4, #24
 800179c:	0fc8      	lsrs	r0, r1, #31
 800179e:	2aff      	cmp	r2, #255	; 0xff
 80017a0:	d01f      	beq.n	80017e2 <__gesf2+0x5a>
 80017a2:	2cff      	cmp	r4, #255	; 0xff
 80017a4:	d010      	beq.n	80017c8 <__gesf2+0x40>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d11f      	bne.n	80017ea <__gesf2+0x62>
 80017aa:	4271      	negs	r1, r6
 80017ac:	4171      	adcs	r1, r6
 80017ae:	2c00      	cmp	r4, #0
 80017b0:	d101      	bne.n	80017b6 <__gesf2+0x2e>
 80017b2:	2d00      	cmp	r5, #0
 80017b4:	d01e      	beq.n	80017f4 <__gesf2+0x6c>
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d10e      	bne.n	80017d8 <__gesf2+0x50>
 80017ba:	4283      	cmp	r3, r0
 80017bc:	d01e      	beq.n	80017fc <__gesf2+0x74>
 80017be:	2102      	movs	r1, #2
 80017c0:	1e58      	subs	r0, r3, #1
 80017c2:	4008      	ands	r0, r1
 80017c4:	3801      	subs	r0, #1
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	d126      	bne.n	800181a <__gesf2+0x92>
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	d1f4      	bne.n	80017ba <__gesf2+0x32>
 80017d0:	4271      	negs	r1, r6
 80017d2:	4171      	adcs	r1, r6
 80017d4:	2900      	cmp	r1, #0
 80017d6:	d0f0      	beq.n	80017ba <__gesf2+0x32>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d1f4      	bne.n	80017c6 <__gesf2+0x3e>
 80017dc:	2001      	movs	r0, #1
 80017de:	4240      	negs	r0, r0
 80017e0:	e7f1      	b.n	80017c6 <__gesf2+0x3e>
 80017e2:	2e00      	cmp	r6, #0
 80017e4:	d119      	bne.n	800181a <__gesf2+0x92>
 80017e6:	2cff      	cmp	r4, #255	; 0xff
 80017e8:	d0ee      	beq.n	80017c8 <__gesf2+0x40>
 80017ea:	2c00      	cmp	r4, #0
 80017ec:	d1e5      	bne.n	80017ba <__gesf2+0x32>
 80017ee:	2d00      	cmp	r5, #0
 80017f0:	d1e3      	bne.n	80017ba <__gesf2+0x32>
 80017f2:	e7e4      	b.n	80017be <__gesf2+0x36>
 80017f4:	2000      	movs	r0, #0
 80017f6:	2e00      	cmp	r6, #0
 80017f8:	d0e5      	beq.n	80017c6 <__gesf2+0x3e>
 80017fa:	e7e0      	b.n	80017be <__gesf2+0x36>
 80017fc:	42a2      	cmp	r2, r4
 80017fe:	dc05      	bgt.n	800180c <__gesf2+0x84>
 8001800:	dbea      	blt.n	80017d8 <__gesf2+0x50>
 8001802:	42ae      	cmp	r6, r5
 8001804:	d802      	bhi.n	800180c <__gesf2+0x84>
 8001806:	d3e7      	bcc.n	80017d8 <__gesf2+0x50>
 8001808:	2000      	movs	r0, #0
 800180a:	e7dc      	b.n	80017c6 <__gesf2+0x3e>
 800180c:	4241      	negs	r1, r0
 800180e:	4141      	adcs	r1, r0
 8001810:	4248      	negs	r0, r1
 8001812:	2102      	movs	r1, #2
 8001814:	4008      	ands	r0, r1
 8001816:	3801      	subs	r0, #1
 8001818:	e7d5      	b.n	80017c6 <__gesf2+0x3e>
 800181a:	2002      	movs	r0, #2
 800181c:	4240      	negs	r0, r0
 800181e:	e7d2      	b.n	80017c6 <__gesf2+0x3e>

08001820 <__lesf2>:
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	0042      	lsls	r2, r0, #1
 8001824:	0246      	lsls	r6, r0, #9
 8001826:	024d      	lsls	r5, r1, #9
 8001828:	004c      	lsls	r4, r1, #1
 800182a:	0fc3      	lsrs	r3, r0, #31
 800182c:	0a76      	lsrs	r6, r6, #9
 800182e:	0e12      	lsrs	r2, r2, #24
 8001830:	0a6d      	lsrs	r5, r5, #9
 8001832:	0e24      	lsrs	r4, r4, #24
 8001834:	0fc8      	lsrs	r0, r1, #31
 8001836:	2aff      	cmp	r2, #255	; 0xff
 8001838:	d00d      	beq.n	8001856 <__lesf2+0x36>
 800183a:	2cff      	cmp	r4, #255	; 0xff
 800183c:	d00f      	beq.n	800185e <__lesf2+0x3e>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d123      	bne.n	800188a <__lesf2+0x6a>
 8001842:	4271      	negs	r1, r6
 8001844:	4171      	adcs	r1, r6
 8001846:	2c00      	cmp	r4, #0
 8001848:	d10f      	bne.n	800186a <__lesf2+0x4a>
 800184a:	2d00      	cmp	r5, #0
 800184c:	d10d      	bne.n	800186a <__lesf2+0x4a>
 800184e:	2000      	movs	r0, #0
 8001850:	2e00      	cmp	r6, #0
 8001852:	d014      	beq.n	800187e <__lesf2+0x5e>
 8001854:	e00d      	b.n	8001872 <__lesf2+0x52>
 8001856:	2e00      	cmp	r6, #0
 8001858:	d110      	bne.n	800187c <__lesf2+0x5c>
 800185a:	2cff      	cmp	r4, #255	; 0xff
 800185c:	d115      	bne.n	800188a <__lesf2+0x6a>
 800185e:	2d00      	cmp	r5, #0
 8001860:	d10c      	bne.n	800187c <__lesf2+0x5c>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d103      	bne.n	800186e <__lesf2+0x4e>
 8001866:	4271      	negs	r1, r6
 8001868:	4171      	adcs	r1, r6
 800186a:	2900      	cmp	r1, #0
 800186c:	d108      	bne.n	8001880 <__lesf2+0x60>
 800186e:	4283      	cmp	r3, r0
 8001870:	d010      	beq.n	8001894 <__lesf2+0x74>
 8001872:	2102      	movs	r1, #2
 8001874:	1e58      	subs	r0, r3, #1
 8001876:	4008      	ands	r0, r1
 8001878:	3801      	subs	r0, #1
 800187a:	e000      	b.n	800187e <__lesf2+0x5e>
 800187c:	2002      	movs	r0, #2
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	2800      	cmp	r0, #0
 8001882:	d1fc      	bne.n	800187e <__lesf2+0x5e>
 8001884:	2001      	movs	r0, #1
 8001886:	4240      	negs	r0, r0
 8001888:	e7f9      	b.n	800187e <__lesf2+0x5e>
 800188a:	2c00      	cmp	r4, #0
 800188c:	d1ef      	bne.n	800186e <__lesf2+0x4e>
 800188e:	2d00      	cmp	r5, #0
 8001890:	d1ed      	bne.n	800186e <__lesf2+0x4e>
 8001892:	e7ee      	b.n	8001872 <__lesf2+0x52>
 8001894:	42a2      	cmp	r2, r4
 8001896:	dc05      	bgt.n	80018a4 <__lesf2+0x84>
 8001898:	dbf2      	blt.n	8001880 <__lesf2+0x60>
 800189a:	42ae      	cmp	r6, r5
 800189c:	d802      	bhi.n	80018a4 <__lesf2+0x84>
 800189e:	d3ef      	bcc.n	8001880 <__lesf2+0x60>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e7ec      	b.n	800187e <__lesf2+0x5e>
 80018a4:	4241      	negs	r1, r0
 80018a6:	4141      	adcs	r1, r0
 80018a8:	4248      	negs	r0, r1
 80018aa:	2102      	movs	r1, #2
 80018ac:	4008      	ands	r0, r1
 80018ae:	3801      	subs	r0, #1
 80018b0:	e7e5      	b.n	800187e <__lesf2+0x5e>
 80018b2:	46c0      	nop			; (mov r8, r8)

080018b4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b08f      	sub	sp, #60	; 0x3c
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80018bc:	200c      	movs	r0, #12
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	22b2      	movs	r2, #178	; 0xb2
 80018c2:	32ff      	adds	r2, #255	; 0xff
 80018c4:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	2224      	movs	r2, #36	; 0x24
 80018ca:	2107      	movs	r1, #7
 80018cc:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 80018ce:	183b      	adds	r3, r7, r0
 80018d0:	2225      	movs	r2, #37	; 0x25
 80018d2:	2107      	movs	r1, #7
 80018d4:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 80018d6:	183b      	adds	r3, r7, r0
 80018d8:	2226      	movs	r2, #38	; 0x26
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 80018de:	183b      	adds	r3, r7, r0
 80018e0:	222a      	movs	r2, #42	; 0x2a
 80018e2:	21ff      	movs	r1, #255	; 0xff
 80018e4:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 80018e6:	183b      	adds	r3, r7, r0
 80018e8:	222b      	movs	r2, #43	; 0x2b
 80018ea:	2164      	movs	r1, #100	; 0x64
 80018ec:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 80018ee:	0001      	movs	r1, r0
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2208      	movs	r2, #8
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	187a      	adds	r2, r7, r1
 80018fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018fc:	c313      	stmia	r3!, {r0, r1, r4}
 80018fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001900:	c313      	stmia	r3!, {r0, r1, r4}
 8001902:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001904:	c313      	stmia	r3!, {r0, r1, r4}
 8001906:	ca03      	ldmia	r2!, {r0, r1}
 8001908:	c303      	stmia	r3!, {r0, r1}
}
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	46bd      	mov	sp, r7
 800190e:	b00f      	add	sp, #60	; 0x3c
 8001910:	bd90      	pop	{r4, r7, pc}

08001912 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001912:	b5b0      	push	{r4, r5, r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800191c:	250e      	movs	r5, #14
 800191e:	197c      	adds	r4, r7, r5
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2101      	movs	r1, #1
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f9e8 	bl	8001cfa <LoRa_read>
 800192a:	0003      	movs	r3, r0
 800192c:	7023      	strb	r3, [r4, #0]
	data = read;
 800192e:	200f      	movs	r0, #15
 8001930:	183b      	adds	r3, r7, r0
 8001932:	0029      	movs	r1, r5
 8001934:	187a      	adds	r2, r7, r1
 8001936:	7812      	ldrb	r2, [r2, #0]
 8001938:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8001940:	183b      	adds	r3, r7, r0
 8001942:	187a      	adds	r2, r7, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	2107      	movs	r1, #7
 8001948:	438a      	bics	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
 8001952:	e04e      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d110      	bne.n	800197c <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 800195a:	230e      	movs	r3, #14
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	2207      	movs	r2, #7
 8001964:	4393      	bics	r3, r2
 8001966:	b25b      	sxtb	r3, r3
 8001968:	2201      	movs	r2, #1
 800196a:	4313      	orrs	r3, r2
 800196c:	b25a      	sxtb	r2, r3
 800196e:	230f      	movs	r3, #15
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	61da      	str	r2, [r3, #28]
 800197a:	e03a      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d110      	bne.n	80019a4 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8001982:	230e      	movs	r3, #14
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	2207      	movs	r2, #7
 800198c:	4393      	bics	r3, r2
 800198e:	b25b      	sxtb	r3, r3
 8001990:	2203      	movs	r2, #3
 8001992:	4313      	orrs	r3, r2
 8001994:	b25a      	sxtb	r2, r3
 8001996:	230f      	movs	r3, #15
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	61da      	str	r2, [r3, #28]
 80019a2:	e026      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d110      	bne.n	80019cc <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80019aa:	230e      	movs	r3, #14
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	2207      	movs	r2, #7
 80019b4:	4393      	bics	r3, r2
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	2205      	movs	r2, #5
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	230f      	movs	r3, #15
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2205      	movs	r2, #5
 80019c8:	61da      	str	r2, [r3, #28]
 80019ca:	e012      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d10f      	bne.n	80019f2 <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 80019d2:	230e      	movs	r3, #14
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	2207      	movs	r2, #7
 80019dc:	4393      	bics	r3, r2
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	2206      	movs	r2, #6
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b25a      	sxtb	r2, r3
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2206      	movs	r2, #6
 80019f0:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2101      	movs	r1, #1
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f99a 	bl	8001d36 <LoRa_write>
	//HAL_Delay(10);
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}

08001a0a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	0019      	movs	r1, r3
 8001a26:	f002 fc89 	bl	800433c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6998      	ldr	r0, [r3, #24]
 8001a2e:	23fa      	movs	r3, #250	; 0xfa
 8001a30:	00dc      	lsls	r4, r3, #3
 8001a32:	1dbb      	adds	r3, r7, #6
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	0023      	movs	r3, r4
 8001a3a:	f003 fcf5 	bl	8005428 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f004 f965 	bl	8005d14 <HAL_SPI_GetState>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d1f7      	bne.n	8001a40 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6998      	ldr	r0, [r3, #24]
 8001a54:	23fa      	movs	r3, #250	; 0xfa
 8001a56:	00dc      	lsls	r4, r3, #3
 8001a58:	2320      	movs	r3, #32
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	0023      	movs	r3, r4
 8001a62:	f003 fe39 	bl	80056d8 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f004 f951 	bl	8005d14 <HAL_SPI_GetState>
 8001a72:	0003      	movs	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d1f7      	bne.n	8001a68 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	889b      	ldrh	r3, [r3, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	0019      	movs	r1, r3
 8001a84:	f002 fc5a 	bl	800433c <HAL_GPIO_WritePin>
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b005      	add	sp, #20
 8001a8e:	bd90      	pop	{r4, r7, pc}

08001a90 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0019      	movs	r1, r3
 8001aac:	f002 fc46 	bl	800433c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6998      	ldr	r0, [r3, #24]
 8001ab4:	23fa      	movs	r3, #250	; 0xfa
 8001ab6:	00dc      	lsls	r4, r3, #3
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	0023      	movs	r3, r4
 8001ac0:	f003 fcb2 	bl	8005428 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f004 f922 	bl	8005d14 <HAL_SPI_GetState>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d1f7      	bne.n	8001ac6 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6998      	ldr	r0, [r3, #24]
 8001ada:	23fa      	movs	r3, #250	; 0xfa
 8001adc:	00dc      	lsls	r4, r3, #3
 8001ade:	2320      	movs	r3, #32
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	0023      	movs	r3, r4
 8001ae8:	f003 fc9e 	bl	8005428 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f004 f90e 	bl	8005d14 <HAL_SPI_GetState>
 8001af8:	0003      	movs	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d1f7      	bne.n	8001aee <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	0019      	movs	r1, r3
 8001b0a:	f002 fc17 	bl	800433c <HAL_GPIO_WritePin>
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b005      	add	sp, #20
 8001b14:	bd90      	pop	{r4, r7, pc}

08001b16 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	04db      	lsls	r3, r3, #19
 8001b24:	115b      	asrs	r3, r3, #5
 8001b26:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	0c1a      	lsrs	r2, r3, #16
 8001b2c:	240b      	movs	r4, #11
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2106      	movs	r1, #6
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f8fb 	bl	8001d36 <LoRa_write>
	HAL_Delay(5);
 8001b40:	2005      	movs	r0, #5
 8001b42:	f001 fa09 	bl	8002f58 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0a1a      	lsrs	r2, r3, #8
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2107      	movs	r1, #7
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f8ed 	bl	8001d36 <LoRa_write>
	HAL_Delay(5);
 8001b5c:	2005      	movs	r0, #5
 8001b5e:	f001 f9fb 	bl	8002f58 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2108      	movs	r1, #8
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f8e0 	bl	8001d36 <LoRa_write>
	HAL_Delay(5);
 8001b76:	2005      	movs	r0, #5
 8001b78:	f001 f9ee 	bl	8002f58 <HAL_Delay>
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b005      	add	sp, #20
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	dd01      	ble.n	8001b98 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001b94:	230c      	movs	r3, #12
 8001b96:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	dc01      	bgt.n	8001ba2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001ba2:	250f      	movs	r5, #15
 8001ba4:	197c      	adds	r4, r7, r5
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	211e      	movs	r1, #30
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f8a5 	bl	8001cfa <LoRa_read>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f001 f9cf 	bl	8002f58 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	197b      	adds	r3, r7, r5
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	200e      	movs	r0, #14
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	188a      	adds	r2, r1, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	211e      	movs	r1, #30
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f8aa 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001be2:	200a      	movs	r0, #10
 8001be4:	f001 f9b8 	bl	8002f58 <HAL_Delay>
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bdb0      	pop	{r4, r5, r7, pc}

08001bf0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	1cfb      	adds	r3, r7, #3
 8001bfc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001bfe:	1cfb      	adds	r3, r7, #3
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2109      	movs	r1, #9
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f895 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f001 f9a3 	bl	8002f58 <HAL_Delay>
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	000a      	movs	r2, r1
 8001c24:	1cfb      	adds	r3, r7, #3
 8001c26:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8001c30:	1cfb      	adds	r3, r7, #3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b2c      	cmp	r3, #44	; 0x2c
 8001c36:	d802      	bhi.n	8001c3e <LoRa_setOCP+0x24>
		current = 45;
 8001c38:	1cfb      	adds	r3, r7, #3
 8001c3a:	222d      	movs	r2, #45	; 0x2d
 8001c3c:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8001c3e:	1cfb      	adds	r3, r7, #3
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2bf0      	cmp	r3, #240	; 0xf0
 8001c44:	d902      	bls.n	8001c4c <LoRa_setOCP+0x32>
		current = 240;
 8001c46:	1cfb      	adds	r3, r7, #3
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8001c4c:	1cfb      	adds	r3, r7, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b78      	cmp	r3, #120	; 0x78
 8001c52:	d80c      	bhi.n	8001c6e <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8001c54:	1cfb      	adds	r3, r7, #3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3b2d      	subs	r3, #45	; 0x2d
 8001c5a:	2105      	movs	r1, #5
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe fadb 	bl	8000218 <__divsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	001a      	movs	r2, r3
 8001c66:	230f      	movs	r3, #15
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e00f      	b.n	8001c8e <LoRa_setOCP+0x74>
	else if(current <= 240)
 8001c6e:	1cfb      	adds	r3, r7, #3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2bf0      	cmp	r3, #240	; 0xf0
 8001c74:	d80b      	bhi.n	8001c8e <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8001c76:	1cfb      	adds	r3, r7, #3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	331e      	adds	r3, #30
 8001c7c:	210a      	movs	r1, #10
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7fe faca 	bl	8000218 <__divsi3>
 8001c84:	0003      	movs	r3, r0
 8001c86:	001a      	movs	r2, r3
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8001c8e:	210f      	movs	r1, #15
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	187a      	adds	r2, r7, r1
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	3220      	adds	r2, #32
 8001c98:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	210b      	movs	r1, #11
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f847 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f001 f955 	bl	8002f58 <HAL_Delay>
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001cb6:	b5b0      	push	{r4, r5, r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001cbe:	250f      	movs	r5, #15
 8001cc0:	197c      	adds	r4, r7, r5
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	211e      	movs	r1, #30
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f817 	bl	8001cfa <LoRa_read>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8001cd0:	200e      	movs	r0, #14
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	197a      	adds	r2, r7, r5
 8001cd6:	7812      	ldrb	r2, [r2, #0]
 8001cd8:	2107      	movs	r1, #7
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001cde:	183b      	adds	r3, r7, r0
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	211e      	movs	r1, #30
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f825 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f001 f933 	bl	8002f58 <HAL_Delay>
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bdb0      	pop	{r4, r5, r7, pc}

08001cfa <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001cfa:	b590      	push	{r4, r7, lr}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	000a      	movs	r2, r1
 8001d04:	1cfb      	adds	r3, r7, #3
 8001d06:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001d08:	1cfb      	adds	r3, r7, #3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	227f      	movs	r2, #127	; 0x7f
 8001d0e:	4013      	ands	r3, r2
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	210e      	movs	r1, #14
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001d18:	240f      	movs	r4, #15
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	1879      	adds	r1, r7, r1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f7ff fe70 	bl	8001a0a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	781b      	ldrb	r3, [r3, #0]
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b005      	add	sp, #20
 8001d34:	bd90      	pop	{r4, r7, pc}

08001d36 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af02      	add	r7, sp, #8
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	0008      	movs	r0, r1
 8001d40:	0011      	movs	r1, r2
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	1c02      	adds	r2, r0, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	1c0a      	adds	r2, r1, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001d4e:	1cfb      	adds	r3, r7, #3
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	4252      	negs	r2, r2
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	210e      	movs	r1, #14
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
	data = value;
 8001d60:	200f      	movs	r0, #15
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	1cba      	adds	r2, r7, #2
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	1879      	adds	r1, r7, r1
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	9200      	str	r2, [sp, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f7ff fe8b 	bl	8001a90 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]

	return 1;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2105      	movs	r1, #5
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7ff fdb6 	bl	8001912 <LoRa_gotoMode>
}
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b002      	add	sp, #8
 8001dac:	bd80      	pop	{r7, pc}

08001dae <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db0:	b089      	sub	sp, #36	; 0x24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001dbc:	231f      	movs	r3, #31
 8001dbe:	18fb      	adds	r3, r7, r3
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e007      	b.n	8001dda <LoRa_receive+0x2c>
		data[i]=0;
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	18d3      	adds	r3, r2, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbf2      	blt.n	8001dca <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2101      	movs	r1, #1
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff fd92 	bl	8001912 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001dee:	2513      	movs	r5, #19
 8001df0:	197c      	adds	r4, r7, r5
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2112      	movs	r1, #18
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff ff7f 	bl	8001cfa <LoRa_read>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 8001e00:	197b      	adds	r3, r7, r5
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	4013      	ands	r3, r2
 8001e08:	d03f      	beq.n	8001e8a <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	22ff      	movs	r2, #255	; 0xff
 8001e0e:	2112      	movs	r1, #18
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff ff90 	bl	8001d36 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001e16:	2612      	movs	r6, #18
 8001e18:	19bc      	adds	r4, r7, r6
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2113      	movs	r1, #19
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff ff6b 	bl	8001cfa <LoRa_read>
 8001e24:	0003      	movs	r3, r0
 8001e26:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001e28:	197c      	adds	r4, r7, r5
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7ff ff63 	bl	8001cfa <LoRa_read>
 8001e34:	0003      	movs	r3, r0
 8001e36:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001e38:	197b      	adds	r3, r7, r5
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	210d      	movs	r1, #13
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff ff78 	bl	8001d36 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001e46:	231f      	movs	r3, #31
 8001e48:	18fa      	adds	r2, r7, r3
 8001e4a:	19bb      	adds	r3, r7, r6
 8001e4c:	1df9      	adds	r1, r7, #7
 8001e4e:	780c      	ldrb	r4, [r1, #0]
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b2d8      	uxtb	r0, r3
 8001e54:	b2e1      	uxtb	r1, r4
 8001e56:	4288      	cmp	r0, r1
 8001e58:	d900      	bls.n	8001e5c <LoRa_receive+0xae>
 8001e5a:	1c23      	adds	r3, r4, #0
 8001e5c:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e00c      	b.n	8001e7e <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	18d4      	adds	r4, r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f7ff ff43 	bl	8001cfa <LoRa_read>
 8001e74:	0003      	movs	r3, r0
 8001e76:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	231f      	movs	r3, #31
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbec      	blt.n	8001e64 <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff fd3f 	bl	8001912 <LoRa_gotoMode>
    return min;
 8001e94:	231f      	movs	r3, #31
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b009      	add	sp, #36	; 0x24
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff ff68 	bl	8001d82 <LoRa_isvalid>
 8001eb2:	1e03      	subs	r3, r0, #0
 8001eb4:	d100      	bne.n	8001eb8 <LoRa_init+0x16>
 8001eb6:	e0b3      	b.n	8002020 <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2100      	movs	r1, #0
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff fd28 	bl	8001912 <LoRa_gotoMode>
			HAL_Delay(10);
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f001 f848 	bl	8002f58 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8001ec8:	260f      	movs	r6, #15
 8001eca:	19bc      	adds	r4, r7, r6
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff ff12 	bl	8001cfa <LoRa_read>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8001eda:	200a      	movs	r0, #10
 8001edc:	f001 f83c 	bl	8002f58 <HAL_Delay>
			data = read | 0x80;
 8001ee0:	250e      	movs	r5, #14
 8001ee2:	197b      	adds	r3, r7, r5
 8001ee4:	0034      	movs	r4, r6
 8001ee6:	193a      	adds	r2, r7, r4
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	4249      	negs	r1, r1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 8001ef2:	197b      	adds	r3, r7, r5
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7ff ff1b 	bl	8001d36 <LoRa_write>
			HAL_Delay(100);
 8001f00:	2064      	movs	r0, #100	; 0x64
 8001f02:	f001 f829 	bl	8002f58 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0011      	movs	r1, r2
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f7ff fe01 	bl	8001b16 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	222a      	movs	r2, #42	; 0x2a
 8001f18:	5c9a      	ldrb	r2, [r3, r2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	0011      	movs	r1, r2
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff fe66 	bl	8001bf0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	222b      	movs	r2, #43	; 0x2b
 8001f28:	5c9a      	ldrb	r2, [r3, r2]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fe73 	bl	8001c1a <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2223      	movs	r2, #35	; 0x23
 8001f38:	210c      	movs	r1, #12
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7ff fefb 	bl	8001d36 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff feb7 	bl	8001cb6 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	5c9b      	ldrb	r3, [r3, r2]
 8001f4e:	001a      	movs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff fe15 	bl	8001b84 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	211f      	movs	r1, #31
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff fee8 	bl	8001d36 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001f66:	197b      	adds	r3, r7, r5
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2225      	movs	r2, #37	; 0x25
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	b2d9      	uxtb	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2226      	movs	r2, #38	; 0x26
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	18db      	adds	r3, r3, r3
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	197b      	adds	r3, r7, r5
 8001f82:	188a      	adds	r2, r1, r2
 8001f84:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001f86:	197b      	adds	r3, r7, r5
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	211d      	movs	r1, #29
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7ff fed1 	bl	8001d36 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff fec7 	bl	8001d36 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2121      	movs	r1, #33	; 0x21
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f7ff febf 	bl	8001d36 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001fb8:	0026      	movs	r6, r4
 8001fba:	193c      	adds	r4, r7, r4
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2140      	movs	r1, #64	; 0x40
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fe9a 	bl	8001cfa <LoRa_read>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8001fca:	197b      	adds	r3, r7, r5
 8001fcc:	0034      	movs	r4, r6
 8001fce:	193a      	adds	r2, r7, r4
 8001fd0:	7812      	ldrb	r2, [r2, #0]
 8001fd2:	213f      	movs	r1, #63	; 0x3f
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001fd8:	197b      	adds	r3, r7, r5
 8001fda:	781a      	ldrb	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2140      	movs	r1, #64	; 0x40
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff fea8 	bl	8001d36 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	0018      	movs	r0, r3
 8001fec:	f7ff fc91 	bl	8001912 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001ff6:	200a      	movs	r0, #10
 8001ff8:	f000 ffae 	bl	8002f58 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001ffc:	0025      	movs	r5, r4
 8001ffe:	193c      	adds	r4, r7, r4
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2142      	movs	r1, #66	; 0x42
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff fe78 	bl	8001cfa <LoRa_read>
 800200a:	0003      	movs	r3, r0
 800200c:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 800200e:	197b      	adds	r3, r7, r5
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b12      	cmp	r3, #18
 8002014:	d101      	bne.n	800201a <LoRa_init+0x178>
				return LORA_OK;
 8002016:	23c8      	movs	r3, #200	; 0xc8
 8002018:	e004      	b.n	8002024 <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 800201a:	23ca      	movs	r3, #202	; 0xca
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	e001      	b.n	8002024 <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8002020:	23f8      	movs	r3, #248	; 0xf8
 8002022:	33ff      	adds	r3, #255	; 0xff
	}
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b005      	add	sp, #20
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202c <PWM_Set_DC>:
//		  flagui = 1;
//	  }
//
//}

void PWM_Set_DC(TIM_HandleTypeDef *timer, uint32_t channel, uint8_t dc){
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	701a      	strb	r2, [r3, #0]
	uint32_t arr, ccrx;

	arr = __HAL_TIM_GET_AUTORELOAD(timer);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	617b      	str	r3, [r7, #20]
	if (dc <= 100){
 8002042:	1dfb      	adds	r3, r7, #7
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d835      	bhi.n	80020b6 <PWM_Set_DC+0x8a>
		ccrx = arr*dc/100;
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4353      	muls	r3, r2
 8002052:	2164      	movs	r1, #100	; 0x64
 8002054:	0018      	movs	r0, r3
 8002056:	f7fe f855 	bl	8000104 <__udivsi3>
 800205a:	0003      	movs	r3, r0
 800205c:	613b      	str	r3, [r7, #16]

		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d104      	bne.n	800206e <PWM_Set_DC+0x42>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800206c:	e023      	b.n	80020b6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d104      	bne.n	800207e <PWM_Set_DC+0x52>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800207c:	e01b      	b.n	80020b6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d104      	bne.n	800208e <PWM_Set_DC+0x62>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800208c:	e013      	b.n	80020b6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b0c      	cmp	r3, #12
 8002092:	d104      	bne.n	800209e <PWM_Set_DC+0x72>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800209c:	e00b      	b.n	80020b6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d104      	bne.n	80020ae <PWM_Set_DC+0x82>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
}
 80020ac:	e003      	b.n	80020b6 <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b006      	add	sp, #24
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	0002      	movs	r2, r0
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	801a      	strh	r2, [r3, #0]
	contador++;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80020d6:	701a      	strb	r2, [r3, #0]

	  if(contador > 5){
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d902      	bls.n	80020e6 <HAL_GPIO_EXTI_Falling_Callback+0x26>
		  contador = 1;
 80020e0:	4b19      	ldr	r3, [pc, #100]	; (8002148 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
	  }
	  switch(contador){
 80020e6:	4b18      	ldr	r3, [pc, #96]	; (8002148 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d827      	bhi.n	800213e <HAL_GPIO_EXTI_Falling_Callback+0x7e>
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80020f2:	18d3      	adds	r3, r2, r3
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	469f      	mov	pc, r3
	  			case 1:
	  				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff ff94 	bl	800202c <PWM_Set_DC>
	  				break;
 8002104:	e01b      	b.n	800213e <HAL_GPIO_EXTI_Falling_Callback+0x7e>

	  			case 2:
	  				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 8002106:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8002108:	221e      	movs	r2, #30
 800210a:	2100      	movs	r1, #0
 800210c:	0018      	movs	r0, r3
 800210e:	f7ff ff8d 	bl	800202c <PWM_Set_DC>
	  				break;
 8002112:	e014      	b.n	800213e <HAL_GPIO_EXTI_Falling_Callback+0x7e>
				case 3:
					PWM_Set_DC(&htim2, TIM_CHANNEL_1, 50);
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8002116:	2232      	movs	r2, #50	; 0x32
 8002118:	2100      	movs	r1, #0
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff ff86 	bl	800202c <PWM_Set_DC>
					break;
 8002120:	e00d      	b.n	800213e <HAL_GPIO_EXTI_Falling_Callback+0x7e>

				case 4:
					PWM_Set_DC(&htim2, TIM_CHANNEL_1, 75);
 8002122:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8002124:	224b      	movs	r2, #75	; 0x4b
 8002126:	2100      	movs	r1, #0
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff7f 	bl	800202c <PWM_Set_DC>
					break;
 800212e:	e006      	b.n	800213e <HAL_GPIO_EXTI_Falling_Callback+0x7e>

				case 5:
					PWM_Set_DC(&htim2, TIM_CHANNEL_1, 100);
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_GPIO_EXTI_Falling_Callback+0x90>)
 8002132:	2264      	movs	r2, #100	; 0x64
 8002134:	2100      	movs	r1, #0
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ff78 	bl	800202c <PWM_Set_DC>
					break;
 800213c:	46c0      	nop			; (mov r8, r8)
	  }
}
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	20000152 	.word	0x20000152
 800214c:	08007588 	.word	0x08007588
 8002150:	2000023c 	.word	0x2000023c

08002154 <calcTensao>:

float calcTensao(uint16_t num){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	0002      	movs	r2, r0
 800215c:	1dbb      	adds	r3, r7, #6
 800215e:	801a      	strh	r2, [r3, #0]
	float temp = (3.3 * (num / 4095.0));
 8002160:	1dbb      	adds	r3, r7, #6
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff f9b1 	bl	80014cc <__aeabi_i2d>
 800216a:	2200      	movs	r2, #0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <calcTensao+0x48>)
 800216e:	f7fe fc59 	bl	8000a24 <__aeabi_ddiv>
 8002172:	0002      	movs	r2, r0
 8002174:	000b      	movs	r3, r1
 8002176:	0010      	movs	r0, r2
 8002178:	0019      	movs	r1, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <calcTensao+0x4c>)
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <calcTensao+0x50>)
 800217e:	f7fe ff39 	bl	8000ff4 <__aeabi_dmul>
 8002182:	0002      	movs	r2, r0
 8002184:	000b      	movs	r3, r1
 8002186:	0010      	movs	r0, r2
 8002188:	0019      	movs	r1, r3
 800218a:	f7ff f9f5 	bl	8001578 <__aeabi_d2f>
 800218e:	1c03      	adds	r3, r0, #0
 8002190:	60fb      	str	r3, [r7, #12]
	return temp;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	1c18      	adds	r0, r3, #0
 8002196:	46bd      	mov	sp, r7
 8002198:	b004      	add	sp, #16
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40affe00 	.word	0x40affe00
 80021a0:	66666666 	.word	0x66666666
 80021a4:	400a6666 	.word	0x400a6666

080021a8 <converter_dados>:
void converter_dados(uint32_t num){
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

	if(flag == 1){
 80021b0:	4b77      	ldr	r3, [pc, #476]	; (8002390 <converter_dados+0x1e8>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d000      	beq.n	80021ba <converter_dados+0x12>
 80021b8:	e0e2      	b.n	8002380 <converter_dados+0x1d8>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d900      	bls.n	80021c2 <converter_dados+0x1a>
 80021c0:	e0e1      	b.n	8002386 <converter_dados+0x1de>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	4b73      	ldr	r3, [pc, #460]	; (8002394 <converter_dados+0x1ec>)
 80021c8:	18d3      	adds	r3, r2, r3
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	469f      	mov	pc, r3

		switch(num){
			case 1:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <converter_dados+0x1f0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff ff29 	bl	800202c <PWM_Set_DC>
				break;
 80021da:	e0d4      	b.n	8002386 <converter_dados+0x1de>

			case 2:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 80021dc:	4b6e      	ldr	r3, [pc, #440]	; (8002398 <converter_dados+0x1f0>)
 80021de:	221e      	movs	r2, #30
 80021e0:	2100      	movs	r1, #0
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7ff ff22 	bl	800202c <PWM_Set_DC>
				break;
 80021e8:	e0cd      	b.n	8002386 <converter_dados+0x1de>

			case 3:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 50);
 80021ea:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <converter_dados+0x1f0>)
 80021ec:	2232      	movs	r2, #50	; 0x32
 80021ee:	2100      	movs	r1, #0
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff ff1b 	bl	800202c <PWM_Set_DC>
				break;
 80021f6:	e0c6      	b.n	8002386 <converter_dados+0x1de>

			case 4:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 75);
 80021f8:	4b67      	ldr	r3, [pc, #412]	; (8002398 <converter_dados+0x1f0>)
 80021fa:	224b      	movs	r2, #75	; 0x4b
 80021fc:	2100      	movs	r1, #0
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff ff14 	bl	800202c <PWM_Set_DC>
				break;
 8002204:	e0bf      	b.n	8002386 <converter_dados+0x1de>

			case 5:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4864      	ldr	r0, [pc, #400]	; (800239c <converter_dados+0x1f4>)
 800220c:	2200      	movs	r2, #0
 800220e:	0019      	movs	r1, r3
 8002210:	f002 f894 	bl	800433c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	4861      	ldr	r0, [pc, #388]	; (80023a0 <converter_dados+0x1f8>)
 800221a:	2200      	movs	r2, #0
 800221c:	0019      	movs	r1, r3
 800221e:	f002 f88d 	bl	800433c <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002222:	200a      	movs	r0, #10
 8002224:	f000 fe98 	bl	8002f58 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	485c      	ldr	r0, [pc, #368]	; (80023a0 <converter_dados+0x1f8>)
 800222e:	2201      	movs	r2, #1
 8002230:	0019      	movs	r1, r3
 8002232:	f002 f883 	bl	800433c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 8002236:	2380      	movs	r3, #128	; 0x80
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	4859      	ldr	r0, [pc, #356]	; (80023a0 <converter_dados+0x1f8>)
 800223c:	2201      	movs	r2, #1
 800223e:	0019      	movs	r1, r3
 8002240:	f002 f87c 	bl	800433c <HAL_GPIO_WritePin>

				break;
 8002244:	e09f      	b.n	8002386 <converter_dados+0x1de>

			case 6:
				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4855      	ldr	r0, [pc, #340]	; (80023a0 <converter_dados+0x1f8>)
 800224c:	2200      	movs	r2, #0
 800224e:	0019      	movs	r1, r3
 8002250:	f002 f874 	bl	800433c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	015b      	lsls	r3, r3, #5
 8002258:	4851      	ldr	r0, [pc, #324]	; (80023a0 <converter_dados+0x1f8>)
 800225a:	2200      	movs	r2, #0
 800225c:	0019      	movs	r1, r3
 800225e:	f002 f86d 	bl	800433c <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002262:	200a      	movs	r0, #10
 8002264:	f000 fe78 	bl	8002f58 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 8002268:	2380      	movs	r3, #128	; 0x80
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	484b      	ldr	r0, [pc, #300]	; (800239c <converter_dados+0x1f4>)
 800226e:	2201      	movs	r2, #1
 8002270:	0019      	movs	r1, r3
 8002272:	f002 f863 	bl	800433c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	4849      	ldr	r0, [pc, #292]	; (80023a0 <converter_dados+0x1f8>)
 800227c:	2201      	movs	r2, #1
 800227e:	0019      	movs	r1, r3
 8002280:	f002 f85c 	bl	800433c <HAL_GPIO_WritePin>
				break;
 8002284:	e07f      	b.n	8002386 <converter_dados+0x1de>

			case 7:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 100);
 8002286:	4b44      	ldr	r3, [pc, #272]	; (8002398 <converter_dados+0x1f0>)
 8002288:	2264      	movs	r2, #100	; 0x64
 800228a:	2100      	movs	r1, #0
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff fecd 	bl	800202c <PWM_Set_DC>
				break;
 8002292:	e078      	b.n	8002386 <converter_dados+0x1de>

			case 8:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 8002294:	4b40      	ldr	r3, [pc, #256]	; (8002398 <converter_dados+0x1f0>)
 8002296:	221e      	movs	r2, #30
 8002298:	2100      	movs	r1, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff fec6 	bl	800202c <PWM_Set_DC>
				break;
 80022a0:	e071      	b.n	8002386 <converter_dados+0x1de>

			case 9:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <converter_dados+0x1f0>)
 80022a4:	221e      	movs	r2, #30
 80022a6:	2100      	movs	r1, #0
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff febf 	bl	800202c <PWM_Set_DC>
				break;
 80022ae:	e06a      	b.n	8002386 <converter_dados+0x1de>

			case 10:
				if(flag == 1 && cont > 1){
 80022b0:	4b37      	ldr	r3, [pc, #220]	; (8002390 <converter_dados+0x1e8>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d165      	bne.n	8002384 <converter_dados+0x1dc>
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <converter_dados+0x1fc>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d961      	bls.n	8002384 <converter_dados+0x1dc>
					flag = 0;
 80022c0:	4b33      	ldr	r3, [pc, #204]	; (8002390 <converter_dados+0x1e8>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
					cont = 0;
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <converter_dados+0x1fc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4833      	ldr	r0, [pc, #204]	; (80023a0 <converter_dados+0x1f8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	0019      	movs	r1, r3
 80022d6:	f002 f831 	bl	800433c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	015b      	lsls	r3, r3, #5
 80022de:	4830      	ldr	r0, [pc, #192]	; (80023a0 <converter_dados+0x1f8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	0019      	movs	r1, r3
 80022e4:	f002 f82a 	bl	800433c <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	482b      	ldr	r0, [pc, #172]	; (800239c <converter_dados+0x1f4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	0019      	movs	r1, r3
 80022f2:	f002 f823 	bl	800433c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4829      	ldr	r0, [pc, #164]	; (80023a0 <converter_dados+0x1f8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	0019      	movs	r1, r3
 8002300:	f002 f81c 	bl	800433c <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 0);
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <converter_dados+0x1f8>)
 8002306:	2200      	movs	r2, #0
 8002308:	2120      	movs	r1, #32
 800230a:	0018      	movs	r0, r3
 800230c:	f002 f816 	bl	800433c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 1);
 8002310:	4b23      	ldr	r3, [pc, #140]	; (80023a0 <converter_dados+0x1f8>)
 8002312:	2201      	movs	r2, #1
 8002314:	2110      	movs	r1, #16
 8002316:	0018      	movs	r0, r3
 8002318:	f002 f810 	bl	800433c <HAL_GPIO_WritePin>
				}
				break;
 800231c:	e032      	b.n	8002384 <converter_dados+0x1dc>

			 case 11:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <converter_dados+0x1f0>)
 8002320:	221e      	movs	r2, #30
 8002322:	2100      	movs	r1, #0
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fe81 	bl	800202c <PWM_Set_DC>
				break;
 800232a:	e02c      	b.n	8002386 <converter_dados+0x1de>

			 case 12:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <converter_dados+0x1f0>)
 800232e:	221e      	movs	r2, #30
 8002330:	2100      	movs	r1, #0
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff fe7a 	bl	800202c <PWM_Set_DC>
				break;
 8002338:	e025      	b.n	8002386 <converter_dados+0x1de>

			 case 13:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <converter_dados+0x1f0>)
 800233c:	221e      	movs	r2, #30
 800233e:	2100      	movs	r1, #0
 8002340:	0018      	movs	r0, r3
 8002342:	f7ff fe73 	bl	800202c <PWM_Set_DC>
				break;
 8002346:	e01e      	b.n	8002386 <converter_dados+0x1de>

			 case 14:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <converter_dados+0x1f0>)
 800234a:	221e      	movs	r2, #30
 800234c:	2100      	movs	r1, #0
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff fe6c 	bl	800202c <PWM_Set_DC>
				break;
 8002354:	e017      	b.n	8002386 <converter_dados+0x1de>

			 case 15:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <converter_dados+0x1f0>)
 8002358:	221e      	movs	r2, #30
 800235a:	2100      	movs	r1, #0
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fe65 	bl	800202c <PWM_Set_DC>
				break;
 8002362:	e010      	b.n	8002386 <converter_dados+0x1de>

			 case 16:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <converter_dados+0x1f0>)
 8002366:	221e      	movs	r2, #30
 8002368:	2100      	movs	r1, #0
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff fe5e 	bl	800202c <PWM_Set_DC>
				break;
 8002370:	e009      	b.n	8002386 <converter_dados+0x1de>

			 case 17:
				 PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <converter_dados+0x1f0>)
 8002374:	221e      	movs	r2, #30
 8002376:	2100      	movs	r1, #0
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff fe57 	bl	800202c <PWM_Set_DC>
				break;
 800237e:	e002      	b.n	8002386 <converter_dados+0x1de>


		}
	}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	e000      	b.n	8002386 <converter_dados+0x1de>
				break;
 8002384:	46c0      	nop			; (mov r8, r8)
}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	46bd      	mov	sp, r7
 800238a:	b002      	add	sp, #8
 800238c:	bd80      	pop	{r7, pc}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	2000002d 	.word	0x2000002d
 8002394:	080075a0 	.word	0x080075a0
 8002398:	2000023c 	.word	0x2000023c
 800239c:	50000400 	.word	0x50000400
 80023a0:	50000800 	.word	0x50000800
 80023a4:	2000002c 	.word	0x2000002c

080023a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b091      	sub	sp, #68	; 0x44
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023ae:	f000 fd4d 	bl	8002e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023b2:	f000 f92d 	bl	8002610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023b6:	f000 fabf 	bl	8002938 <MX_GPIO_Init>
  MX_TIM2_Init();
 80023ba:	f000 fa31 	bl	8002820 <MX_TIM2_Init>
  MX_ADC1_Init();
 80023be:	f000 f985 	bl	80026cc <MX_ADC1_Init>
  MX_SPI1_Init();
 80023c2:	f000 f9ef 	bl	80027a4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  myLoRa = newLoRa();
 80023c6:	4c7d      	ldr	r4, [pc, #500]	; (80025bc <main+0x214>)
 80023c8:	003b      	movs	r3, r7
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff fa72 	bl	80018b4 <newLoRa>
 80023d0:	003a      	movs	r2, r7
 80023d2:	0023      	movs	r3, r4
 80023d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023d6:	c313      	stmia	r3!, {r0, r1, r4}
 80023d8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023da:	c313      	stmia	r3!, {r0, r1, r4}
 80023dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80023de:	c313      	stmia	r3!, {r0, r1, r4}
 80023e0:	ca03      	ldmia	r2!, {r0, r1}
 80023e2:	c303      	stmia	r3!, {r0, r1}

    	myLoRa.hSPIx                 = &hspi1;
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <main+0x214>)
 80023e6:	4a76      	ldr	r2, [pc, #472]	; (80025c0 <main+0x218>)
 80023e8:	619a      	str	r2, [r3, #24]
    	myLoRa.CS_port               = NSS_GPIO_Port;
 80023ea:	4b74      	ldr	r3, [pc, #464]	; (80025bc <main+0x214>)
 80023ec:	22a0      	movs	r2, #160	; 0xa0
 80023ee:	05d2      	lsls	r2, r2, #23
 80023f0:	601a      	str	r2, [r3, #0]
    	myLoRa.CS_pin                = NSS_Pin;
 80023f2:	4b72      	ldr	r3, [pc, #456]	; (80025bc <main+0x214>)
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	809a      	strh	r2, [r3, #4]


    	myLoRa.frequency             = 433;							  // default = 433 MHz
 80023f8:	4b70      	ldr	r3, [pc, #448]	; (80025bc <main+0x214>)
 80023fa:	22b2      	movs	r2, #178	; 0xb2
 80023fc:	32ff      	adds	r2, #255	; 0xff
 80023fe:	621a      	str	r2, [r3, #32]
    	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8002400:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <main+0x214>)
 8002402:	2224      	movs	r2, #36	; 0x24
 8002404:	2107      	movs	r1, #7
 8002406:	5499      	strb	r1, [r3, r2]
    	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8002408:	4b6c      	ldr	r3, [pc, #432]	; (80025bc <main+0x214>)
 800240a:	2225      	movs	r2, #37	; 0x25
 800240c:	2107      	movs	r1, #7
 800240e:	5499      	strb	r1, [r3, r2]
    	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <main+0x214>)
 8002412:	2226      	movs	r2, #38	; 0x26
 8002414:	2101      	movs	r1, #1
 8002416:	5499      	strb	r1, [r3, r2]
    	myLoRa.power					       = POWER_20db;				// default = 20db
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <main+0x214>)
 800241a:	222a      	movs	r2, #42	; 0x2a
 800241c:	21ff      	movs	r1, #255	; 0xff
 800241e:	5499      	strb	r1, [r3, r2]
    	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8002420:	4b66      	ldr	r3, [pc, #408]	; (80025bc <main+0x214>)
 8002422:	222b      	movs	r2, #43	; 0x2b
 8002424:	2178      	movs	r1, #120	; 0x78
 8002426:	5499      	strb	r1, [r3, r2]
    	myLoRa.preamble				       = 10;		  					// default = 8;
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <main+0x214>)
 800242a:	220a      	movs	r2, #10
 800242c:	851a      	strh	r2, [r3, #40]	; 0x28


    	teste=LoRa_init(&myLoRa);
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <main+0x214>)
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff fd36 	bl	8001ea2 <LoRa_init>
 8002436:	0003      	movs	r3, r0
 8002438:	001a      	movs	r2, r3
 800243a:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <main+0x21c>)
 800243c:	801a      	strh	r2, [r3, #0]

    	LoRa_startReceiving(&myLoRa);
 800243e:	4b5f      	ldr	r3, [pc, #380]	; (80025bc <main+0x214>)
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff fca7 	bl	8001d94 <LoRa_startReceiving>


  HAL_TIM_Base_Start_IT(&htim2);
 8002446:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <main+0x220>)
 8002448:	0018      	movs	r0, r3
 800244a:	f003 fe9b 	bl	8006184 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800244e:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <main+0x220>)
 8002450:	2100      	movs	r1, #0
 8002452:	0018      	movs	r0, r3
 8002454:	f003 ff58 	bl	8006308 <HAL_TIM_PWM_Start>

  PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 8002458:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <main+0x220>)
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff fde4 	bl	800202c <PWM_Set_DC>

  ADC_ChannelConfTypeDef sConfig = {0};
 8002464:	2330      	movs	r3, #48	; 0x30
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	0018      	movs	r0, r3
 800246a:	230c      	movs	r3, #12
 800246c:	001a      	movs	r2, r3
 800246e:	2100      	movs	r1, #0
 8002470:	f005 f816 	bl	80074a0 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002474:	4b55      	ldr	r3, [pc, #340]	; (80025cc <main+0x224>)
 8002476:	0018      	movs	r0, r3
 8002478:	f001 fc94 	bl	8003da4 <HAL_ADCEx_Calibration_Start>

  while (1)
  {

	  if(received_data[0] != 0){
 800247c:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <main+0x228>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <main+0x116>
		  lora_data = received_data[0];
 8002484:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <main+0x228>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <main+0x22c>)
 800248a:	601a      	str	r2, [r3, #0]

		  if(lora_data == 10 ){
 800248c:	4b51      	ldr	r3, [pc, #324]	; (80025d4 <main+0x22c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b0a      	cmp	r3, #10
 8002492:	d114      	bne.n	80024be <main+0x116>
			  flag = 1;
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <main+0x230>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 0);
 800249a:	4b50      	ldr	r3, [pc, #320]	; (80025dc <main+0x234>)
 800249c:	2200      	movs	r2, #0
 800249e:	2110      	movs	r1, #16
 80024a0:	0018      	movs	r0, r3
 80024a2:	f001 ff4b 	bl	800433c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 1);
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <main+0x234>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	2120      	movs	r1, #32
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 ff45 	bl	800433c <HAL_GPIO_WritePin>
			  cont ++;
 80024b2:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <main+0x238>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b49      	ldr	r3, [pc, #292]	; (80025e0 <main+0x238>)
 80024bc:	701a      	strb	r2, [r3, #0]
		  }
  	  }
	  HAL_Delay(100);
 80024be:	2064      	movs	r0, #100	; 0x64
 80024c0:	f000 fd4a 	bl	8002f58 <HAL_Delay>
	  packet_size = LoRa_receive(&myLoRa, received_data, 1);
 80024c4:	4942      	ldr	r1, [pc, #264]	; (80025d0 <main+0x228>)
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <main+0x214>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff fc6f 	bl	8001dae <LoRa_receive>
 80024d0:	0003      	movs	r3, r0
 80024d2:	001a      	movs	r2, r3
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <main+0x23c>)
 80024d6:	601a      	str	r2, [r3, #0]


	  sConfig.Channel = ADC_CHANNEL_9;
 80024d8:	2130      	movs	r1, #48	; 0x30
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <main+0x240>)
 80024de:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80024e0:	187a      	adds	r2, r7, r1
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <main+0x224>)
 80024e4:	0011      	movs	r1, r2
 80024e6:	0018      	movs	r0, r3
 80024e8:	f001 f97c 	bl	80037e4 <HAL_ADC_ConfigChannel>

	  e_analogica = 0;
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <main+0x244>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 250; i++){
 80024f2:	2300      	movs	r3, #0
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f6:	e015      	b.n	8002524 <main+0x17c>

		  HAL_ADC_Start(&hadc1);
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <main+0x224>)
 80024fa:	0018      	movs	r0, r3
 80024fc:	f001 f884 	bl	8003608 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <main+0x224>)
 8002502:	2164      	movs	r1, #100	; 0x64
 8002504:	0018      	movs	r0, r3
 8002506:	f001 f8cd 	bl	80036a4 <HAL_ADC_PollForConversion>
		  e_analogica += HAL_ADC_GetValue(&hadc1);
 800250a:	4b30      	ldr	r3, [pc, #192]	; (80025cc <main+0x224>)
 800250c:	0018      	movs	r0, r3
 800250e:	f001 f95d 	bl	80037cc <HAL_ADC_GetValue>
 8002512:	0002      	movs	r2, r0
 8002514:	4b35      	ldr	r3, [pc, #212]	; (80025ec <main+0x244>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	18d2      	adds	r2, r2, r3
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <main+0x244>)
 800251c:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 250; i++){
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	3301      	adds	r3, #1
 8002522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002526:	2bf9      	cmp	r3, #249	; 0xf9
 8002528:	dde6      	ble.n	80024f8 <main+0x150>

	  }

	  e_analogica /= 250;
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <main+0x244>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	21fa      	movs	r1, #250	; 0xfa
 8002530:	0018      	movs	r0, r3
 8002532:	f7fd fde7 	bl	8000104 <__udivsi3>
 8002536:	0003      	movs	r3, r0
 8002538:	001a      	movs	r2, r3
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <main+0x244>)
 800253c:	601a      	str	r2, [r3, #0]
	  ADmax = e_analogica;
 800253e:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <main+0x244>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <main+0x248>)
 8002544:	601a      	str	r2, [r3, #0]

	  tensao = calcTensao(e_analogica);
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <main+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	b29b      	uxth	r3, r3
 800254c:	0018      	movs	r0, r3
 800254e:	f7ff fe01 	bl	8002154 <calcTensao>
 8002552:	1c02      	adds	r2, r0, #0
 8002554:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <main+0x24c>)
 8002556:	601a      	str	r2, [r3, #0]


	  corrente = (0.027 * e_analogica) / 3500.0;
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <main+0x244>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0018      	movs	r0, r3
 800255e:	f7fe ffe5 	bl	800152c <__aeabi_ui2d>
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <main+0x250>)
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <main+0x254>)
 8002566:	f7fe fd45 	bl	8000ff4 <__aeabi_dmul>
 800256a:	0002      	movs	r2, r0
 800256c:	000b      	movs	r3, r1
 800256e:	0010      	movs	r0, r2
 8002570:	0019      	movs	r1, r3
 8002572:	2200      	movs	r2, #0
 8002574:	4b22      	ldr	r3, [pc, #136]	; (8002600 <main+0x258>)
 8002576:	f7fe fa55 	bl	8000a24 <__aeabi_ddiv>
 800257a:	0002      	movs	r2, r0
 800257c:	000b      	movs	r3, r1
 800257e:	0010      	movs	r0, r2
 8002580:	0019      	movs	r1, r3
 8002582:	f7fe fff9 	bl	8001578 <__aeabi_d2f>
 8002586:	1c02      	adds	r2, r0, #0
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <main+0x25c>)
 800258a:	601a      	str	r2, [r3, #0]
	  corrente *= 1000;
 800258c:	4b1d      	ldr	r3, [pc, #116]	; (8002604 <main+0x25c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	491d      	ldr	r1, [pc, #116]	; (8002608 <main+0x260>)
 8002592:	1c18      	adds	r0, r3, #0
 8002594:	f7fd ff44 	bl	8000420 <__aeabi_fmul>
 8002598:	1c03      	adds	r3, r0, #0
 800259a:	1c1a      	adds	r2, r3, #0
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <main+0x25c>)
 800259e:	601a      	str	r2, [r3, #0]

	  currente = corrente;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <main+0x25c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1c18      	adds	r0, r3, #0
 80025a6:	f7fd ff23 	bl	80003f0 <__aeabi_f2uiz>
 80025aa:	0002      	movs	r2, r0
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <main+0x264>)
 80025ae:	601a      	str	r2, [r3, #0]

	  converter_dados(lora_data);
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <main+0x22c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7ff fdf7 	bl	80021a8 <converter_dados>
	  if(received_data[0] != 0){
 80025ba:	e75f      	b.n	800247c <main+0xd4>
 80025bc:	2000028c 	.word	0x2000028c
 80025c0:	200001d8 	.word	0x200001d8
 80025c4:	20000150 	.word	0x20000150
 80025c8:	2000023c 	.word	0x2000023c
 80025cc:	2000003c 	.word	0x2000003c
 80025d0:	200000a0 	.word	0x200000a0
 80025d4:	20000288 	.word	0x20000288
 80025d8:	2000002d 	.word	0x2000002d
 80025dc:	50000800 	.word	0x50000800
 80025e0:	2000002c 	.word	0x2000002c
 80025e4:	20000028 	.word	0x20000028
 80025e8:	24000200 	.word	0x24000200
 80025ec:	20000034 	.word	0x20000034
 80025f0:	20000154 	.word	0x20000154
 80025f4:	20000038 	.word	0x20000038
 80025f8:	53f7ced9 	.word	0x53f7ced9
 80025fc:	3f9ba5e3 	.word	0x3f9ba5e3
 8002600:	40ab5800 	.word	0x40ab5800
 8002604:	200000cc 	.word	0x200000cc
 8002608:	447a0000 	.word	0x447a0000
 800260c:	20000030 	.word	0x20000030

08002610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b095      	sub	sp, #84	; 0x54
 8002614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002616:	2414      	movs	r4, #20
 8002618:	193b      	adds	r3, r7, r4
 800261a:	0018      	movs	r0, r3
 800261c:	233c      	movs	r3, #60	; 0x3c
 800261e:	001a      	movs	r2, r3
 8002620:	2100      	movs	r1, #0
 8002622:	f004 ff3d 	bl	80074a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	0018      	movs	r0, r3
 800262a:	2310      	movs	r3, #16
 800262c:	001a      	movs	r2, r3
 800262e:	2100      	movs	r1, #0
 8002630:	f004 ff36 	bl	80074a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	0018      	movs	r0, r3
 800263a:	f001 fed1 	bl	80043e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800263e:	193b      	adds	r3, r7, r4
 8002640:	2202      	movs	r2, #2
 8002642:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002644:	193b      	adds	r3, r7, r4
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	0052      	lsls	r2, r2, #1
 800264a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800264c:	0021      	movs	r1, r4
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2202      	movs	r2, #2
 800265e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002660:	187b      	adds	r3, r7, r1
 8002662:	2202      	movs	r2, #2
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002666:	187b      	adds	r3, r7, r1
 8002668:	2200      	movs	r2, #0
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800266c:	187b      	adds	r3, r7, r1
 800266e:	2208      	movs	r2, #8
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002672:	187b      	adds	r3, r7, r1
 8002674:	2280      	movs	r2, #128	; 0x80
 8002676:	0292      	lsls	r2, r2, #10
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800267a:	187b      	adds	r3, r7, r1
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0492      	lsls	r2, r2, #18
 8002680:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	0592      	lsls	r2, r2, #22
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800268a:	187b      	adds	r3, r7, r1
 800268c:	0018      	movs	r0, r3
 800268e:	f001 fee7 	bl	8004460 <HAL_RCC_OscConfig>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002696:	f000 fa25 	bl	8002ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2207      	movs	r2, #7
 800269e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	2202      	movs	r2, #2
 80026a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2102      	movs	r1, #2
 80026b6:	0018      	movs	r0, r3
 80026b8:	f002 fa38 	bl	8004b2c <HAL_RCC_ClockConfig>
 80026bc:	1e03      	subs	r3, r0, #0
 80026be:	d001      	beq.n	80026c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80026c0:	f000 fa10 	bl	8002ae4 <Error_Handler>
  }
}
 80026c4:	46c0      	nop			; (mov r8, r8)
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b015      	add	sp, #84	; 0x54
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	0018      	movs	r0, r3
 80026d6:	230c      	movs	r3, #12
 80026d8:	001a      	movs	r2, r3
 80026da:	2100      	movs	r1, #0
 80026dc:	f004 fee0 	bl	80074a0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <MX_ADC1_Init+0xcc>)
 80026e2:	4a2e      	ldr	r2, [pc, #184]	; (800279c <MX_ADC1_Init+0xd0>)
 80026e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <MX_ADC1_Init+0xcc>)
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	05d2      	lsls	r2, r2, #23
 80026ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <MX_ADC1_Init+0xcc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <MX_ADC1_Init+0xcc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80026fa:	4b27      	ldr	r3, [pc, #156]	; (8002798 <MX_ADC1_Init+0xcc>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002702:	2204      	movs	r2, #4
 8002704:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002708:	2200      	movs	r2, #0
 800270a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800270c:	4b22      	ldr	r3, [pc, #136]	; (8002798 <MX_ADC1_Init+0xcc>)
 800270e:	2200      	movs	r2, #0
 8002710:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002714:	2200      	movs	r2, #0
 8002716:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <MX_ADC1_Init+0xcc>)
 800271a:	2201      	movs	r2, #1
 800271c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800271e:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002720:	2220      	movs	r2, #32
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002728:	2200      	movs	r2, #0
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800272c:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_ADC1_Init+0xcc>)
 800272e:	2200      	movs	r2, #0
 8002730:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002734:	222c      	movs	r2, #44	; 0x2c
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800273a:	4b17      	ldr	r3, [pc, #92]	; (8002798 <MX_ADC1_Init+0xcc>)
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002742:	2206      	movs	r2, #6
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002746:	4b14      	ldr	r3, [pc, #80]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002748:	2206      	movs	r2, #6
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_ADC1_Init+0xcc>)
 800274e:	223c      	movs	r2, #60	; 0x3c
 8002750:	2100      	movs	r1, #0
 8002752:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002756:	2200      	movs	r2, #0
 8002758:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <MX_ADC1_Init+0xcc>)
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fd75 	bl	800324c <HAL_ADC_Init>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d001      	beq.n	800276a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002766:	f000 f9bd 	bl	8002ae4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <MX_ADC1_Init+0xd4>)
 800276e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277c:	1d3a      	adds	r2, r7, #4
 800277e:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_ADC1_Init+0xcc>)
 8002780:	0011      	movs	r1, r2
 8002782:	0018      	movs	r0, r3
 8002784:	f001 f82e 	bl	80037e4 <HAL_ADC_ConfigChannel>
 8002788:	1e03      	subs	r3, r0, #0
 800278a:	d001      	beq.n	8002790 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800278c:	f000 f9aa 	bl	8002ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b004      	add	sp, #16
 8002796:	bd80      	pop	{r7, pc}
 8002798:	2000003c 	.word	0x2000003c
 800279c:	40012400 	.word	0x40012400
 80027a0:	24000200 	.word	0x24000200

080027a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_SPI1_Init+0x74>)
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <MX_SPI1_Init+0x78>)
 80027ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_SPI1_Init+0x74>)
 80027b0:	2282      	movs	r2, #130	; 0x82
 80027b2:	0052      	lsls	r2, r2, #1
 80027b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_SPI1_Init+0x74>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <MX_SPI1_Init+0x74>)
 80027be:	22e0      	movs	r2, #224	; 0xe0
 80027c0:	00d2      	lsls	r2, r2, #3
 80027c2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <MX_SPI1_Init+0x74>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <MX_SPI1_Init+0x74>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_SPI1_Init+0x74>)
 80027d2:	2280      	movs	r2, #128	; 0x80
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <MX_SPI1_Init+0x74>)
 80027da:	2230      	movs	r2, #48	; 0x30
 80027dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_SPI1_Init+0x74>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_SPI1_Init+0x74>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_SPI1_Init+0x74>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_SPI1_Init+0x74>)
 80027f2:	2207      	movs	r2, #7
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_SPI1_Init+0x74>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_SPI1_Init+0x74>)
 80027fe:	2208      	movs	r2, #8
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002802:	4b05      	ldr	r3, [pc, #20]	; (8002818 <MX_SPI1_Init+0x74>)
 8002804:	0018      	movs	r0, r3
 8002806:	f002 fd57 	bl	80052b8 <HAL_SPI_Init>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d001      	beq.n	8002812 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800280e:	f000 f969 	bl	8002ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200001d8 	.word	0x200001d8
 800281c:	40013000 	.word	0x40013000

08002820 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002826:	2328      	movs	r3, #40	; 0x28
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	0018      	movs	r0, r3
 800282c:	2310      	movs	r3, #16
 800282e:	001a      	movs	r2, r3
 8002830:	2100      	movs	r1, #0
 8002832:	f004 fe35 	bl	80074a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002836:	231c      	movs	r3, #28
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	0018      	movs	r0, r3
 800283c:	230c      	movs	r3, #12
 800283e:	001a      	movs	r2, r3
 8002840:	2100      	movs	r1, #0
 8002842:	f004 fe2d 	bl	80074a0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002846:	003b      	movs	r3, r7
 8002848:	0018      	movs	r0, r3
 800284a:	231c      	movs	r3, #28
 800284c:	001a      	movs	r2, r3
 800284e:	2100      	movs	r1, #0
 8002850:	f004 fe26 	bl	80074a0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <MX_TIM2_Init+0x10c>)
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	05d2      	lsls	r2, r2, #23
 800285a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <MX_TIM2_Init+0x10c>)
 800285e:	4a34      	ldr	r2, [pc, #208]	; (8002930 <MX_TIM2_Init+0x110>)
 8002860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b32      	ldr	r3, [pc, #200]	; (800292c <MX_TIM2_Init+0x10c>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <MX_TIM2_Init+0x10c>)
 800286a:	4a32      	ldr	r2, [pc, #200]	; (8002934 <MX_TIM2_Init+0x114>)
 800286c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <MX_TIM2_Init+0x10c>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <MX_TIM2_Init+0x10c>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800287a:	4b2c      	ldr	r3, [pc, #176]	; (800292c <MX_TIM2_Init+0x10c>)
 800287c:	0018      	movs	r0, r3
 800287e:	f003 fc29 	bl	80060d4 <HAL_TIM_Base_Init>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002886:	f000 f92d 	bl	8002ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288a:	2128      	movs	r1, #40	; 0x28
 800288c:	187b      	adds	r3, r7, r1
 800288e:	2280      	movs	r2, #128	; 0x80
 8002890:	0152      	lsls	r2, r2, #5
 8002892:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002894:	187a      	adds	r2, r7, r1
 8002896:	4b25      	ldr	r3, [pc, #148]	; (800292c <MX_TIM2_Init+0x10c>)
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f004 f84c 	bl	8006938 <HAL_TIM_ConfigClockSource>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80028a4:	f000 f91e 	bl	8002ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <MX_TIM2_Init+0x10c>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f003 fccc 	bl	8006248 <HAL_TIM_PWM_Init>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80028b4:	f000 f916 	bl	8002ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b8:	211c      	movs	r1, #28
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2200      	movs	r2, #0
 80028c4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c6:	187a      	adds	r2, r7, r1
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <MX_TIM2_Init+0x10c>)
 80028ca:	0011      	movs	r1, r2
 80028cc:	0018      	movs	r0, r3
 80028ce:	f004 fd35 	bl	800733c <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80028d6:	f000 f905 	bl	8002ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028da:	003b      	movs	r3, r7
 80028dc:	2260      	movs	r2, #96	; 0x60
 80028de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028e0:	003b      	movs	r3, r7
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e6:	003b      	movs	r3, r7
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ec:	003b      	movs	r3, r7
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f2:	0039      	movs	r1, r7
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <MX_TIM2_Init+0x10c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	0018      	movs	r0, r3
 80028fa:	f003 ff27 	bl	800674c <HAL_TIM_PWM_ConfigChannel>
 80028fe:	1e03      	subs	r3, r0, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002902:	f000 f8ef 	bl	8002ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002906:	0039      	movs	r1, r7
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <MX_TIM2_Init+0x10c>)
 800290a:	2204      	movs	r2, #4
 800290c:	0018      	movs	r0, r3
 800290e:	f003 ff1d 	bl	800674c <HAL_TIM_PWM_ConfigChannel>
 8002912:	1e03      	subs	r3, r0, #0
 8002914:	d001      	beq.n	800291a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8002916:	f000 f8e5 	bl	8002ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <MX_TIM2_Init+0x10c>)
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f9d9 	bl	8002cd4 <HAL_TIM_MspPostInit>

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b00e      	add	sp, #56	; 0x38
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	2000023c 	.word	0x2000023c
 8002930:	0000f9ff 	.word	0x0000f9ff
 8002934:	000003e7 	.word	0x000003e7

08002938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293e:	240c      	movs	r4, #12
 8002940:	193b      	adds	r3, r7, r4
 8002942:	0018      	movs	r0, r3
 8002944:	2314      	movs	r3, #20
 8002946:	001a      	movs	r2, r3
 8002948:	2100      	movs	r1, #0
 800294a:	f004 fda9 	bl	80074a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002952:	4b61      	ldr	r3, [pc, #388]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002954:	2104      	movs	r1, #4
 8002956:	430a      	orrs	r2, r1
 8002958:	635a      	str	r2, [r3, #52]	; 0x34
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 800295c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	4b5c      	ldr	r3, [pc, #368]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 800296c:	2101      	movs	r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	635a      	str	r2, [r3, #52]	; 0x34
 8002972:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	2201      	movs	r2, #1
 8002978:	4013      	ands	r3, r2
 800297a:	607b      	str	r3, [r7, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 8002984:	2102      	movs	r1, #2
 8002986:	430a      	orrs	r2, r1
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
 800298a:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <MX_GPIO_Init+0x1a0>)
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	2202      	movs	r2, #2
 8002990:	4013      	ands	r3, r2
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEI_Pin|LDI_Pin|Vermelho_Pin|LES_Pin, GPIO_PIN_RESET);
 8002996:	23e1      	movs	r3, #225	; 0xe1
 8002998:	015b      	lsls	r3, r3, #5
 800299a:	4850      	ldr	r0, [pc, #320]	; (8002adc <MX_GPIO_Init+0x1a4>)
 800299c:	2200      	movs	r2, #0
 800299e:	0019      	movs	r1, r3
 80029a0:	f001 fccc 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029a4:	23a0      	movs	r3, #160	; 0xa0
 80029a6:	05db      	lsls	r3, r3, #23
 80029a8:	2200      	movs	r2, #0
 80029aa:	2120      	movs	r1, #32
 80029ac:	0018      	movs	r0, r3
 80029ae:	f001 fcc5 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 80029b2:	23a0      	movs	r3, #160	; 0xa0
 80029b4:	05db      	lsls	r3, r3, #23
 80029b6:	2201      	movs	r2, #1
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0018      	movs	r0, r3
 80029bc:	f001 fcbe 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, GPIO_PIN_SET);
 80029c0:	4b46      	ldr	r3, [pc, #280]	; (8002adc <MX_GPIO_Init+0x1a4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	2110      	movs	r1, #16
 80029c6:	0018      	movs	r0, r3
 80029c8:	f001 fcb8 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, GPIO_PIN_RESET);
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4843      	ldr	r0, [pc, #268]	; (8002ae0 <MX_GPIO_Init+0x1a8>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	0019      	movs	r1, r3
 80029d6:	f001 fcb1 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEI_Pin LDI_Pin LES_Pin */
  GPIO_InitStruct.Pin = LEI_Pin|LDI_Pin|LES_Pin;
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	22e0      	movs	r2, #224	; 0xe0
 80029de:	0152      	lsls	r2, r2, #5
 80029e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	2201      	movs	r2, #1
 80029e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	193b      	adds	r3, r7, r4
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	2202      	movs	r2, #2
 80029f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	4a39      	ldr	r2, [pc, #228]	; (8002adc <MX_GPIO_Init+0x1a4>)
 80029f8:	0019      	movs	r1, r3
 80029fa:	0010      	movs	r0, r2
 80029fc:	f001 fb32 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a00:	0021      	movs	r1, r4
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	0192      	lsls	r2, r2, #6
 8002a08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2284      	movs	r2, #132	; 0x84
 8002a0e:	0392      	lsls	r2, r2, #14
 8002a10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	000c      	movs	r4, r1
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	4a2f      	ldr	r2, [pc, #188]	; (8002adc <MX_GPIO_Init+0x1a4>)
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f001 fb1f 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2220      	movs	r2, #32
 8002a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2201      	movs	r2, #1
 8002a30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a3e:	193a      	adds	r2, r7, r4
 8002a40:	23a0      	movs	r3, #160	; 0xa0
 8002a42:	05db      	lsls	r3, r3, #23
 8002a44:	0011      	movs	r1, r2
 8002a46:	0018      	movs	r0, r3
 8002a48:	f001 fb0c 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a52:	193b      	adds	r3, r7, r4
 8002a54:	2201      	movs	r2, #1
 8002a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	193b      	adds	r3, r7, r4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a5e:	193b      	adds	r3, r7, r4
 8002a60:	2202      	movs	r2, #2
 8002a62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002a64:	193a      	adds	r2, r7, r4
 8002a66:	23a0      	movs	r3, #160	; 0xa0
 8002a68:	05db      	lsls	r3, r3, #23
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f001 faf9 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pins : Verde_Pin Vermelho_Pin */
  GPIO_InitStruct.Pin = Verde_Pin|Vermelho_Pin;
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2230      	movs	r2, #48	; 0x30
 8002a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	4a13      	ldr	r2, [pc, #76]	; (8002adc <MX_GPIO_Init+0x1a4>)
 8002a8e:	0019      	movs	r1, r3
 8002a90:	0010      	movs	r0, r2
 8002a92:	f001 fae7 	bl	8004064 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDS_Pin */
  GPIO_InitStruct.Pin = LDS_Pin;
 8002a96:	0021      	movs	r1, r4
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	0052      	lsls	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aac:	187b      	adds	r3, r7, r1
 8002aae:	2202      	movs	r2, #2
 8002ab0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDS_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <MX_GPIO_Init+0x1a8>)
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f001 fad3 	bl	8004064 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2007      	movs	r0, #7
 8002ac4:	f001 fa9c 	bl	8004000 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ac8:	2007      	movs	r0, #7
 8002aca:	f001 faae 	bl	800402a <HAL_NVIC_EnableIRQ>

}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b009      	add	sp, #36	; 0x24
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	50000800 	.word	0x50000800
 8002ae0:	50000400 	.word	0x50000400

08002ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae8:	b672      	cpsid	i
}
 8002aea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aec:	e7fe      	b.n	8002aec <Error_Handler+0x8>
	...

08002af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_MspInit+0x4c>)
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_MspInit+0x4c>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	430a      	orrs	r2, r1
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2201      	movs	r2, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	0549      	lsls	r1, r1, #21
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b1c:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <HAL_MspInit+0x4c>)
 8002b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	055b      	lsls	r3, r3, #21
 8002b24:	4013      	ands	r3, r2
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 fa36 	bl	8002fa0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000

08002b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b09d      	sub	sp, #116	; 0x74
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	235c      	movs	r3, #92	; 0x5c
 8002b4a:	18fb      	adds	r3, r7, r3
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	2314      	movs	r3, #20
 8002b50:	001a      	movs	r2, r3
 8002b52:	2100      	movs	r1, #0
 8002b54:	f004 fca4 	bl	80074a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b58:	2410      	movs	r4, #16
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	234c      	movs	r3, #76	; 0x4c
 8002b60:	001a      	movs	r2, r3
 8002b62:	2100      	movs	r1, #0
 8002b64:	f004 fc9c 	bl	80074a0 <memset>
  if(hadc->Instance==ADC1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_ADC_MspInit+0xac>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d138      	bne.n	8002be4 <HAL_ADC_MspInit+0xa4>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	01d2      	lsls	r2, r2, #7
 8002b78:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b80:	193b      	adds	r3, r7, r4
 8002b82:	0018      	movs	r0, r3
 8002b84:	f002 f95c 	bl	8004e40 <HAL_RCCEx_PeriphCLKConfig>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002b8c:	f7ff ffaa 	bl	8002ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002b92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	0349      	lsls	r1, r1, #13
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	035b      	lsls	r3, r3, #13
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bac:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002bb2:	2102      	movs	r1, #2
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <HAL_ADC_MspInit+0xb0>)
 8002bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002bc4:	215c      	movs	r1, #92	; 0x5c
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <HAL_ADC_MspInit+0xb4>)
 8002bdc:	0019      	movs	r1, r3
 8002bde:	0010      	movs	r0, r2
 8002be0:	f001 fa40 	bl	8004064 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002be4:	46c0      	nop			; (mov r8, r8)
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b01d      	add	sp, #116	; 0x74
 8002bea:	bd90      	pop	{r4, r7, pc}
 8002bec:	40012400 	.word	0x40012400
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	50000400 	.word	0x50000400

08002bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	b08b      	sub	sp, #44	; 0x2c
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	2414      	movs	r4, #20
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	0018      	movs	r0, r3
 8002c06:	2314      	movs	r3, #20
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	f004 fc48 	bl	80074a0 <memset>
  if(hspi->Instance==SPI1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_SPI_MspInit+0x8c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d130      	bne.n	8002c7c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_SPI_MspInit+0x90>)
 8002c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1e:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_SPI_MspInit+0x90>)
 8002c20:	2180      	movs	r1, #128	; 0x80
 8002c22:	0149      	lsls	r1, r1, #5
 8002c24:	430a      	orrs	r2, r1
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_SPI_MspInit+0x90>)
 8002c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	015b      	lsls	r3, r3, #5
 8002c30:	4013      	ands	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_SPI_MspInit+0x90>)
 8002c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_SPI_MspInit+0x90>)
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_SPI_MspInit+0x90>)
 8002c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8002c4e:	0021      	movs	r1, r4
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2246      	movs	r2, #70	; 0x46
 8002c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2202      	movs	r2, #2
 8002c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	187a      	adds	r2, r7, r1
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	0011      	movs	r1, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	f001 f9f4 	bl	8004064 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b00b      	add	sp, #44	; 0x2c
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	40013000 	.word	0x40013000
 8002c88:	40021000 	.word	0x40021000

08002c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	05db      	lsls	r3, r3, #23
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d113      	bne.n	8002cc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_TIM_Base_MspInit+0x44>)
 8002ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_TIM_Base_MspInit+0x44>)
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cac:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_TIM_Base_MspInit+0x44>)
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	200f      	movs	r0, #15
 8002cbe:	f001 f99f 	bl	8004000 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cc2:	200f      	movs	r0, #15
 8002cc4:	f001 f9b1 	bl	800402a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b08b      	sub	sp, #44	; 0x2c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cdc:	2414      	movs	r4, #20
 8002cde:	193b      	adds	r3, r7, r4
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	2314      	movs	r3, #20
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f004 fbda 	bl	80074a0 <memset>
  if(htim->Instance==TIM2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d143      	bne.n	8002d80 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf8:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_TIM_MspPostInit+0xb4>)
 8002cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfc:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_TIM_MspPostInit+0xb4>)
 8002cfe:	2101      	movs	r1, #1
 8002d00:	430a      	orrs	r2, r1
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34
 8002d04:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_TIM_MspPostInit+0xb4>)
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	2201      	movs	r2, #1
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_TIM_MspPostInit+0xb4>)
 8002d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d14:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <HAL_TIM_MspPostInit+0xb4>)
 8002d16:	2102      	movs	r1, #2
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_TIM_MspPostInit+0xb4>)
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	2202      	movs	r2, #2
 8002d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	2202      	movs	r2, #2
 8002d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	193a      	adds	r2, r7, r4
 8002d48:	23a0      	movs	r3, #160	; 0xa0
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f001 f988 	bl	8004064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d54:	0021      	movs	r1, r4
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	2208      	movs	r2, #8
 8002d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2202      	movs	r2, #2
 8002d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2202      	movs	r2, #2
 8002d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	4a05      	ldr	r2, [pc, #20]	; (8002d8c <HAL_TIM_MspPostInit+0xb8>)
 8002d78:	0019      	movs	r1, r3
 8002d7a:	0010      	movs	r0, r2
 8002d7c:	f001 f972 	bl	8004064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b00b      	add	sp, #44	; 0x2c
 8002d86:	bd90      	pop	{r4, r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	50000400 	.word	0x50000400

08002d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d94:	e7fe      	b.n	8002d94 <NMI_Handler+0x4>

08002d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9a:	e7fe      	b.n	8002d9a <HardFault_Handler+0x4>

08002d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db4:	f000 f8b4 	bl	8002f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f001 fad6 	bl	8004378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <TIM2_IRQHandler+0x14>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f003 fb84 	bl	80064e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	2000023c 	.word	0x2000023c

08002dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dfc:	f7ff fff6 	bl	8002dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e00:	480c      	ldr	r0, [pc, #48]	; (8002e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e02:	490d      	ldr	r1, [pc, #52]	; (8002e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e04:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <LoopForever+0xe>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e08:	e002      	b.n	8002e10 <LoopCopyDataInit>

08002e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e0e:	3304      	adds	r3, #4

08002e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e14:	d3f9      	bcc.n	8002e0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e16:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e18:	4c0a      	ldr	r4, [pc, #40]	; (8002e44 <LoopForever+0x16>)
  movs r3, #0
 8002e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e1c:	e001      	b.n	8002e22 <LoopFillZerobss>

08002e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e20:	3204      	adds	r2, #4

08002e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e24:	d3fb      	bcc.n	8002e1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e26:	f004 fb17 	bl	8007458 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e2a:	f7ff fabd 	bl	80023a8 <main>

08002e2e <LoopForever>:

LoopForever:
  b LoopForever
 8002e2e:	e7fe      	b.n	8002e2e <LoopForever>
  ldr   r0, =_estack
 8002e30:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002e3c:	08007684 	.word	0x08007684
  ldr r2, =_sbss
 8002e40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002e44:	200002bc 	.word	0x200002bc

08002e48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e48:	e7fe      	b.n	8002e48 <ADC1_COMP_IRQHandler>
	...

08002e4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_Init+0x3c>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_Init+0x3c>)
 8002e5e:	2180      	movs	r1, #128	; 0x80
 8002e60:	0049      	lsls	r1, r1, #1
 8002e62:	430a      	orrs	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e66:	2003      	movs	r0, #3
 8002e68:	f000 f810 	bl	8002e8c <HAL_InitTick>
 8002e6c:	1e03      	subs	r3, r0, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e70:	1dfb      	adds	r3, r7, #7
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e001      	b.n	8002e7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e78:	f7ff fe3a 	bl	8002af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	781b      	ldrb	r3, [r3, #0]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40022000 	.word	0x40022000

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e94:	230f      	movs	r3, #15
 8002e96:	18fb      	adds	r3, r7, r3
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_InitTick+0x88>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02b      	beq.n	8002efc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_InitTick+0x8c>)
 8002ea6:	681c      	ldr	r4, [r3, #0]
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_InitTick+0x88>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	0019      	movs	r1, r3
 8002eae:	23fa      	movs	r3, #250	; 0xfa
 8002eb0:	0098      	lsls	r0, r3, #2
 8002eb2:	f7fd f927 	bl	8000104 <__udivsi3>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	0019      	movs	r1, r3
 8002eba:	0020      	movs	r0, r4
 8002ebc:	f7fd f922 	bl	8000104 <__udivsi3>
 8002ec0:	0003      	movs	r3, r0
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f001 f8c1 	bl	800404a <HAL_SYSTICK_Config>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d112      	bne.n	8002ef2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d80a      	bhi.n	8002ee8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	0018      	movs	r0, r3
 8002edc:	f001 f890 	bl	8004000 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <HAL_InitTick+0x90>)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e00d      	b.n	8002f04 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e008      	b.n	8002f04 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e003      	b.n	8002f04 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002efc:	230f      	movs	r3, #15
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b005      	add	sp, #20
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	20000008 	.word	0x20000008
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_IncTick+0x1c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	001a      	movs	r2, r3
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_IncTick+0x20>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	18d2      	adds	r2, r2, r3
 8002f30:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_IncTick+0x20>)
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	200002b8 	.word	0x200002b8

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_GetTick+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200002b8 	.word	0x200002b8

08002f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f60:	f7ff fff0 	bl	8002f44 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_Delay+0x44>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	001a      	movs	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	189b      	adds	r3, r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	f7ff ffe0 	bl	8002f44 <HAL_GetTick>
 8002f84:	0002      	movs	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d8f7      	bhi.n	8002f80 <HAL_Delay+0x28>
  {
  }
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b004      	add	sp, #16
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a06      	ldr	r2, [pc, #24]	; (8002fc8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b002      	add	sp, #8
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	40010000 	.word	0x40010000
 8002fc8:	fffff9ff 	.word	0xfffff9ff

08002fcc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002fdc:	401a      	ands	r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	601a      	str	r2, [r3, #0]
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b002      	add	sp, #8
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	fe3fffff 	.word	0xfe3fffff

08002ff4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	23e0      	movs	r3, #224	; 0xe0
 8003002:	045b      	lsls	r3, r3, #17
 8003004:	4013      	ands	r3, r2
}
 8003006:	0018      	movs	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	b002      	add	sp, #8
 800300c:	bd80      	pop	{r7, pc}

0800300e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	2104      	movs	r1, #4
 8003022:	400a      	ands	r2, r1
 8003024:	2107      	movs	r1, #7
 8003026:	4091      	lsls	r1, r2
 8003028:	000a      	movs	r2, r1
 800302a:	43d2      	mvns	r2, r2
 800302c:	401a      	ands	r2, r3
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2104      	movs	r1, #4
 8003032:	400b      	ands	r3, r1
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4099      	lsls	r1, r3
 8003038:	000b      	movs	r3, r1
 800303a:	431a      	orrs	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}

08003048 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	23c0      	movs	r3, #192	; 0xc0
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	4013      	ands	r3, r2
 800305a:	d101      	bne.n	8003060 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003060:	2300      	movs	r3, #0
}
 8003062:	0018      	movs	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}

0800306a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	211f      	movs	r1, #31
 800307e:	400a      	ands	r2, r1
 8003080:	210f      	movs	r1, #15
 8003082:	4091      	lsls	r1, r2
 8003084:	000a      	movs	r2, r1
 8003086:	43d2      	mvns	r2, r2
 8003088:	401a      	ands	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0e9b      	lsrs	r3, r3, #26
 800308e:	210f      	movs	r1, #15
 8003090:	4019      	ands	r1, r3
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	201f      	movs	r0, #31
 8003096:	4003      	ands	r3, r0
 8003098:	4099      	lsls	r1, r3
 800309a:	000b      	movs	r3, r1
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}

080030aa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	035b      	lsls	r3, r3, #13
 80030bc:	0b5b      	lsrs	r3, r3, #13
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	0352      	lsls	r2, r2, #13
 80030de:	0b52      	lsrs	r2, r2, #13
 80030e0:	43d2      	mvns	r2, r2
 80030e2:	401a      	ands	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	0212      	lsls	r2, r2, #8
 8003104:	43d2      	mvns	r2, r2
 8003106:	401a      	ands	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	400b      	ands	r3, r1
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003112:	400b      	ands	r3, r1
 8003114:	431a      	orrs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	07ffff00 	.word	0x07ffff00

08003128 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	4a05      	ldr	r2, [pc, #20]	; (800314c <LL_ADC_EnableInternalRegulator+0x24>)
 8003136:	4013      	ands	r3, r2
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0552      	lsls	r2, r2, #21
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	6fffffe8 	.word	0x6fffffe8

08003150 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	055b      	lsls	r3, r3, #21
 8003160:	401a      	ands	r2, r3
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	055b      	lsls	r3, r3, #21
 8003166:	429a      	cmp	r2, r3
 8003168:	d101      	bne.n	800316e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800316e:	2300      	movs	r3, #0
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}

08003178 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <LL_ADC_Enable+0x20>)
 8003186:	4013      	ands	r3, r2
 8003188:	2201      	movs	r2, #1
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}
 8003198:	7fffffe8 	.word	0x7fffffe8

0800319c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <LL_ADC_Disable+0x20>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	2202      	movs	r2, #2
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	7fffffe8 	.word	0x7fffffe8

080031c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_IsEnabled+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_IsEnabled+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b002      	add	sp, #8
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2202      	movs	r2, #2
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d101      	bne.n	80031fa <LL_ADC_IsDisableOngoing+0x18>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <LL_ADC_IsDisableOngoing+0x1a>
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	0018      	movs	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}

08003204 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4a04      	ldr	r2, [pc, #16]	; (8003224 <LL_ADC_REG_StartConversion+0x20>)
 8003212:	4013      	ands	r3, r2
 8003214:	2204      	movs	r2, #4
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}
 8003224:	7fffffe8 	.word	0x7fffffe8

08003228 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2204      	movs	r2, #4
 8003236:	4013      	ands	r3, r2
 8003238:	2b04      	cmp	r3, #4
 800323a:	d101      	bne.n	8003240 <LL_ADC_REG_IsConversionOngoing+0x18>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003240:	2300      	movs	r3, #0
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003264:	2300      	movs	r3, #0
 8003266:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e1b1      	b.n	80035d6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff fc5f 	bl	8002b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2254      	movs	r2, #84	; 0x54
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff ff5b 	bl	8003150 <LL_ADC_IsInternalRegulatorEnabled>
 800329a:	1e03      	subs	r3, r0, #0
 800329c:	d115      	bne.n	80032ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff ff40 	bl	8003128 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a8:	4bcd      	ldr	r3, [pc, #820]	; (80035e0 <HAL_ADC_Init+0x394>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	49cd      	ldr	r1, [pc, #820]	; (80035e4 <HAL_ADC_Init+0x398>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7fc ff28 	bl	8000104 <__udivsi3>
 80032b4:	0003      	movs	r3, r0
 80032b6:	3301      	adds	r3, #1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032bc:	e002      	b.n	80032c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f9      	bne.n	80032be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7ff ff3e 	bl	8003150 <LL_ADC_IsInternalRegulatorEnabled>
 80032d4:	1e03      	subs	r3, r0, #0
 80032d6:	d10f      	bne.n	80032f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	2210      	movs	r2, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e8:	2201      	movs	r2, #1
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f0:	231f      	movs	r3, #31
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7ff ff93 	bl	8003228 <LL_ADC_REG_IsConversionOngoing>
 8003302:	0003      	movs	r3, r0
 8003304:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	2210      	movs	r2, #16
 800330c:	4013      	ands	r3, r2
 800330e:	d000      	beq.n	8003312 <HAL_ADC_Init+0xc6>
 8003310:	e154      	b.n	80035bc <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d000      	beq.n	800331a <HAL_ADC_Init+0xce>
 8003318:	e150      	b.n	80035bc <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	4ab2      	ldr	r2, [pc, #712]	; (80035e8 <HAL_ADC_Init+0x39c>)
 8003320:	4013      	ands	r3, r2
 8003322:	2202      	movs	r2, #2
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0018      	movs	r0, r3
 8003330:	f7ff ff46 	bl	80031c0 <LL_ADC_IsEnabled>
 8003334:	1e03      	subs	r3, r0, #0
 8003336:	d156      	bne.n	80033e6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2218      	movs	r2, #24
 8003340:	4393      	bics	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	0f9b      	lsrs	r3, r3, #30
 8003356:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800335c:	4313      	orrs	r3, r2
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	; 0x3c
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d111      	bne.n	8003392 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	0f9b      	lsrs	r3, r3, #30
 8003374:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800337a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003380:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003386:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	2201      	movs	r2, #1
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	4a94      	ldr	r2, [pc, #592]	; (80035ec <HAL_ADC_Init+0x3a0>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	23c0      	movs	r3, #192	; 0xc0
 80033ae:	061b      	lsls	r3, r3, #24
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d018      	beq.n	80033e6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	05db      	lsls	r3, r3, #23
 80033bc:	429a      	cmp	r2, r3
 80033be:	d012      	beq.n	80033e6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	061b      	lsls	r3, r3, #24
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d00c      	beq.n	80033e6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80033cc:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_ADC_Init+0x3a4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a88      	ldr	r2, [pc, #544]	; (80035f4 <HAL_ADC_Init+0x3a8>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	23f0      	movs	r3, #240	; 0xf0
 80033dc:	039b      	lsls	r3, r3, #14
 80033de:	401a      	ands	r2, r3
 80033e0:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_ADC_Init+0x3a4>)
 80033e2:	430a      	orrs	r2, r1
 80033e4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7e1b      	ldrb	r3, [r3, #24]
 80033ea:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7e5b      	ldrb	r3, [r3, #25]
 80033f0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7e9b      	ldrb	r3, [r3, #26]
 80033f8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_ADC_Init+0x1be>
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	e000      	b.n	800340c <HAL_ADC_Init+0x1c0>
 800340a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800340c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003412:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	da04      	bge.n	8003426 <HAL_ADC_Init+0x1da>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	e001      	b.n	800342a <HAL_ADC_Init+0x1de>
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800342a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	5c5b      	ldrb	r3, [r3, r1]
 8003432:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003434:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	5c9b      	ldrb	r3, [r3, r2]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d115      	bne.n	8003472 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7e9b      	ldrb	r3, [r3, #26]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	0252      	lsls	r2, r2, #9
 8003454:	4313      	orrs	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
 8003458:	e00b      	b.n	8003472 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345e:	2220      	movs	r2, #32
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346a:	2201      	movs	r2, #1
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347e:	23e0      	movs	r3, #224	; 0xe0
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003488:	4313      	orrs	r3, r2
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_ADC_Init+0x3ac>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4a53      	ldr	r2, [pc, #332]	; (80035fc <HAL_ADC_Init+0x3b0>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	001a      	movs	r2, r3
 80034c6:	2100      	movs	r1, #0
 80034c8:	f7ff fda1 	bl	800300e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	494a      	ldr	r1, [pc, #296]	; (8003600 <HAL_ADC_Init+0x3b4>)
 80034d6:	001a      	movs	r2, r3
 80034d8:	f7ff fd99 	bl	800300e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2110      	movs	r1, #16
 80034f0:	4249      	negs	r1, r1
 80034f2:	430a      	orrs	r2, r1
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
 80034f6:	e03a      	b.n	800356e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	039b      	lsls	r3, r3, #14
 8003500:	429a      	cmp	r2, r3
 8003502:	d134      	bne.n	800356e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	e00c      	b.n	8003524 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	40da      	lsrs	r2, r3
 8003514:	0013      	movs	r3, r2
 8003516:	220f      	movs	r2, #15
 8003518:	4013      	ands	r3, r2
 800351a:	2b0f      	cmp	r3, #15
 800351c:	d006      	beq.n	800352c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3301      	adds	r3, #1
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	2b07      	cmp	r3, #7
 8003528:	d9ef      	bls.n	800350a <HAL_ADC_Init+0x2be>
 800352a:	e000      	b.n	800352e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 800352c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d109      	bne.n	8003548 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2110      	movs	r1, #16
 8003540:	4249      	negs	r1, r1
 8003542:	430a      	orrs	r2, r1
 8003544:	629a      	str	r2, [r3, #40]	; 0x28
 8003546:	e012      	b.n	800356e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	3b01      	subs	r3, #1
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	221c      	movs	r2, #28
 8003558:	4013      	ands	r3, r2
 800355a:	2210      	movs	r2, #16
 800355c:	4252      	negs	r2, r2
 800355e:	409a      	lsls	r2, r3
 8003560:	0011      	movs	r1, r2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_ADC_Init+0x3b8>)
 8003576:	4013      	ands	r3, r2
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	429a      	cmp	r2, r3
 800357c:	d10b      	bne.n	8003596 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	2203      	movs	r2, #3
 800358a:	4393      	bics	r3, r2
 800358c:	2201      	movs	r2, #1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003594:	e01c      	b.n	80035d0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	2212      	movs	r2, #18
 800359c:	4393      	bics	r3, r2
 800359e:	2210      	movs	r2, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2201      	movs	r2, #1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80035b2:	231f      	movs	r3, #31
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2201      	movs	r2, #1
 80035b8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035ba:	e009      	b.n	80035d0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	2210      	movs	r2, #16
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035c8:	231f      	movs	r3, #31
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	781b      	ldrb	r3, [r3, #0]
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b008      	add	sp, #32
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	20000000 	.word	0x20000000
 80035e4:	00030d40 	.word	0x00030d40
 80035e8:	fffffefd 	.word	0xfffffefd
 80035ec:	1ffffc02 	.word	0x1ffffc02
 80035f0:	40012708 	.word	0x40012708
 80035f4:	ffc3ffff 	.word	0xffc3ffff
 80035f8:	fffe0219 	.word	0xfffe0219
 80035fc:	dffffc02 	.word	0xdffffc02
 8003600:	07ffff04 	.word	0x07ffff04
 8003604:	833fffe7 	.word	0x833fffe7

08003608 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003608:	b5b0      	push	{r4, r5, r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	0018      	movs	r0, r3
 8003616:	f7ff fe07 	bl	8003228 <LL_ADC_REG_IsConversionOngoing>
 800361a:	1e03      	subs	r3, r0, #0
 800361c:	d135      	bne.n	800368a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2254      	movs	r2, #84	; 0x54
 8003622:	5c9b      	ldrb	r3, [r3, r2]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_ADC_Start+0x24>
 8003628:	2302      	movs	r3, #2
 800362a:	e035      	b.n	8003698 <HAL_ADC_Start+0x90>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2254      	movs	r2, #84	; 0x54
 8003630:	2101      	movs	r1, #1
 8003632:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003634:	250f      	movs	r5, #15
 8003636:	197c      	adds	r4, r7, r5
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f000 faaa 	bl	8003b94 <ADC_Enable>
 8003640:	0003      	movs	r3, r0
 8003642:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003644:	197b      	adds	r3, r7, r5
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d119      	bne.n	8003680 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_ADC_Start+0x98>)
 8003652:	4013      	ands	r3, r2
 8003654:	2280      	movs	r2, #128	; 0x80
 8003656:	0052      	lsls	r2, r2, #1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	221c      	movs	r2, #28
 800366a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2254      	movs	r2, #84	; 0x54
 8003670:	2100      	movs	r1, #0
 8003672:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fdc3 	bl	8003204 <LL_ADC_REG_StartConversion>
 800367e:	e008      	b.n	8003692 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2254      	movs	r2, #84	; 0x54
 8003684:	2100      	movs	r1, #0
 8003686:	5499      	strb	r1, [r3, r2]
 8003688:	e003      	b.n	8003692 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003692:	230f      	movs	r3, #15
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	781b      	ldrb	r3, [r3, #0]
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bdb0      	pop	{r4, r5, r7, pc}
 80036a0:	fffff0fe 	.word	0xfffff0fe

080036a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d102      	bne.n	80036bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80036b6:	2308      	movs	r3, #8
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e00f      	b.n	80036dc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	2220      	movs	r2, #32
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e072      	b.n	80037be <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80036d8:	2304      	movs	r3, #4
 80036da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80036dc:	f7ff fc32 	bl	8002f44 <HAL_GetTick>
 80036e0:	0003      	movs	r3, r0
 80036e2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80036e4:	e01f      	b.n	8003726 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	d01c      	beq.n	8003726 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80036ec:	f7ff fc2a 	bl	8002f44 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <HAL_ADC_PollForConversion+0x5e>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d111      	bne.n	8003726 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4013      	ands	r3, r2
 800370c:	d10b      	bne.n	8003726 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	2204      	movs	r2, #4
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2254      	movs	r2, #84	; 0x54
 800371e:	2100      	movs	r1, #0
 8003720:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e04b      	b.n	80037be <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	d0d9      	beq.n	80036e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff fc7f 	bl	8003048 <LL_ADC_REG_IsTriggerSourceSWStart>
 800374a:	1e03      	subs	r3, r0, #0
 800374c:	d02e      	beq.n	80037ac <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	7e9b      	ldrb	r3, [r3, #26]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d12a      	bne.n	80037ac <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2208      	movs	r2, #8
 800375e:	4013      	ands	r3, r2
 8003760:	2b08      	cmp	r3, #8
 8003762:	d123      	bne.n	80037ac <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0018      	movs	r0, r3
 800376a:	f7ff fd5d 	bl	8003228 <LL_ADC_REG_IsConversionOngoing>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d110      	bne.n	8003794 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	210c      	movs	r1, #12
 800377e:	438a      	bics	r2, r1
 8003780:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_ADC_PollForConversion+0x124>)
 8003788:	4013      	ands	r3, r2
 800378a:	2201      	movs	r2, #1
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	659a      	str	r2, [r3, #88]	; 0x58
 8003792:	e00b      	b.n	80037ac <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	2220      	movs	r2, #32
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	2201      	movs	r2, #1
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d103      	bne.n	80037bc <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	220c      	movs	r2, #12
 80037ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	fffffefe 	.word	0xfffffefe

080037cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80037da:	0018      	movs	r0, r3
 80037dc:	46bd      	mov	sp, r7
 80037de:	b002      	add	sp, #8
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ee:	2317      	movs	r3, #23
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2254      	movs	r2, #84	; 0x54
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x24>
 8003804:	2302      	movs	r3, #2
 8003806:	e1c0      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x3a6>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2254      	movs	r2, #84	; 0x54
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff fd07 	bl	8003228 <LL_ADC_REG_IsConversionOngoing>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d000      	beq.n	8003820 <HAL_ADC_ConfigChannel+0x3c>
 800381e:	e1a3      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d100      	bne.n	800382a <HAL_ADC_ConfigChannel+0x46>
 8003828:	e143      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	429a      	cmp	r2, r3
 8003834:	d004      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800383a:	4ac1      	ldr	r2, [pc, #772]	; (8003b40 <HAL_ADC_ConfigChannel+0x35c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0019      	movs	r1, r3
 800384a:	0010      	movs	r0, r2
 800384c:	f7ff fc2d 	bl	80030aa <LL_ADC_REG_SetSequencerChAdd>
 8003850:	e0c9      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	211f      	movs	r1, #31
 800385c:	400b      	ands	r3, r1
 800385e:	210f      	movs	r1, #15
 8003860:	4099      	lsls	r1, r3
 8003862:	000b      	movs	r3, r1
 8003864:	43db      	mvns	r3, r3
 8003866:	4013      	ands	r3, r2
 8003868:	0019      	movs	r1, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	035b      	lsls	r3, r3, #13
 8003870:	0b5b      	lsrs	r3, r3, #13
 8003872:	d105      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x9c>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0e9b      	lsrs	r3, r3, #26
 800387a:	221f      	movs	r2, #31
 800387c:	4013      	ands	r3, r2
 800387e:	e098      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2201      	movs	r2, #1
 8003886:	4013      	ands	r3, r2
 8003888:	d000      	beq.n	800388c <HAL_ADC_ConfigChannel+0xa8>
 800388a:	e091      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x1cc>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2202      	movs	r2, #2
 8003892:	4013      	ands	r3, r2
 8003894:	d000      	beq.n	8003898 <HAL_ADC_ConfigChannel+0xb4>
 8003896:	e089      	b.n	80039ac <HAL_ADC_ConfigChannel+0x1c8>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2204      	movs	r2, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d000      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0xc0>
 80038a2:	e081      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x1c4>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	4013      	ands	r3, r2
 80038ac:	d000      	beq.n	80038b0 <HAL_ADC_ConfigChannel+0xcc>
 80038ae:	e079      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x1c0>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	4013      	ands	r3, r2
 80038b8:	d000      	beq.n	80038bc <HAL_ADC_ConfigChannel+0xd8>
 80038ba:	e071      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x1bc>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2220      	movs	r2, #32
 80038c2:	4013      	ands	r3, r2
 80038c4:	d000      	beq.n	80038c8 <HAL_ADC_ConfigChannel+0xe4>
 80038c6:	e069      	b.n	800399c <HAL_ADC_ConfigChannel+0x1b8>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	4013      	ands	r3, r2
 80038d0:	d000      	beq.n	80038d4 <HAL_ADC_ConfigChannel+0xf0>
 80038d2:	e061      	b.n	8003998 <HAL_ADC_ConfigChannel+0x1b4>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2280      	movs	r2, #128	; 0x80
 80038da:	4013      	ands	r3, r2
 80038dc:	d000      	beq.n	80038e0 <HAL_ADC_ConfigChannel+0xfc>
 80038de:	e059      	b.n	8003994 <HAL_ADC_ConfigChannel+0x1b0>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4013      	ands	r3, r2
 80038ea:	d151      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1ac>
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4013      	ands	r3, r2
 80038f6:	d149      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1a8>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4013      	ands	r3, r2
 8003902:	d141      	bne.n	8003988 <HAL_ADC_ConfigChannel+0x1a4>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	4013      	ands	r3, r2
 800390e:	d139      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1a0>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	015b      	lsls	r3, r3, #5
 8003918:	4013      	ands	r3, r2
 800391a:	d131      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x19c>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	019b      	lsls	r3, r3, #6
 8003924:	4013      	ands	r3, r2
 8003926:	d129      	bne.n	800397c <HAL_ADC_ConfigChannel+0x198>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	2380      	movs	r3, #128	; 0x80
 800392e:	01db      	lsls	r3, r3, #7
 8003930:	4013      	ands	r3, r2
 8003932:	d121      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x194>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	4013      	ands	r3, r2
 800393e:	d119      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x190>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	025b      	lsls	r3, r3, #9
 8003948:	4013      	ands	r3, r2
 800394a:	d111      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x18c>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	4013      	ands	r3, r2
 8003956:	d109      	bne.n	800396c <HAL_ADC_ConfigChannel+0x188>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	02db      	lsls	r3, r3, #11
 8003960:	4013      	ands	r3, r2
 8003962:	d001      	beq.n	8003968 <HAL_ADC_ConfigChannel+0x184>
 8003964:	2312      	movs	r3, #18
 8003966:	e024      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003968:	2300      	movs	r3, #0
 800396a:	e022      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800396c:	2311      	movs	r3, #17
 800396e:	e020      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003970:	2310      	movs	r3, #16
 8003972:	e01e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003974:	230f      	movs	r3, #15
 8003976:	e01c      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003978:	230e      	movs	r3, #14
 800397a:	e01a      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800397c:	230d      	movs	r3, #13
 800397e:	e018      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003980:	230c      	movs	r3, #12
 8003982:	e016      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003984:	230b      	movs	r3, #11
 8003986:	e014      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003988:	230a      	movs	r3, #10
 800398a:	e012      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800398c:	2309      	movs	r3, #9
 800398e:	e010      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003990:	2308      	movs	r3, #8
 8003992:	e00e      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003994:	2307      	movs	r3, #7
 8003996:	e00c      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 8003998:	2306      	movs	r3, #6
 800399a:	e00a      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 800399c:	2305      	movs	r3, #5
 800399e:	e008      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a0:	2304      	movs	r3, #4
 80039a2:	e006      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a4:	2303      	movs	r3, #3
 80039a6:	e004      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e002      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_ADC_ConfigChannel+0x1ce>
 80039b0:	2300      	movs	r3, #0
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	6852      	ldr	r2, [r2, #4]
 80039b6:	201f      	movs	r0, #31
 80039b8:	4002      	ands	r2, r0
 80039ba:	4093      	lsls	r3, r2
 80039bc:	000a      	movs	r2, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d808      	bhi.n	80039e6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	001a      	movs	r2, r3
 80039e2:	f7ff fb42 	bl	800306a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	001a      	movs	r2, r3
 80039f4:	f7ff fb7c 	bl	80030f0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	db00      	blt.n	8003a02 <HAL_ADC_ConfigChannel+0x21e>
 8003a00:	e0bc      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a02:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff faf5 	bl	8002ff4 <LL_ADC_GetCommonPathInternalCh>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_ADC_ConfigChannel+0x364>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d122      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a20:	d11d      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	0412      	lsls	r2, r2, #16
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	4a46      	ldr	r2, [pc, #280]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	0010      	movs	r0, r2
 8003a30:	f7ff facc 	bl	8002fcc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a34:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <HAL_ADC_ConfigChannel+0x368>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4945      	ldr	r1, [pc, #276]	; (8003b50 <HAL_ADC_ConfigChannel+0x36c>)
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7fc fb62 	bl	8000104 <__udivsi3>
 8003a40:	0003      	movs	r3, r0
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	0013      	movs	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	189b      	adds	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f9      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003a5c:	e08e      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3c      	ldr	r2, [pc, #240]	; (8003b54 <HAL_ADC_ConfigChannel+0x370>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10e      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x2a2>
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	045b      	lsls	r3, r3, #17
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d109      	bne.n	8003a86 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	0452      	lsls	r2, r2, #17
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	4a32      	ldr	r2, [pc, #200]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	0010      	movs	r0, r2
 8003a80:	f7ff faa4 	bl	8002fcc <LL_ADC_SetCommonPathInternalCh>
 8003a84:	e07a      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a33      	ldr	r2, [pc, #204]	; (8003b58 <HAL_ADC_ConfigChannel+0x374>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d000      	beq.n	8003a92 <HAL_ADC_ConfigChannel+0x2ae>
 8003a90:	e074      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	03db      	lsls	r3, r3, #15
 8003a98:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a9a:	d000      	beq.n	8003a9e <HAL_ADC_ConfigChannel+0x2ba>
 8003a9c:	e06e      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	03d2      	lsls	r2, r2, #15
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	4a27      	ldr	r2, [pc, #156]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	0010      	movs	r0, r2
 8003aac:	f7ff fa8e 	bl	8002fcc <LL_ADC_SetCommonPathInternalCh>
 8003ab0:	e064      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d004      	beq.n	8003ac8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ac2:	4a1f      	ldr	r2, [pc, #124]	; (8003b40 <HAL_ADC_ConfigChannel+0x35c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d107      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	0010      	movs	r0, r2
 8003ad4:	f7ff fafa 	bl	80030cc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	da4d      	bge.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ae0:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7ff fa86 	bl	8002ff4 <LL_ADC_GetCommonPathInternalCh>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_ADC_ConfigChannel+0x364>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <HAL_ADC_ConfigChannel+0x378>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	4a11      	ldr	r2, [pc, #68]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003afe:	0019      	movs	r1, r3
 8003b00:	0010      	movs	r0, r2
 8003b02:	f7ff fa63 	bl	8002fcc <LL_ADC_SetCommonPathInternalCh>
 8003b06:	e039      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a11      	ldr	r2, [pc, #68]	; (8003b54 <HAL_ADC_ConfigChannel+0x370>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4a12      	ldr	r2, [pc, #72]	; (8003b60 <HAL_ADC_ConfigChannel+0x37c>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	f7ff fa55 	bl	8002fcc <LL_ADC_SetCommonPathInternalCh>
 8003b22:	e02b      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0b      	ldr	r2, [pc, #44]	; (8003b58 <HAL_ADC_ConfigChannel+0x374>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d126      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <HAL_ADC_ConfigChannel+0x380>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	4a03      	ldr	r2, [pc, #12]	; (8003b44 <HAL_ADC_ConfigChannel+0x360>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	0010      	movs	r0, r2
 8003b3a:	f7ff fa47 	bl	8002fcc <LL_ADC_SetCommonPathInternalCh>
 8003b3e:	e01d      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x398>
 8003b40:	80000004 	.word	0x80000004
 8003b44:	40012708 	.word	0x40012708
 8003b48:	b0001000 	.word	0xb0001000
 8003b4c:	20000000 	.word	0x20000000
 8003b50:	00030d40 	.word	0x00030d40
 8003b54:	b8004000 	.word	0xb8004000
 8003b58:	b4002000 	.word	0xb4002000
 8003b5c:	ff7fffff 	.word	0xff7fffff
 8003b60:	feffffff 	.word	0xfeffffff
 8003b64:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003b74:	2317      	movs	r3, #23
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2254      	movs	r2, #84	; 0x54
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003b84:	2317      	movs	r3, #23
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	781b      	ldrb	r3, [r3, #0]
}
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	b006      	add	sp, #24
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)

08003b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7ff fb0b 	bl	80031c0 <LL_ADC_IsEnabled>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d000      	beq.n	8003bb0 <ADC_Enable+0x1c>
 8003bae:	e069      	b.n	8003c84 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4a36      	ldr	r2, [pc, #216]	; (8003c90 <ADC_Enable+0xfc>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d00d      	beq.n	8003bd8 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e056      	b.n	8003c86 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff facb 	bl	8003178 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003be2:	4b2c      	ldr	r3, [pc, #176]	; (8003c94 <ADC_Enable+0x100>)
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7ff fa05 	bl	8002ff4 <LL_ADC_GetCommonPathInternalCh>
 8003bea:	0002      	movs	r2, r0
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d00f      	beq.n	8003c14 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <ADC_Enable+0x104>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4928      	ldr	r1, [pc, #160]	; (8003c9c <ADC_Enable+0x108>)
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f7fc fa82 	bl	8000104 <__udivsi3>
 8003c00:	0003      	movs	r3, r0
 8003c02:	3301      	adds	r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c06:	e002      	b.n	8003c0e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f9      	bne.n	8003c08 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7e5b      	ldrb	r3, [r3, #25]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d033      	beq.n	8003c84 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003c1c:	f7ff f992 	bl	8002f44 <HAL_GetTick>
 8003c20:	0003      	movs	r3, r0
 8003c22:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c24:	e027      	b.n	8003c76 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff fac8 	bl	80031c0 <LL_ADC_IsEnabled>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d104      	bne.n	8003c3e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f7ff fa9d 	bl	8003178 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c3e:	f7ff f981 	bl	8002f44 <HAL_GetTick>
 8003c42:	0002      	movs	r2, r0
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d914      	bls.n	8003c76 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d00d      	beq.n	8003c76 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	2210      	movs	r2, #16
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e007      	b.n	8003c86 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d1d0      	bne.n	8003c26 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b004      	add	sp, #16
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	80000017 	.word	0x80000017
 8003c94:	40012708 	.word	0x40012708
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	00030d40 	.word	0x00030d40

08003ca0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff fa98 	bl	80031e2 <LL_ADC_IsDisableOngoing>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff fa80 	bl	80031c0 <LL_ADC_IsEnabled>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d046      	beq.n	8003d52 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d143      	bne.n	8003d52 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10d      	bne.n	8003cf4 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff fa5d 	bl	800319c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003cea:	f7ff f92b 	bl	8002f44 <HAL_GetTick>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cf2:	e028      	b.n	8003d46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	2201      	movs	r2, #1
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e021      	b.n	8003d54 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d10:	f7ff f918 	bl	8002f44 <HAL_GetTick>
 8003d14:	0002      	movs	r2, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d913      	bls.n	8003d46 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	2201      	movs	r2, #1
 8003d26:	4013      	ands	r3, r2
 8003d28:	d00d      	beq.n	8003d46 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	2210      	movs	r2, #16
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e006      	b.n	8003d54 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d1de      	bne.n	8003d10 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	b004      	add	sp, #16
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <LL_ADC_IsEnabled>:
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d101      	bne.n	8003d74 <LL_ADC_IsEnabled+0x18>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <LL_ADC_IsEnabled+0x1a>
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	0018      	movs	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	b002      	add	sp, #8
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <LL_ADC_IsCalibrationOnGoing>:
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	0fdb      	lsrs	r3, r3, #31
 8003d8c:	07da      	lsls	r2, r3, #31
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d101      	bne.n	8003d9a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_ADC_IsCalibrationOnGoing+0x1e>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003da4:	b590      	push	{r4, r7, lr}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2254      	movs	r2, #84	; 0x54
 8003db4:	5c9b      	ldrb	r3, [r3, r2]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_ADCEx_Calibration_Start+0x1a>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e06c      	b.n	8003e98 <HAL_ADCEx_Calibration_Start+0xf4>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2254      	movs	r2, #84	; 0x54
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003dc6:	2317      	movs	r3, #23
 8003dc8:	18fc      	adds	r4, r7, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7ff ff67 	bl	8003ca0 <ADC_Disable>
 8003dd2:	0003      	movs	r3, r0
 8003dd4:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff ffbe 	bl	8003d5c <LL_ADC_IsEnabled>
 8003de0:	1e03      	subs	r3, r0, #0
 8003de2:	d14c      	bne.n	8003e7e <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_ADCEx_Calibration_Start+0xfc>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	2202      	movs	r2, #2
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	438a      	bics	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2180      	movs	r1, #128	; 0x80
 8003e1c:	0609      	lsls	r1, r1, #24
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e22:	e014      	b.n	8003e4e <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <HAL_ADCEx_Calibration_Start+0x100>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d90d      	bls.n	8003e4e <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	2212      	movs	r2, #18
 8003e38:	4393      	bics	r3, r2
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2254      	movs	r2, #84	; 0x54
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e024      	b.n	8003e98 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7ff ff93 	bl	8003d7e <LL_ADC_IsCalibrationOnGoing>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d1e3      	bne.n	8003e24 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68d9      	ldr	r1, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	2203      	movs	r2, #3
 8003e72:	4393      	bics	r3, r2
 8003e74:	2201      	movs	r2, #1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e7c:	e005      	b.n	8003e8a <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	2210      	movs	r2, #16
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2254      	movs	r2, #84	; 0x54
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003e92:	2317      	movs	r3, #23
 8003e94:	18fb      	adds	r3, r7, r3
 8003e96:	781b      	ldrb	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b007      	add	sp, #28
 8003e9e:	bd90      	pop	{r4, r7, pc}
 8003ea0:	fffffefd 	.word	0xfffffefd
 8003ea4:	0002f1ff 	.word	0x0002f1ff

08003ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	0002      	movs	r2, r0
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003eb4:	1dfb      	adds	r3, r7, #7
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8003eba:	d809      	bhi.n	8003ed0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebc:	1dfb      	adds	r3, r7, #7
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	231f      	movs	r3, #31
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <__NVIC_EnableIRQ+0x30>)
 8003ec8:	2101      	movs	r1, #1
 8003eca:	4091      	lsls	r1, r2
 8003ecc:	000a      	movs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b002      	add	sp, #8
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	e000e100 	.word	0xe000e100

08003edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	0002      	movs	r2, r0
 8003ee4:	6039      	str	r1, [r7, #0]
 8003ee6:	1dfb      	adds	r3, r7, #7
 8003ee8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	1dfb      	adds	r3, r7, #7
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef0:	d828      	bhi.n	8003f44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <__NVIC_SetPriority+0xd4>)
 8003ef4:	1dfb      	adds	r3, r7, #7
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	b25b      	sxtb	r3, r3
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	33c0      	adds	r3, #192	; 0xc0
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	589b      	ldr	r3, [r3, r2]
 8003f02:	1dfa      	adds	r2, r7, #7
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	0011      	movs	r1, r2
 8003f08:	2203      	movs	r2, #3
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	00d2      	lsls	r2, r2, #3
 8003f0e:	21ff      	movs	r1, #255	; 0xff
 8003f10:	4091      	lsls	r1, r2
 8003f12:	000a      	movs	r2, r1
 8003f14:	43d2      	mvns	r2, r2
 8003f16:	401a      	ands	r2, r3
 8003f18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	019b      	lsls	r3, r3, #6
 8003f1e:	22ff      	movs	r2, #255	; 0xff
 8003f20:	401a      	ands	r2, r3
 8003f22:	1dfb      	adds	r3, r7, #7
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	0018      	movs	r0, r3
 8003f28:	2303      	movs	r3, #3
 8003f2a:	4003      	ands	r3, r0
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f30:	481f      	ldr	r0, [pc, #124]	; (8003fb0 <__NVIC_SetPriority+0xd4>)
 8003f32:	1dfb      	adds	r3, r7, #7
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	33c0      	adds	r3, #192	; 0xc0
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f42:	e031      	b.n	8003fa8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f44:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <__NVIC_SetPriority+0xd8>)
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	230f      	movs	r3, #15
 8003f4e:	400b      	ands	r3, r1
 8003f50:	3b08      	subs	r3, #8
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3306      	adds	r3, #6
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	18d3      	adds	r3, r2, r3
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	1dfa      	adds	r2, r7, #7
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	0011      	movs	r1, r2
 8003f64:	2203      	movs	r2, #3
 8003f66:	400a      	ands	r2, r1
 8003f68:	00d2      	lsls	r2, r2, #3
 8003f6a:	21ff      	movs	r1, #255	; 0xff
 8003f6c:	4091      	lsls	r1, r2
 8003f6e:	000a      	movs	r2, r1
 8003f70:	43d2      	mvns	r2, r2
 8003f72:	401a      	ands	r2, r3
 8003f74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	22ff      	movs	r2, #255	; 0xff
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	0018      	movs	r0, r3
 8003f84:	2303      	movs	r3, #3
 8003f86:	4003      	ands	r3, r0
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8c:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <__NVIC_SetPriority+0xd8>)
 8003f8e:	1dfb      	adds	r3, r7, #7
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	001c      	movs	r4, r3
 8003f94:	230f      	movs	r3, #15
 8003f96:	4023      	ands	r3, r4
 8003f98:	3b08      	subs	r3, #8
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	3306      	adds	r3, #6
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	18c3      	adds	r3, r0, r3
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b003      	add	sp, #12
 8003fae:	bd90      	pop	{r4, r7, pc}
 8003fb0:	e000e100 	.word	0xe000e100
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	1e5a      	subs	r2, r3, #1
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	045b      	lsls	r3, r3, #17
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d301      	bcc.n	8003fd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e010      	b.n	8003ff2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <SysTick_Config+0x44>)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd8:	2301      	movs	r3, #1
 8003fda:	425b      	negs	r3, r3
 8003fdc:	2103      	movs	r1, #3
 8003fde:	0018      	movs	r0, r3
 8003fe0:	f7ff ff7c 	bl	8003edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <SysTick_Config+0x44>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <SysTick_Config+0x44>)
 8003fec:	2207      	movs	r2, #7
 8003fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b002      	add	sp, #8
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	e000e010 	.word	0xe000e010

08004000 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	210f      	movs	r1, #15
 800400c:	187b      	adds	r3, r7, r1
 800400e:	1c02      	adds	r2, r0, #0
 8004010:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	187b      	adds	r3, r7, r1
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b25b      	sxtb	r3, r3
 800401a:	0011      	movs	r1, r2
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff ff5d 	bl	8003edc <__NVIC_SetPriority>
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	0002      	movs	r2, r0
 8004032:	1dfb      	adds	r3, r7, #7
 8004034:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	b25b      	sxtb	r3, r3
 800403c:	0018      	movs	r0, r3
 800403e:	f7ff ff33 	bl	8003ea8 <__NVIC_EnableIRQ>
}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b002      	add	sp, #8
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff ffaf 	bl	8003fb8 <SysTick_Config>
 800405a:	0003      	movs	r3, r0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004072:	e14d      	b.n	8004310 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2101      	movs	r1, #1
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4091      	lsls	r1, r2
 800407e:	000a      	movs	r2, r1
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d100      	bne.n	800408c <HAL_GPIO_Init+0x28>
 800408a:	e13e      	b.n	800430a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2203      	movs	r2, #3
 8004092:	4013      	ands	r3, r2
 8004094:	2b01      	cmp	r3, #1
 8004096:	d005      	beq.n	80040a4 <HAL_GPIO_Init+0x40>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2203      	movs	r2, #3
 800409e:	4013      	ands	r3, r2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d130      	bne.n	8004106 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	409a      	lsls	r2, r3
 80040b2:	0013      	movs	r3, r2
 80040b4:	43da      	mvns	r2, r3
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	4013      	ands	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	0013      	movs	r3, r2
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040da:	2201      	movs	r2, #1
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	409a      	lsls	r2, r3
 80040e0:	0013      	movs	r3, r2
 80040e2:	43da      	mvns	r2, r3
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4013      	ands	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	2201      	movs	r2, #1
 80040f2:	401a      	ands	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	409a      	lsls	r2, r3
 80040f8:	0013      	movs	r3, r2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2203      	movs	r2, #3
 800410c:	4013      	ands	r3, r2
 800410e:	2b03      	cmp	r3, #3
 8004110:	d017      	beq.n	8004142 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	2203      	movs	r2, #3
 800411e:	409a      	lsls	r2, r3
 8004120:	0013      	movs	r3, r2
 8004122:	43da      	mvns	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	409a      	lsls	r2, r3
 8004134:	0013      	movs	r3, r2
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2203      	movs	r2, #3
 8004148:	4013      	ands	r3, r2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d123      	bne.n	8004196 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	08da      	lsrs	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3208      	adds	r2, #8
 8004156:	0092      	lsls	r2, r2, #2
 8004158:	58d3      	ldr	r3, [r2, r3]
 800415a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2207      	movs	r2, #7
 8004160:	4013      	ands	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	220f      	movs	r2, #15
 8004166:	409a      	lsls	r2, r3
 8004168:	0013      	movs	r3, r2
 800416a:	43da      	mvns	r2, r3
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4013      	ands	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2107      	movs	r1, #7
 800417a:	400b      	ands	r3, r1
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	409a      	lsls	r2, r3
 8004180:	0013      	movs	r3, r2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	08da      	lsrs	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3208      	adds	r2, #8
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	6939      	ldr	r1, [r7, #16]
 8004194:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	2203      	movs	r2, #3
 80041a2:	409a      	lsls	r2, r3
 80041a4:	0013      	movs	r3, r2
 80041a6:	43da      	mvns	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4013      	ands	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2203      	movs	r2, #3
 80041b4:	401a      	ands	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	409a      	lsls	r2, r3
 80041bc:	0013      	movs	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	23c0      	movs	r3, #192	; 0xc0
 80041d0:	029b      	lsls	r3, r3, #10
 80041d2:	4013      	ands	r3, r2
 80041d4:	d100      	bne.n	80041d8 <HAL_GPIO_Init+0x174>
 80041d6:	e098      	b.n	800430a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80041d8:	4a53      	ldr	r2, [pc, #332]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3318      	adds	r3, #24
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	589b      	ldr	r3, [r3, r2]
 80041e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2203      	movs	r2, #3
 80041ea:	4013      	ands	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	220f      	movs	r2, #15
 80041f0:	409a      	lsls	r2, r3
 80041f2:	0013      	movs	r3, r2
 80041f4:	43da      	mvns	r2, r3
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	23a0      	movs	r3, #160	; 0xa0
 8004200:	05db      	lsls	r3, r3, #23
 8004202:	429a      	cmp	r2, r3
 8004204:	d019      	beq.n	800423a <HAL_GPIO_Init+0x1d6>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a48      	ldr	r2, [pc, #288]	; (800432c <HAL_GPIO_Init+0x2c8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d013      	beq.n	8004236 <HAL_GPIO_Init+0x1d2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a47      	ldr	r2, [pc, #284]	; (8004330 <HAL_GPIO_Init+0x2cc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00d      	beq.n	8004232 <HAL_GPIO_Init+0x1ce>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a46      	ldr	r2, [pc, #280]	; (8004334 <HAL_GPIO_Init+0x2d0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d007      	beq.n	800422e <HAL_GPIO_Init+0x1ca>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a45      	ldr	r2, [pc, #276]	; (8004338 <HAL_GPIO_Init+0x2d4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_GPIO_Init+0x1c6>
 8004226:	2304      	movs	r3, #4
 8004228:	e008      	b.n	800423c <HAL_GPIO_Init+0x1d8>
 800422a:	2305      	movs	r3, #5
 800422c:	e006      	b.n	800423c <HAL_GPIO_Init+0x1d8>
 800422e:	2303      	movs	r3, #3
 8004230:	e004      	b.n	800423c <HAL_GPIO_Init+0x1d8>
 8004232:	2302      	movs	r3, #2
 8004234:	e002      	b.n	800423c <HAL_GPIO_Init+0x1d8>
 8004236:	2301      	movs	r3, #1
 8004238:	e000      	b.n	800423c <HAL_GPIO_Init+0x1d8>
 800423a:	2300      	movs	r3, #0
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	2103      	movs	r1, #3
 8004240:	400a      	ands	r2, r1
 8004242:	00d2      	lsls	r2, r2, #3
 8004244:	4093      	lsls	r3, r2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800424c:	4936      	ldr	r1, [pc, #216]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	089b      	lsrs	r3, r3, #2
 8004252:	3318      	adds	r3, #24
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800425a:	4a33      	ldr	r2, [pc, #204]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	58d3      	ldr	r3, [r2, r3]
 8004260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	43da      	mvns	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	025b      	lsls	r3, r3, #9
 8004274:	4013      	ands	r3, r2
 8004276:	d003      	beq.n	8004280 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004280:	4929      	ldr	r1, [pc, #164]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004288:	4a27      	ldr	r2, [pc, #156]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 800428a:	2384      	movs	r3, #132	; 0x84
 800428c:	58d3      	ldr	r3, [r2, r3]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	43da      	mvns	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	4013      	ands	r3, r2
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042ae:	491e      	ldr	r1, [pc, #120]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 80042b0:	2284      	movs	r2, #132	; 0x84
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b6:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43da      	mvns	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	035b      	lsls	r3, r3, #13
 80042ce:	4013      	ands	r3, r2
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	039b      	lsls	r3, r3, #14
 80042f8:	4013      	ands	r3, r2
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004304:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_GPIO_Init+0x2c4>)
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3301      	adds	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	40da      	lsrs	r2, r3
 8004318:	1e13      	subs	r3, r2, #0
 800431a:	d000      	beq.n	800431e <HAL_GPIO_Init+0x2ba>
 800431c:	e6aa      	b.n	8004074 <HAL_GPIO_Init+0x10>
  }
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b006      	add	sp, #24
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021800 	.word	0x40021800
 800432c:	50000400 	.word	0x50000400
 8004330:	50000800 	.word	0x50000800
 8004334:	50000c00 	.word	0x50000c00
 8004338:	50001000 	.word	0x50001000

0800433c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	0008      	movs	r0, r1
 8004346:	0011      	movs	r1, r2
 8004348:	1cbb      	adds	r3, r7, #2
 800434a:	1c02      	adds	r2, r0, #0
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	1c7b      	adds	r3, r7, #1
 8004350:	1c0a      	adds	r2, r1, #0
 8004352:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004354:	1c7b      	adds	r3, r7, #1
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800435c:	1cbb      	adds	r3, r7, #2
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004364:	e003      	b.n	800436e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004366:	1cbb      	adds	r3, r7, #2
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	0002      	movs	r2, r0
 8004380:	1dbb      	adds	r3, r7, #6
 8004382:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004384:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	1dba      	adds	r2, r7, #6
 800438a:	8812      	ldrh	r2, [r2, #0]
 800438c:	4013      	ands	r3, r2
 800438e:	d008      	beq.n	80043a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004392:	1dba      	adds	r2, r7, #6
 8004394:	8812      	ldrh	r2, [r2, #0]
 8004396:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004398:	1dbb      	adds	r3, r7, #6
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	0018      	movs	r0, r3
 800439e:	f000 f815 	bl	80043cc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	1dba      	adds	r2, r7, #6
 80043a8:	8812      	ldrh	r2, [r2, #0]
 80043aa:	4013      	ands	r3, r2
 80043ac:	d008      	beq.n	80043c0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80043ae:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80043b0:	1dba      	adds	r2, r7, #6
 80043b2:	8812      	ldrh	r2, [r2, #0]
 80043b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80043b6:	1dbb      	adds	r3, r7, #6
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fd fe80 	bl	80020c0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80043c0:	46c0      	nop			; (mov r8, r8)
 80043c2:	46bd      	mov	sp, r7
 80043c4:	b002      	add	sp, #8
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021800 	.word	0x40021800

080043cc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	0002      	movs	r2, r0
 80043d4:	1dbb      	adds	r3, r7, #6
 80043d6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80043d8:	46c0      	nop			; (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b002      	add	sp, #8
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80043e8:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	0019      	movs	r1, r3
 80043f2:	4b17      	ldr	r3, [pc, #92]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	429a      	cmp	r2, r3
 8004402:	d11f      	bne.n	8004444 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	0013      	movs	r3, r2
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	189b      	adds	r3, r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4912      	ldr	r1, [pc, #72]	; (800445c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004412:	0018      	movs	r0, r3
 8004414:	f7fb fe76 	bl	8000104 <__udivsi3>
 8004418:	0003      	movs	r3, r0
 800441a:	3301      	adds	r3, #1
 800441c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800441e:	e008      	b.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b01      	subs	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e001      	b.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e009      	b.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	401a      	ands	r2, r3
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	429a      	cmp	r2, r3
 8004442:	d0ed      	beq.n	8004420 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	40007000 	.word	0x40007000
 8004454:	fffff9ff 	.word	0xfffff9ff
 8004458:	20000000 	.word	0x20000000
 800445c:	000f4240 	.word	0x000f4240

08004460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f000 fb56 	bl	8004b20 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	d100      	bne.n	8004480 <HAL_RCC_OscConfig+0x20>
 800447e:	e07d      	b.n	800457c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004480:	4bc3      	ldr	r3, [pc, #780]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2238      	movs	r2, #56	; 0x38
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800448a:	4bc1      	ldr	r3, [pc, #772]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b10      	cmp	r3, #16
 8004498:	d102      	bne.n	80044a0 <HAL_RCC_OscConfig+0x40>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d002      	beq.n	80044a6 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a6:	4bba      	ldr	r3, [pc, #744]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	4013      	ands	r3, r2
 80044b0:	d063      	beq.n	800457a <HAL_RCC_OscConfig+0x11a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d15f      	bne.n	800457a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f000 fb30 	bl	8004b20 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	2380      	movs	r3, #128	; 0x80
 80044c6:	025b      	lsls	r3, r3, #9
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_OscConfig+0x7c>
 80044cc:	4bb0      	ldr	r3, [pc, #704]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4baf      	ldr	r3, [pc, #700]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	0249      	lsls	r1, r1, #9
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e020      	b.n	800451e <HAL_RCC_OscConfig+0xbe>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	23a0      	movs	r3, #160	; 0xa0
 80044e2:	02db      	lsls	r3, r3, #11
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d10e      	bne.n	8004506 <HAL_RCC_OscConfig+0xa6>
 80044e8:	4ba9      	ldr	r3, [pc, #676]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4ba8      	ldr	r3, [pc, #672]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	02c9      	lsls	r1, r1, #11
 80044f2:	430a      	orrs	r2, r1
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	4ba6      	ldr	r3, [pc, #664]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4ba5      	ldr	r3, [pc, #660]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	0249      	lsls	r1, r1, #9
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e00b      	b.n	800451e <HAL_RCC_OscConfig+0xbe>
 8004506:	4ba2      	ldr	r3, [pc, #648]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4ba1      	ldr	r3, [pc, #644]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800450c:	49a1      	ldr	r1, [pc, #644]	; (8004794 <HAL_RCC_OscConfig+0x334>)
 800450e:	400a      	ands	r2, r1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	4b9f      	ldr	r3, [pc, #636]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b9e      	ldr	r3, [pc, #632]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004518:	499f      	ldr	r1, [pc, #636]	; (8004798 <HAL_RCC_OscConfig+0x338>)
 800451a:	400a      	ands	r2, r1
 800451c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d014      	beq.n	8004550 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fe fd0d 	bl	8002f44 <HAL_GetTick>
 800452a:	0003      	movs	r3, r0
 800452c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fe fd08 	bl	8002f44 <HAL_GetTick>
 8004534:	0002      	movs	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e2ee      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004542:	4b93      	ldr	r3, [pc, #588]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	029b      	lsls	r3, r3, #10
 800454a:	4013      	ands	r3, r2
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0xd0>
 800454e:	e015      	b.n	800457c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe fcf8 	bl	8002f44 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455a:	f7fe fcf3 	bl	8002f44 <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	; 0x64
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e2d9      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800456c:	4b88      	ldr	r3, [pc, #544]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	4013      	ands	r3, r2
 8004576:	d1f0      	bne.n	800455a <HAL_RCC_OscConfig+0xfa>
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d100      	bne.n	8004588 <HAL_RCC_OscConfig+0x128>
 8004586:	e099      	b.n	80046bc <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004588:	4b81      	ldr	r3, [pc, #516]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2238      	movs	r2, #56	; 0x38
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004592:	4b7f      	ldr	r3, [pc, #508]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2203      	movs	r2, #3
 8004598:	4013      	ands	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d102      	bne.n	80045a8 <HAL_RCC_OscConfig+0x148>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d002      	beq.n	80045ae <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d135      	bne.n	800461a <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ae:	4b78      	ldr	r3, [pc, #480]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	4013      	ands	r3, r2
 80045b8:	d005      	beq.n	80045c6 <HAL_RCC_OscConfig+0x166>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e2ac      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c6:	4b72      	ldr	r3, [pc, #456]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	4a74      	ldr	r2, [pc, #464]	; (800479c <HAL_RCC_OscConfig+0x33c>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	0019      	movs	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	4b6e      	ldr	r3, [pc, #440]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80045d8:	430a      	orrs	r2, r1
 80045da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d112      	bne.n	8004608 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045e2:	4b6b      	ldr	r3, [pc, #428]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6e      	ldr	r2, [pc, #440]	; (80047a0 <HAL_RCC_OscConfig+0x340>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	0019      	movs	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	4b67      	ldr	r3, [pc, #412]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80045f6:	4b66      	ldr	r3, [pc, #408]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0adb      	lsrs	r3, r3, #11
 80045fc:	2207      	movs	r2, #7
 80045fe:	4013      	ands	r3, r2
 8004600:	4a68      	ldr	r2, [pc, #416]	; (80047a4 <HAL_RCC_OscConfig+0x344>)
 8004602:	40da      	lsrs	r2, r3
 8004604:	4b68      	ldr	r3, [pc, #416]	; (80047a8 <HAL_RCC_OscConfig+0x348>)
 8004606:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004608:	4b68      	ldr	r3, [pc, #416]	; (80047ac <HAL_RCC_OscConfig+0x34c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	0018      	movs	r0, r3
 800460e:	f7fe fc3d 	bl	8002e8c <HAL_InitTick>
 8004612:	1e03      	subs	r3, r0, #0
 8004614:	d051      	beq.n	80046ba <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e282      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d030      	beq.n	8004684 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004622:	4b5b      	ldr	r3, [pc, #364]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a5e      	ldr	r2, [pc, #376]	; (80047a0 <HAL_RCC_OscConfig+0x340>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	4b57      	ldr	r3, [pc, #348]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004636:	4b56      	ldr	r3, [pc, #344]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800463c:	2180      	movs	r1, #128	; 0x80
 800463e:	0049      	lsls	r1, r1, #1
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004644:	f7fe fc7e 	bl	8002f44 <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464e:	f7fe fc79 	bl	8002f44 <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e25f      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004660:	4b4b      	ldr	r3, [pc, #300]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4013      	ands	r3, r2
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466c:	4b48      	ldr	r3, [pc, #288]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a4a      	ldr	r2, [pc, #296]	; (800479c <HAL_RCC_OscConfig+0x33c>)
 8004672:	4013      	ands	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	021a      	lsls	r2, r3, #8
 800467c:	4b44      	ldr	r3, [pc, #272]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	e01b      	b.n	80046bc <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004684:	4b42      	ldr	r3, [pc, #264]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b41      	ldr	r3, [pc, #260]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800468a:	4949      	ldr	r1, [pc, #292]	; (80047b0 <HAL_RCC_OscConfig+0x350>)
 800468c:	400a      	ands	r2, r1
 800468e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe fc58 	bl	8002f44 <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800469a:	f7fe fc53 	bl	8002f44 <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e239      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046ac:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4013      	ands	r3, r2
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x23a>
 80046b8:	e000      	b.n	80046bc <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2208      	movs	r2, #8
 80046c2:	4013      	ands	r3, r2
 80046c4:	d047      	beq.n	8004756 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2238      	movs	r2, #56	; 0x38
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b18      	cmp	r3, #24
 80046d0:	d10a      	bne.n	80046e8 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80046d2:	4b2f      	ldr	r3, [pc, #188]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80046d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d6:	2202      	movs	r2, #2
 80046d8:	4013      	ands	r3, r2
 80046da:	d03c      	beq.n	8004756 <HAL_RCC_OscConfig+0x2f6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d138      	bne.n	8004756 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e21b      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d019      	beq.n	8004724 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80046f0:	4b27      	ldr	r3, [pc, #156]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80046f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 80046f6:	2101      	movs	r1, #1
 80046f8:	430a      	orrs	r2, r1
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fc:	f7fe fc22 	bl	8002f44 <HAL_GetTick>
 8004700:	0003      	movs	r3, r0
 8004702:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fe fc1d 	bl	8002f44 <HAL_GetTick>
 800470a:	0002      	movs	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e203      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	2202      	movs	r2, #2
 800471e:	4013      	ands	r3, r2
 8004720:	d0f1      	beq.n	8004706 <HAL_RCC_OscConfig+0x2a6>
 8004722:	e018      	b.n	8004756 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004726:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004728:	4b19      	ldr	r3, [pc, #100]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800472a:	2101      	movs	r1, #1
 800472c:	438a      	bics	r2, r1
 800472e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fe fc08 	bl	8002f44 <HAL_GetTick>
 8004734:	0003      	movs	r3, r0
 8004736:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fe fc03 	bl	8002f44 <HAL_GetTick>
 800473e:	0002      	movs	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1e9      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800474c:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800474e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004750:	2202      	movs	r2, #2
 8004752:	4013      	ands	r3, r2
 8004754:	d1f1      	bne.n	800473a <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2204      	movs	r2, #4
 800475c:	4013      	ands	r3, r2
 800475e:	d100      	bne.n	8004762 <HAL_RCC_OscConfig+0x302>
 8004760:	e0c6      	b.n	80048f0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004762:	231f      	movs	r3, #31
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	2200      	movs	r2, #0
 8004768:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2238      	movs	r2, #56	; 0x38
 8004770:	4013      	ands	r3, r2
 8004772:	2b20      	cmp	r3, #32
 8004774:	d11e      	bne.n	80047b4 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_RCC_OscConfig+0x330>)
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	2202      	movs	r2, #2
 800477c:	4013      	ands	r3, r2
 800477e:	d100      	bne.n	8004782 <HAL_RCC_OscConfig+0x322>
 8004780:	e0b6      	b.n	80048f0 <HAL_RCC_OscConfig+0x490>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d000      	beq.n	800478c <HAL_RCC_OscConfig+0x32c>
 800478a:	e0b1      	b.n	80048f0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e1c7      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
 8004790:	40021000 	.word	0x40021000
 8004794:	fffeffff 	.word	0xfffeffff
 8004798:	fffbffff 	.word	0xfffbffff
 800479c:	ffff80ff 	.word	0xffff80ff
 80047a0:	ffffc7ff 	.word	0xffffc7ff
 80047a4:	00f42400 	.word	0x00f42400
 80047a8:	20000000 	.word	0x20000000
 80047ac:	20000004 	.word	0x20000004
 80047b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047b4:	4bb8      	ldr	r3, [pc, #736]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80047b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	055b      	lsls	r3, r3, #21
 80047bc:	4013      	ands	r3, r2
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_OscConfig+0x364>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <HAL_RCC_OscConfig+0x366>
 80047c4:	2300      	movs	r3, #0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	4bb3      	ldr	r3, [pc, #716]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80047cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ce:	4bb2      	ldr	r3, [pc, #712]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0549      	lsls	r1, r1, #21
 80047d4:	430a      	orrs	r2, r1
 80047d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80047d8:	4baf      	ldr	r3, [pc, #700]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80047da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	055b      	lsls	r3, r3, #21
 80047e0:	4013      	ands	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80047e6:	231f      	movs	r3, #31
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ee:	4bab      	ldr	r3, [pc, #684]	; (8004a9c <HAL_RCC_OscConfig+0x63c>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4013      	ands	r3, r2
 80047f8:	d11a      	bne.n	8004830 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fa:	4ba8      	ldr	r3, [pc, #672]	; (8004a9c <HAL_RCC_OscConfig+0x63c>)
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4ba7      	ldr	r3, [pc, #668]	; (8004a9c <HAL_RCC_OscConfig+0x63c>)
 8004800:	2180      	movs	r1, #128	; 0x80
 8004802:	0049      	lsls	r1, r1, #1
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004808:	f7fe fb9c 	bl	8002f44 <HAL_GetTick>
 800480c:	0003      	movs	r3, r0
 800480e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fe fb97 	bl	8002f44 <HAL_GetTick>
 8004816:	0002      	movs	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e17d      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004824:	4b9d      	ldr	r3, [pc, #628]	; (8004a9c <HAL_RCC_OscConfig+0x63c>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4013      	ands	r3, r2
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <HAL_RCC_OscConfig+0x3e6>
 8004838:	4b97      	ldr	r3, [pc, #604]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800483a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800483c:	4b96      	ldr	r3, [pc, #600]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800483e:	2101      	movs	r1, #1
 8004840:	430a      	orrs	r2, r1
 8004842:	65da      	str	r2, [r3, #92]	; 0x5c
 8004844:	e01c      	b.n	8004880 <HAL_RCC_OscConfig+0x420>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d10c      	bne.n	8004868 <HAL_RCC_OscConfig+0x408>
 800484e:	4b92      	ldr	r3, [pc, #584]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004852:	4b91      	ldr	r3, [pc, #580]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004854:	2104      	movs	r1, #4
 8004856:	430a      	orrs	r2, r1
 8004858:	65da      	str	r2, [r3, #92]	; 0x5c
 800485a:	4b8f      	ldr	r3, [pc, #572]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800485c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800485e:	4b8e      	ldr	r3, [pc, #568]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004860:	2101      	movs	r1, #1
 8004862:	430a      	orrs	r2, r1
 8004864:	65da      	str	r2, [r3, #92]	; 0x5c
 8004866:	e00b      	b.n	8004880 <HAL_RCC_OscConfig+0x420>
 8004868:	4b8b      	ldr	r3, [pc, #556]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800486a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800486c:	4b8a      	ldr	r3, [pc, #552]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800486e:	2101      	movs	r1, #1
 8004870:	438a      	bics	r2, r1
 8004872:	65da      	str	r2, [r3, #92]	; 0x5c
 8004874:	4b88      	ldr	r3, [pc, #544]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004876:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004878:	4b87      	ldr	r3, [pc, #540]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800487a:	2104      	movs	r1, #4
 800487c:	438a      	bics	r2, r1
 800487e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d014      	beq.n	80048b2 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fe fb5c 	bl	8002f44 <HAL_GetTick>
 800488c:	0003      	movs	r3, r0
 800488e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004890:	e009      	b.n	80048a6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fe fb57 	bl	8002f44 <HAL_GetTick>
 8004896:	0002      	movs	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	4a80      	ldr	r2, [pc, #512]	; (8004aa0 <HAL_RCC_OscConfig+0x640>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e13c      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a6:	4b7c      	ldr	r3, [pc, #496]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80048a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048aa:	2202      	movs	r2, #2
 80048ac:	4013      	ands	r3, r2
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x432>
 80048b0:	e013      	b.n	80048da <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b2:	f7fe fb47 	bl	8002f44 <HAL_GetTick>
 80048b6:	0003      	movs	r3, r0
 80048b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ba:	e009      	b.n	80048d0 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fe fb42 	bl	8002f44 <HAL_GetTick>
 80048c0:	0002      	movs	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	4a76      	ldr	r2, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x640>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e127      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d0:	4b71      	ldr	r3, [pc, #452]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2202      	movs	r2, #2
 80048d6:	4013      	ands	r3, r2
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80048da:	231f      	movs	r3, #31
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80048e4:	4b6c      	ldr	r3, [pc, #432]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80048e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e8:	4b6b      	ldr	r3, [pc, #428]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80048ea:	496e      	ldr	r1, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x644>)
 80048ec:	400a      	ands	r2, r1
 80048ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2220      	movs	r2, #32
 80048f6:	4013      	ands	r3, r2
 80048f8:	d039      	beq.n	800496e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004902:	4b65      	ldr	r3, [pc, #404]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b64      	ldr	r3, [pc, #400]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004908:	2180      	movs	r1, #128	; 0x80
 800490a:	03c9      	lsls	r1, r1, #15
 800490c:	430a      	orrs	r2, r1
 800490e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fe fb18 	bl	8002f44 <HAL_GetTick>
 8004914:	0003      	movs	r3, r0
 8004916:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800491a:	f7fe fb13 	bl	8002f44 <HAL_GetTick>
 800491e:	0002      	movs	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0f9      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800492c:	4b5a      	ldr	r3, [pc, #360]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	4013      	ands	r3, r2
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x4ba>
 8004938:	e019      	b.n	800496e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800493a:	4b57      	ldr	r3, [pc, #348]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004940:	4959      	ldr	r1, [pc, #356]	; (8004aa8 <HAL_RCC_OscConfig+0x648>)
 8004942:	400a      	ands	r2, r1
 8004944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004946:	f7fe fafd 	bl	8002f44 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004950:	f7fe faf8 	bl	8002f44 <HAL_GetTick>
 8004954:	0002      	movs	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e0de      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004962:	4b4d      	ldr	r3, [pc, #308]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	041b      	lsls	r3, r3, #16
 800496a:	4013      	ands	r3, r2
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d100      	bne.n	8004978 <HAL_RCC_OscConfig+0x518>
 8004976:	e0d2      	b.n	8004b1e <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004978:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2238      	movs	r2, #56	; 0x38
 800497e:	4013      	ands	r3, r2
 8004980:	2b10      	cmp	r3, #16
 8004982:	d100      	bne.n	8004986 <HAL_RCC_OscConfig+0x526>
 8004984:	e081      	b.n	8004a8a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d156      	bne.n	8004a3c <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498e:	4b42      	ldr	r3, [pc, #264]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004994:	4945      	ldr	r1, [pc, #276]	; (8004aac <HAL_RCC_OscConfig+0x64c>)
 8004996:	400a      	ands	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fe fad3 	bl	8002f44 <HAL_GetTick>
 800499e:	0003      	movs	r3, r0
 80049a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a4:	f7fe face 	bl	8002f44 <HAL_GetTick>
 80049a8:	0002      	movs	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e0b4      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b6:	4b38      	ldr	r3, [pc, #224]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	049b      	lsls	r3, r3, #18
 80049be:	4013      	ands	r3, r2
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049c2:	4b35      	ldr	r3, [pc, #212]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4a3a      	ldr	r2, [pc, #232]	; (8004ab0 <HAL_RCC_OscConfig+0x650>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	0019      	movs	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	021b      	lsls	r3, r3, #8
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	431a      	orrs	r2, r3
 80049f0:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b27      	ldr	r3, [pc, #156]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	0449      	lsls	r1, r1, #17
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004a04:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	0549      	lsls	r1, r1, #21
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe fa97 	bl	8002f44 <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fe fa92 	bl	8002f44 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e078      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	049b      	lsls	r3, r3, #18
 8004a36:	4013      	ands	r3, r2
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x5bc>
 8004a3a:	e070      	b.n	8004b1e <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4b16      	ldr	r3, [pc, #88]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b15      	ldr	r3, [pc, #84]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a42:	491a      	ldr	r1, [pc, #104]	; (8004aac <HAL_RCC_OscConfig+0x64c>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a4e:	2103      	movs	r1, #3
 8004a50:	438a      	bics	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004a54:	4b10      	ldr	r3, [pc, #64]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a5a:	4916      	ldr	r1, [pc, #88]	; (8004ab4 <HAL_RCC_OscConfig+0x654>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fe fa70 	bl	8002f44 <HAL_GetTick>
 8004a64:	0003      	movs	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a6a:	f7fe fa6b 	bl	8002f44 <HAL_GetTick>
 8004a6e:	0002      	movs	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e051      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_OscConfig+0x638>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	049b      	lsls	r3, r3, #18
 8004a84:	4013      	ands	r3, r2
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x60a>
 8004a88:	e049      	b.n	8004b1e <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d112      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e044      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40007000 	.word	0x40007000
 8004aa0:	00001388 	.word	0x00001388
 8004aa4:	efffffff 	.word	0xefffffff
 8004aa8:	ffbfffff 	.word	0xffbfffff
 8004aac:	feffffff 	.word	0xfeffffff
 8004ab0:	11c1808c 	.word	0x11c1808c
 8004ab4:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_RCC_OscConfig+0x6c8>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d126      	bne.n	8004b1a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2270      	movs	r2, #112	; 0x70
 8004ad0:	401a      	ands	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d11f      	bne.n	8004b1a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	23fe      	movs	r3, #254	; 0xfe
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d116      	bne.n	8004b1a <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	23f8      	movs	r3, #248	; 0xf8
 8004af0:	039b      	lsls	r3, r3, #14
 8004af2:	401a      	ands	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d10e      	bne.n	8004b1a <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	23e0      	movs	r3, #224	; 0xe0
 8004b00:	051b      	lsls	r3, r3, #20
 8004b02:	401a      	ands	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	0f5b      	lsrs	r3, r3, #29
 8004b10:	075a      	lsls	r2, r3, #29
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d001      	beq.n	8004b1e <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b008      	add	sp, #32
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000

08004b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e0e9      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b40:	4b76      	ldr	r3, [pc, #472]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2207      	movs	r2, #7
 8004b46:	4013      	ands	r3, r2
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d91e      	bls.n	8004b8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4e:	4b73      	ldr	r3, [pc, #460]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2207      	movs	r2, #7
 8004b54:	4393      	bics	r3, r2
 8004b56:	0019      	movs	r1, r3
 8004b58:	4b70      	ldr	r3, [pc, #448]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b60:	f7fe f9f0 	bl	8002f44 <HAL_GetTick>
 8004b64:	0003      	movs	r3, r0
 8004b66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b68:	e009      	b.n	8004b7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6a:	f7fe f9eb 	bl	8002f44 <HAL_GetTick>
 8004b6e:	0002      	movs	r2, r0
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	4a6a      	ldr	r2, [pc, #424]	; (8004d20 <HAL_RCC_ClockConfig+0x1f4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e0ca      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b7e:	4b67      	ldr	r3, [pc, #412]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2207      	movs	r2, #7
 8004b84:	4013      	ands	r3, r2
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1ee      	bne.n	8004b6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2202      	movs	r2, #2
 8004b92:	4013      	ands	r3, r2
 8004b94:	d015      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2204      	movs	r2, #4
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d006      	beq.n	8004bae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ba0:	4b60      	ldr	r3, [pc, #384]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	4b5f      	ldr	r3, [pc, #380]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ba6:	21e0      	movs	r1, #224	; 0xe0
 8004ba8:	01c9      	lsls	r1, r1, #7
 8004baa:	430a      	orrs	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bae:	4b5d      	ldr	r3, [pc, #372]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4a5d      	ldr	r2, [pc, #372]	; (8004d28 <HAL_RCC_ClockConfig+0x1fc>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d057      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd4:	4b53      	ldr	r3, [pc, #332]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	029b      	lsls	r3, r3, #10
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d12b      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e097      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d107      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bec:	4b4d      	ldr	r3, [pc, #308]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	049b      	lsls	r3, r3, #18
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d11f      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e08b      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d107      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c04:	4b47      	ldr	r3, [pc, #284]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d113      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e07f      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d106      	bne.n	8004c2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c1c:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c20:	2202      	movs	r2, #2
 8004c22:	4013      	ands	r3, r2
 8004c24:	d108      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e074      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c2a:	4b3e      	ldr	r3, [pc, #248]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	2202      	movs	r2, #2
 8004c30:	4013      	ands	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e06d      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c38:	4b3a      	ldr	r3, [pc, #232]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2207      	movs	r2, #7
 8004c3e:	4393      	bics	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	4b37      	ldr	r3, [pc, #220]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fe f97a 	bl	8002f44 <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c54:	e009      	b.n	8004c6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c56:	f7fe f975 	bl	8002f44 <HAL_GetTick>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <HAL_RCC_ClockConfig+0x1f4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e054      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b2e      	ldr	r3, [pc, #184]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2238      	movs	r2, #56	; 0x38
 8004c70:	401a      	ands	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1ec      	bne.n	8004c56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b27      	ldr	r3, [pc, #156]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2207      	movs	r2, #7
 8004c82:	4013      	ands	r3, r2
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d21e      	bcs.n	8004cc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2207      	movs	r2, #7
 8004c90:	4393      	bics	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c9c:	f7fe f952 	bl	8002f44 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ca4:	e009      	b.n	8004cba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca6:	f7fe f94d 	bl	8002f44 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <HAL_RCC_ClockConfig+0x1f4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e02c      	b.n	8004d14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cba:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_RCC_ClockConfig+0x1f0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2207      	movs	r2, #7
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1ee      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2204      	movs	r2, #4
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <HAL_RCC_ClockConfig+0x200>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ce6:	f000 f829 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cea:	0001      	movs	r1, r0
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <HAL_RCC_ClockConfig+0x1f8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	401a      	ands	r2, r3
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <HAL_RCC_ClockConfig+0x204>)
 8004cf8:	0092      	lsls	r2, r2, #2
 8004cfa:	58d3      	ldr	r3, [r2, r3]
 8004cfc:	221f      	movs	r2, #31
 8004cfe:	4013      	ands	r3, r2
 8004d00:	000a      	movs	r2, r1
 8004d02:	40da      	lsrs	r2, r3
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_ClockConfig+0x208>)
 8004d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_ClockConfig+0x20c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7fe f8bd 	bl	8002e8c <HAL_InitTick>
 8004d12:	0003      	movs	r3, r0
}
 8004d14:	0018      	movs	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	b004      	add	sp, #16
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	00001388 	.word	0x00001388
 8004d24:	40021000 	.word	0x40021000
 8004d28:	fffff0ff 	.word	0xfffff0ff
 8004d2c:	ffff8fff 	.word	0xffff8fff
 8004d30:	080075e8 	.word	0x080075e8
 8004d34:	20000000 	.word	0x20000000
 8004d38:	20000004 	.word	0x20000004

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d42:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2238      	movs	r2, #56	; 0x38
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d10f      	bne.n	8004d6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d4c:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	0adb      	lsrs	r3, r3, #11
 8004d52:	2207      	movs	r2, #7
 8004d54:	4013      	ands	r3, r2
 8004d56:	2201      	movs	r2, #1
 8004d58:	409a      	lsls	r2, r3
 8004d5a:	0013      	movs	r3, r2
 8004d5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	4835      	ldr	r0, [pc, #212]	; (8004e38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d62:	f7fb f9cf 	bl	8000104 <__udivsi3>
 8004d66:	0003      	movs	r3, r0
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e05d      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d6c:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2238      	movs	r2, #56	; 0x38
 8004d72:	4013      	ands	r3, r2
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d102      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d78:	4b30      	ldr	r3, [pc, #192]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x100>)
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	e054      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	2238      	movs	r2, #56	; 0x38
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b10      	cmp	r3, #16
 8004d88:	d138      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d8a:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	4013      	ands	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d94:	4b27      	ldr	r3, [pc, #156]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d10d      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4824      	ldr	r0, [pc, #144]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x100>)
 8004dac:	f7fb f9aa 	bl	8000104 <__udivsi3>
 8004db0:	0003      	movs	r3, r0
 8004db2:	0019      	movs	r1, r3
 8004db4:	4b1f      	ldr	r3, [pc, #124]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	227f      	movs	r2, #127	; 0x7f
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	434b      	muls	r3, r1
 8004dc0:	617b      	str	r3, [r7, #20]
        break;
 8004dc2:	e00d      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	481c      	ldr	r0, [pc, #112]	; (8004e38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004dc8:	f7fb f99c 	bl	8000104 <__udivsi3>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	0019      	movs	r1, r3
 8004dd0:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	227f      	movs	r2, #127	; 0x7f
 8004dd8:	4013      	ands	r3, r2
 8004dda:	434b      	muls	r3, r1
 8004ddc:	617b      	str	r3, [r7, #20]
        break;
 8004dde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004de0:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	0f5b      	lsrs	r3, r3, #29
 8004de6:	2207      	movs	r2, #7
 8004de8:	4013      	ands	r3, r2
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004dee:	6879      	ldr	r1, [r7, #4]
 8004df0:	6978      	ldr	r0, [r7, #20]
 8004df2:	f7fb f987 	bl	8000104 <__udivsi3>
 8004df6:	0003      	movs	r3, r0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	e015      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dfc:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	2238      	movs	r2, #56	; 0x38
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d103      	bne.n	8004e10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e10:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2238      	movs	r2, #56	; 0x38
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b18      	cmp	r3, #24
 8004e1a:	d103      	bne.n	8004e24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004e1c:	23fa      	movs	r3, #250	; 0xfa
 8004e1e:	01db      	lsls	r3, r3, #7
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e001      	b.n	8004e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e28:	693b      	ldr	r3, [r7, #16]
}
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b006      	add	sp, #24
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	40021000 	.word	0x40021000
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	007a1200 	.word	0x007a1200

08004e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e48:	2313      	movs	r3, #19
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e50:	2312      	movs	r3, #18
 8004e52:	18fb      	adds	r3, r7, r3
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	029b      	lsls	r3, r3, #10
 8004e60:	4013      	ands	r3, r2
 8004e62:	d100      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e64:	e0ad      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e66:	2011      	movs	r0, #17
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e72:	2380      	movs	r3, #128	; 0x80
 8004e74:	055b      	lsls	r3, r3, #21
 8004e76:	4013      	ands	r3, r2
 8004e78:	d110      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4b44      	ldr	r3, [pc, #272]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7e:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	0549      	lsls	r1, r1, #21
 8004e84:	430a      	orrs	r2, r1
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e88:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	055b      	lsls	r3, r3, #21
 8004e90:	4013      	ands	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e96:	183b      	adds	r3, r7, r0
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e9c:	4b3c      	ldr	r3, [pc, #240]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4b3b      	ldr	r3, [pc, #236]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	0049      	lsls	r1, r1, #1
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004eaa:	f7fe f84b 	bl	8002f44 <HAL_GetTick>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fe f846 	bl	8002f44 <HAL_GetTick>
 8004eb8:	0002      	movs	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d904      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004ec2:	2313      	movs	r3, #19
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	701a      	strb	r2, [r3, #0]
        break;
 8004eca:	e005      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ecc:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d0ed      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004ed8:	2313      	movs	r3, #19
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d15e      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ee4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ee6:	23c0      	movs	r3, #192	; 0xc0
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4013      	ands	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d019      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d014      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004efe:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f08:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f0c:	4b1f      	ldr	r3, [pc, #124]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	0249      	lsls	r1, r1, #9
 8004f12:	430a      	orrs	r2, r1
 8004f14:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f16:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f1a:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f1c:	491e      	ldr	r1, [pc, #120]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004f1e:	400a      	ands	r2, r1
 8004f20:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d016      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fe f808 	bl	8002f44 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f38:	e00c      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f3a:	f7fe f803 	bl	8002f44 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d904      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f4a:	2313      	movs	r3, #19
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2203      	movs	r2, #3
 8004f50:	701a      	strb	r2, [r3, #0]
            break;
 8004f52:	e004      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f54:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	2202      	movs	r2, #2
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d0ed      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f5e:	2313      	movs	r3, #19
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f68:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6c:	4a09      	ldr	r2, [pc, #36]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f76:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f7c:	e016      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f7e:	2312      	movs	r3, #18
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2213      	movs	r2, #19
 8004f84:	18ba      	adds	r2, r7, r2
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e00f      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40007000 	.word	0x40007000
 8004f94:	fffffcff 	.word	0xfffffcff
 8004f98:	fffeffff 	.word	0xfffeffff
 8004f9c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	2312      	movs	r3, #18
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	2213      	movs	r2, #19
 8004fa6:	18ba      	adds	r2, r7, r2
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fac:	2311      	movs	r3, #17
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4bb6      	ldr	r3, [pc, #728]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fba:	4bb5      	ldr	r3, [pc, #724]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fbc:	49b5      	ldr	r1, [pc, #724]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d009      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fcc:	4bb0      	ldr	r3, [pc, #704]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	2203      	movs	r2, #3
 8004fd2:	4393      	bics	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	4bad      	ldr	r3, [pc, #692]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fea:	4ba9      	ldr	r3, [pc, #676]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	220c      	movs	r2, #12
 8004ff0:	4393      	bics	r3, r2
 8004ff2:	0019      	movs	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	4ba5      	ldr	r3, [pc, #660]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2204      	movs	r2, #4
 8005004:	4013      	ands	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005008:	4ba1      	ldr	r3, [pc, #644]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500c:	2230      	movs	r2, #48	; 0x30
 800500e:	4393      	bics	r3, r2
 8005010:	0019      	movs	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	4b9e      	ldr	r3, [pc, #632]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005018:	430a      	orrs	r2, r1
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	4013      	ands	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005026:	4b9a      	ldr	r3, [pc, #616]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502a:	4a9b      	ldr	r2, [pc, #620]	; (8005298 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800502c:	4013      	ands	r3, r2
 800502e:	0019      	movs	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691a      	ldr	r2, [r3, #16]
 8005034:	4b96      	ldr	r3, [pc, #600]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005036:	430a      	orrs	r2, r1
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	015b      	lsls	r3, r3, #5
 8005042:	4013      	ands	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005046:	4b92      	ldr	r3, [pc, #584]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504a:	4a94      	ldr	r2, [pc, #592]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695a      	ldr	r2, [r3, #20]
 8005054:	4b8e      	ldr	r3, [pc, #568]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005056:	430a      	orrs	r2, r1
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4013      	ands	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005066:	4b8a      	ldr	r3, [pc, #552]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506a:	4a8d      	ldr	r2, [pc, #564]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800506c:	4013      	ands	r3, r2
 800506e:	0019      	movs	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005074:	4b86      	ldr	r3, [pc, #536]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005076:	430a      	orrs	r2, r1
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4013      	ands	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005086:	4b82      	ldr	r3, [pc, #520]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	4a86      	ldr	r2, [pc, #536]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	4b7e      	ldr	r3, [pc, #504]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005096:	430a      	orrs	r2, r1
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2220      	movs	r2, #32
 80050a0:	4013      	ands	r3, r2
 80050a2:	d009      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050a4:	4b7a      	ldr	r3, [pc, #488]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	4a7f      	ldr	r2, [pc, #508]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699a      	ldr	r2, [r3, #24]
 80050b2:	4b77      	ldr	r3, [pc, #476]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b4:	430a      	orrs	r2, r1
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2240      	movs	r2, #64	; 0x40
 80050be:	4013      	ands	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c2:	4b73      	ldr	r3, [pc, #460]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c6:	4a79      	ldr	r2, [pc, #484]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69da      	ldr	r2, [r3, #28]
 80050d0:	4b6f      	ldr	r3, [pc, #444]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050d2:	430a      	orrs	r2, r1
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	2380      	movs	r3, #128	; 0x80
 80050dc:	01db      	lsls	r3, r3, #7
 80050de:	4013      	ands	r3, r2
 80050e0:	d015      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050e2:	4b6b      	ldr	r3, [pc, #428]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	0899      	lsrs	r1, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ee:	4b68      	ldr	r3, [pc, #416]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	2380      	movs	r3, #128	; 0x80
 80050fa:	05db      	lsls	r3, r3, #23
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d106      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005100:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	4b62      	ldr	r3, [pc, #392]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	0249      	lsls	r1, r1, #9
 800510a:	430a      	orrs	r2, r1
 800510c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	031b      	lsls	r3, r3, #12
 8005116:	4013      	ands	r3, r2
 8005118:	d009      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800511a:	4b5d      	ldr	r3, [pc, #372]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	4393      	bics	r3, r2
 8005122:	0019      	movs	r1, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	4b59      	ldr	r3, [pc, #356]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800512a:	430a      	orrs	r2, r1
 800512c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	2380      	movs	r3, #128	; 0x80
 8005134:	039b      	lsls	r3, r3, #14
 8005136:	4013      	ands	r3, r2
 8005138:	d016      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800513a:	4b55      	ldr	r3, [pc, #340]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513e:	4a5c      	ldr	r2, [pc, #368]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005148:	4b51      	ldr	r3, [pc, #324]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800514a:	430a      	orrs	r2, r1
 800514c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	03db      	lsls	r3, r3, #15
 8005156:	429a      	cmp	r2, r3
 8005158:	d106      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800515a:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	4b4c      	ldr	r3, [pc, #304]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005160:	2180      	movs	r1, #128	; 0x80
 8005162:	0449      	lsls	r1, r1, #17
 8005164:	430a      	orrs	r2, r1
 8005166:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	03db      	lsls	r3, r3, #15
 8005170:	4013      	ands	r3, r2
 8005172:	d016      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005174:	4b46      	ldr	r3, [pc, #280]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005178:	4a4e      	ldr	r2, [pc, #312]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800517a:	4013      	ands	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005182:	4b43      	ldr	r3, [pc, #268]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005184:	430a      	orrs	r2, r1
 8005186:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	045b      	lsls	r3, r3, #17
 8005190:	429a      	cmp	r2, r3
 8005192:	d106      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005194:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800519a:	2180      	movs	r1, #128	; 0x80
 800519c:	0449      	lsls	r1, r1, #17
 800519e:	430a      	orrs	r2, r1
 80051a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	4013      	ands	r3, r2
 80051ac:	d014      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80051ae:	4b38      	ldr	r3, [pc, #224]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	2203      	movs	r2, #3
 80051b4:	4393      	bics	r3, r2
 80051b6:	0019      	movs	r1, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	4b34      	ldr	r3, [pc, #208]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051be:	430a      	orrs	r2, r1
 80051c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d106      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80051ca:	4b31      	ldr	r3, [pc, #196]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	4b30      	ldr	r3, [pc, #192]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d0:	2180      	movs	r1, #128	; 0x80
 80051d2:	0249      	lsls	r1, r1, #9
 80051d4:	430a      	orrs	r2, r1
 80051d6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	019b      	lsls	r3, r3, #6
 80051e0:	4013      	ands	r3, r2
 80051e2:	d014      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80051e4:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e8:	220c      	movs	r2, #12
 80051ea:	4393      	bics	r3, r2
 80051ec:	0019      	movs	r1, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f2:	4b27      	ldr	r3, [pc, #156]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051f4:	430a      	orrs	r2, r1
 80051f6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005200:	4b23      	ldr	r3, [pc, #140]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	0249      	lsls	r1, r1, #9
 800520a:	430a      	orrs	r2, r1
 800520c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	2380      	movs	r3, #128	; 0x80
 8005214:	045b      	lsls	r3, r3, #17
 8005216:	4013      	ands	r3, r2
 8005218:	d016      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800521a:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800521c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521e:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005220:	4013      	ands	r3, r2
 8005222:	0019      	movs	r1, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005228:	4b19      	ldr	r3, [pc, #100]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800522a:	430a      	orrs	r2, r1
 800522c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	429a      	cmp	r2, r3
 8005238:	d106      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800523a:	4b15      	ldr	r3, [pc, #84]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	4b14      	ldr	r3, [pc, #80]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	0449      	lsls	r1, r1, #17
 8005244:	430a      	orrs	r2, r1
 8005246:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	049b      	lsls	r3, r3, #18
 8005250:	4013      	ands	r3, r2
 8005252:	d016      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005254:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005258:	4a10      	ldr	r2, [pc, #64]	; (800529c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005264:	430a      	orrs	r2, r1
 8005266:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	429a      	cmp	r2, r3
 8005272:	d106      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	0449      	lsls	r1, r1, #17
 800527e:	430a      	orrs	r2, r1
 8005280:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005282:	2312      	movs	r3, #18
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	781b      	ldrb	r3, [r3, #0]
}
 8005288:	0018      	movs	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	b006      	add	sp, #24
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	efffffff 	.word	0xefffffff
 8005298:	fffff3ff 	.word	0xfffff3ff
 800529c:	fffffcff 	.word	0xfffffcff
 80052a0:	fff3ffff 	.word	0xfff3ffff
 80052a4:	ffcfffff 	.word	0xffcfffff
 80052a8:	ffffcfff 	.word	0xffffcfff
 80052ac:	ffff3fff 	.word	0xffff3fff
 80052b0:	ffbfffff 	.word	0xffbfffff
 80052b4:	feffffff 	.word	0xfeffffff

080052b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0a8      	b.n	800541c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d109      	bne.n	80052e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	2382      	movs	r3, #130	; 0x82
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	429a      	cmp	r2, r3
 80052dc:	d009      	beq.n	80052f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	61da      	str	r2, [r3, #28]
 80052e4:	e005      	b.n	80052f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	225d      	movs	r2, #93	; 0x5d
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	225c      	movs	r2, #92	; 0x5c
 8005308:	2100      	movs	r1, #0
 800530a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f7fd fc72 	bl	8002bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	225d      	movs	r2, #93	; 0x5d
 8005318:	2102      	movs	r1, #2
 800531a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2140      	movs	r1, #64	; 0x40
 8005328:	438a      	bics	r2, r1
 800532a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	23e0      	movs	r3, #224	; 0xe0
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	429a      	cmp	r2, r3
 8005336:	d902      	bls.n	800533e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e002      	b.n	8005344 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	015b      	lsls	r3, r3, #5
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	23f0      	movs	r3, #240	; 0xf0
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	429a      	cmp	r2, r3
 800534e:	d008      	beq.n	8005362 <HAL_SPI_Init+0xaa>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	23e0      	movs	r3, #224	; 0xe0
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	429a      	cmp	r2, r3
 800535a:	d002      	beq.n	8005362 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	2382      	movs	r3, #130	; 0x82
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	401a      	ands	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6899      	ldr	r1, [r3, #8]
 8005370:	2384      	movs	r3, #132	; 0x84
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	400b      	ands	r3, r1
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2102      	movs	r1, #2
 800537e:	400b      	ands	r3, r1
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2101      	movs	r1, #1
 8005388:	400b      	ands	r3, r1
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6999      	ldr	r1, [r3, #24]
 8005390:	2380      	movs	r3, #128	; 0x80
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	400b      	ands	r3, r1
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	2138      	movs	r1, #56	; 0x38
 800539e:	400b      	ands	r3, r1
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	400b      	ands	r3, r1
 80053aa:	431a      	orrs	r2, r3
 80053ac:	0011      	movs	r1, r2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053b2:	2380      	movs	r3, #128	; 0x80
 80053b4:	019b      	lsls	r3, r3, #6
 80053b6:	401a      	ands	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	2204      	movs	r2, #4
 80053c8:	401a      	ands	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2110      	movs	r1, #16
 80053d0:	400b      	ands	r3, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d8:	2108      	movs	r1, #8
 80053da:	400b      	ands	r3, r1
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68d9      	ldr	r1, [r3, #12]
 80053e2:	23f0      	movs	r3, #240	; 0xf0
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	400b      	ands	r3, r1
 80053e8:	431a      	orrs	r2, r3
 80053ea:	0011      	movs	r1, r2
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	015b      	lsls	r3, r3, #5
 80053f2:	401a      	ands	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4907      	ldr	r1, [pc, #28]	; (8005424 <HAL_SPI_Init+0x16c>)
 8005408:	400a      	ands	r2, r1
 800540a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	225d      	movs	r2, #93	; 0x5d
 8005416:	2101      	movs	r1, #1
 8005418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b004      	add	sp, #16
 8005422:	bd80      	pop	{r7, pc}
 8005424:	fffff7ff 	.word	0xfffff7ff

08005428 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	603b      	str	r3, [r7, #0]
 8005434:	1dbb      	adds	r3, r7, #6
 8005436:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005438:	231f      	movs	r3, #31
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	225c      	movs	r2, #92	; 0x5c
 8005444:	5c9b      	ldrb	r3, [r3, r2]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_SPI_Transmit+0x26>
 800544a:	2302      	movs	r3, #2
 800544c:	e140      	b.n	80056d0 <HAL_SPI_Transmit+0x2a8>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	225c      	movs	r2, #92	; 0x5c
 8005452:	2101      	movs	r1, #1
 8005454:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005456:	f7fd fd75 	bl	8002f44 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800545e:	2316      	movs	r3, #22
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	1dba      	adds	r2, r7, #6
 8005464:	8812      	ldrh	r2, [r2, #0]
 8005466:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	225d      	movs	r2, #93	; 0x5d
 800546c:	5c9b      	ldrb	r3, [r3, r2]
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d004      	beq.n	800547e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005474:	231f      	movs	r3, #31
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	2202      	movs	r2, #2
 800547a:	701a      	strb	r2, [r3, #0]
    goto error;
 800547c:	e11d      	b.n	80056ba <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_SPI_Transmit+0x64>
 8005484:	1dbb      	adds	r3, r7, #6
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d104      	bne.n	8005496 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800548c:	231f      	movs	r3, #31
 800548e:	18fb      	adds	r3, r7, r3
 8005490:	2201      	movs	r2, #1
 8005492:	701a      	strb	r2, [r3, #0]
    goto error;
 8005494:	e111      	b.n	80056ba <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	225d      	movs	r2, #93	; 0x5d
 800549a:	2103      	movs	r1, #3
 800549c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1dba      	adds	r2, r7, #6
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1dba      	adds	r2, r7, #6
 80054b6:	8812      	ldrh	r2, [r2, #0]
 80054b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2244      	movs	r2, #68	; 0x44
 80054c4:	2100      	movs	r1, #0
 80054c6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2246      	movs	r2, #70	; 0x46
 80054cc:	2100      	movs	r1, #0
 80054ce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d110      	bne.n	800550a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2140      	movs	r1, #64	; 0x40
 80054f4:	438a      	bics	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	01c9      	lsls	r1, r1, #7
 8005506:	430a      	orrs	r2, r1
 8005508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2240      	movs	r2, #64	; 0x40
 8005512:	4013      	ands	r3, r2
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d007      	beq.n	8005528 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2140      	movs	r1, #64	; 0x40
 8005524:	430a      	orrs	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	23e0      	movs	r3, #224	; 0xe0
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	429a      	cmp	r2, r3
 8005532:	d94e      	bls.n	80055d2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <HAL_SPI_Transmit+0x11e>
 800553c:	2316      	movs	r3, #22
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d13f      	bne.n	80055c6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800556a:	e02c      	b.n	80055c6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2202      	movs	r2, #2
 8005574:	4013      	ands	r3, r2
 8005576:	2b02      	cmp	r3, #2
 8005578:	d112      	bne.n	80055a0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	881a      	ldrh	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	1c9a      	adds	r2, r3, #2
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800559e:	e012      	b.n	80055c6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a0:	f7fd fcd0 	bl	8002f44 <HAL_GetTick>
 80055a4:	0002      	movs	r2, r0
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d802      	bhi.n	80055b6 <HAL_SPI_Transmit+0x18e>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	d102      	bne.n	80055bc <HAL_SPI_Transmit+0x194>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80055bc:	231f      	movs	r3, #31
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2203      	movs	r2, #3
 80055c2:	701a      	strb	r2, [r3, #0]
          goto error;
 80055c4:	e079      	b.n	80056ba <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1cd      	bne.n	800556c <HAL_SPI_Transmit+0x144>
 80055d0:	e04f      	b.n	8005672 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d004      	beq.n	80055e4 <HAL_SPI_Transmit+0x1bc>
 80055da:	2316      	movs	r3, #22
 80055dc:	18fb      	adds	r3, r7, r3
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d141      	bne.n	8005668 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	330c      	adds	r3, #12
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800560a:	e02d      	b.n	8005668 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2202      	movs	r2, #2
 8005614:	4013      	ands	r3, r2
 8005616:	2b02      	cmp	r3, #2
 8005618:	d113      	bne.n	8005642 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005640:	e012      	b.n	8005668 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005642:	f7fd fc7f 	bl	8002f44 <HAL_GetTick>
 8005646:	0002      	movs	r2, r0
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d802      	bhi.n	8005658 <HAL_SPI_Transmit+0x230>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	d102      	bne.n	800565e <HAL_SPI_Transmit+0x236>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800565e:	231f      	movs	r3, #31
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	2203      	movs	r2, #3
 8005664:	701a      	strb	r2, [r3, #0]
          goto error;
 8005666:	e028      	b.n	80056ba <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1cc      	bne.n	800560c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	0018      	movs	r0, r3
 800567a:	f000 fce5 	bl	8006048 <SPI_EndRxTxTransaction>
 800567e:	1e03      	subs	r3, r0, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10a      	bne.n	80056a6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	613b      	str	r3, [r7, #16]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80056ae:	231f      	movs	r3, #31
 80056b0:	18fb      	adds	r3, r7, r3
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e000      	b.n	80056ba <HAL_SPI_Transmit+0x292>
  }

error:
 80056b8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	225d      	movs	r2, #93	; 0x5d
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	225c      	movs	r2, #92	; 0x5c
 80056c6:	2100      	movs	r1, #0
 80056c8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80056ca:	231f      	movs	r3, #31
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	781b      	ldrb	r3, [r3, #0]
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b008      	add	sp, #32
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	1dbb      	adds	r3, r7, #6
 80056e6:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056e8:	2317      	movs	r3, #23
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	2382      	movs	r3, #130	; 0x82
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d113      	bne.n	8005724 <HAL_SPI_Receive+0x4c>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10f      	bne.n	8005724 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	225d      	movs	r2, #93	; 0x5d
 8005708:	2104      	movs	r1, #4
 800570a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800570c:	1dbb      	adds	r3, r7, #6
 800570e:	881c      	ldrh	r4, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	0023      	movs	r3, r4
 800571c:	f000 f928 	bl	8005970 <HAL_SPI_TransmitReceive>
 8005720:	0003      	movs	r3, r0
 8005722:	e11c      	b.n	800595e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	225c      	movs	r2, #92	; 0x5c
 8005728:	5c9b      	ldrb	r3, [r3, r2]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d101      	bne.n	8005732 <HAL_SPI_Receive+0x5a>
 800572e:	2302      	movs	r3, #2
 8005730:	e115      	b.n	800595e <HAL_SPI_Receive+0x286>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	225c      	movs	r2, #92	; 0x5c
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800573a:	f7fd fc03 	bl	8002f44 <HAL_GetTick>
 800573e:	0003      	movs	r3, r0
 8005740:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	225d      	movs	r2, #93	; 0x5d
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	d004      	beq.n	8005758 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800574e:	2317      	movs	r3, #23
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	2202      	movs	r2, #2
 8005754:	701a      	strb	r2, [r3, #0]
    goto error;
 8005756:	e0f7      	b.n	8005948 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_SPI_Receive+0x8e>
 800575e:	1dbb      	adds	r3, r7, #6
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d104      	bne.n	8005770 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005766:	2317      	movs	r3, #23
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	2201      	movs	r2, #1
 800576c:	701a      	strb	r2, [r3, #0]
    goto error;
 800576e:	e0eb      	b.n	8005948 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	225d      	movs	r2, #93	; 0x5d
 8005774:	2104      	movs	r1, #4
 8005776:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	1dba      	adds	r2, r7, #6
 8005788:	2144      	movs	r1, #68	; 0x44
 800578a:	8812      	ldrh	r2, [r2, #0]
 800578c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1dba      	adds	r2, r7, #6
 8005792:	2146      	movs	r1, #70	; 0x46
 8005794:	8812      	ldrh	r2, [r2, #0]
 8005796:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	23e0      	movs	r3, #224	; 0xe0
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	429a      	cmp	r2, r3
 80057c0:	d908      	bls.n	80057d4 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4966      	ldr	r1, [pc, #408]	; (8005968 <HAL_SPI_Receive+0x290>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	e008      	b.n	80057e6 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	0149      	lsls	r1, r1, #5
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	2380      	movs	r3, #128	; 0x80
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d10f      	bne.n	8005812 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2140      	movs	r1, #64	; 0x40
 80057fe:	438a      	bics	r2, r1
 8005800:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4957      	ldr	r1, [pc, #348]	; (800596c <HAL_SPI_Receive+0x294>)
 800580e:	400a      	ands	r2, r1
 8005810:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2240      	movs	r2, #64	; 0x40
 800581a:	4013      	ands	r3, r2
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d007      	beq.n	8005830 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2140      	movs	r1, #64	; 0x40
 800582c:	430a      	orrs	r2, r1
 800582e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	23e0      	movs	r3, #224	; 0xe0
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	429a      	cmp	r2, r3
 800583a:	d900      	bls.n	800583e <HAL_SPI_Receive+0x166>
 800583c:	e069      	b.n	8005912 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800583e:	e031      	b.n	80058a4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2201      	movs	r2, #1
 8005848:	4013      	ands	r3, r2
 800584a:	2b01      	cmp	r3, #1
 800584c:	d117      	bne.n	800587e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	001a      	movs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2246      	movs	r2, #70	; 0x46
 800586e:	5a9b      	ldrh	r3, [r3, r2]
 8005870:	b29b      	uxth	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	b299      	uxth	r1, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2246      	movs	r2, #70	; 0x46
 800587a:	5299      	strh	r1, [r3, r2]
 800587c:	e012      	b.n	80058a4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587e:	f7fd fb61 	bl	8002f44 <HAL_GetTick>
 8005882:	0002      	movs	r2, r0
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d802      	bhi.n	8005894 <HAL_SPI_Receive+0x1bc>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	3301      	adds	r3, #1
 8005892:	d102      	bne.n	800589a <HAL_SPI_Receive+0x1c2>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800589a:	2317      	movs	r3, #23
 800589c:	18fb      	adds	r3, r7, r3
 800589e:	2203      	movs	r2, #3
 80058a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80058a2:	e051      	b.n	8005948 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2246      	movs	r2, #70	; 0x46
 80058a8:	5a9b      	ldrh	r3, [r3, r2]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1c7      	bne.n	8005840 <HAL_SPI_Receive+0x168>
 80058b0:	e035      	b.n	800591e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2201      	movs	r2, #1
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d115      	bne.n	80058ec <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68da      	ldr	r2, [r3, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	b292      	uxth	r2, r2
 80058cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2246      	movs	r2, #70	; 0x46
 80058dc:	5a9b      	ldrh	r3, [r3, r2]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b299      	uxth	r1, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2246      	movs	r2, #70	; 0x46
 80058e8:	5299      	strh	r1, [r3, r2]
 80058ea:	e012      	b.n	8005912 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ec:	f7fd fb2a 	bl	8002f44 <HAL_GetTick>
 80058f0:	0002      	movs	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d802      	bhi.n	8005902 <HAL_SPI_Receive+0x22a>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	d102      	bne.n	8005908 <HAL_SPI_Receive+0x230>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005908:	2317      	movs	r3, #23
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	2203      	movs	r2, #3
 800590e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005910:	e01a      	b.n	8005948 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2246      	movs	r2, #70	; 0x46
 8005916:	5a9b      	ldrh	r3, [r3, r2]
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1c9      	bne.n	80058b2 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	0018      	movs	r0, r3
 8005926:	f000 fb31 	bl	8005f8c <SPI_EndRxTransaction>
 800592a:	1e03      	subs	r3, r0, #0
 800592c:	d002      	beq.n	8005934 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800593c:	2317      	movs	r3, #23
 800593e:	18fb      	adds	r3, r7, r3
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	e000      	b.n	8005948 <HAL_SPI_Receive+0x270>
  }

error :
 8005946:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	225d      	movs	r2, #93	; 0x5d
 800594c:	2101      	movs	r1, #1
 800594e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	225c      	movs	r2, #92	; 0x5c
 8005954:	2100      	movs	r1, #0
 8005956:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005958:	2317      	movs	r3, #23
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	781b      	ldrb	r3, [r3, #0]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b007      	add	sp, #28
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	ffffefff 	.word	0xffffefff
 800596c:	ffffbfff 	.word	0xffffbfff

08005970 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	; 0x28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	001a      	movs	r2, r3
 800597e:	1cbb      	adds	r3, r7, #2
 8005980:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005982:	2301      	movs	r3, #1
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005986:	2323      	movs	r3, #35	; 0x23
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	225c      	movs	r2, #92	; 0x5c
 8005992:	5c9b      	ldrb	r3, [r3, r2]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_SPI_TransmitReceive+0x2c>
 8005998:	2302      	movs	r3, #2
 800599a:	e1b5      	b.n	8005d08 <HAL_SPI_TransmitReceive+0x398>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	225c      	movs	r2, #92	; 0x5c
 80059a0:	2101      	movs	r1, #1
 80059a2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059a4:	f7fd face 	bl	8002f44 <HAL_GetTick>
 80059a8:	0003      	movs	r3, r0
 80059aa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059ac:	201b      	movs	r0, #27
 80059ae:	183b      	adds	r3, r7, r0
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	215d      	movs	r1, #93	; 0x5d
 80059b4:	5c52      	ldrb	r2, [r2, r1]
 80059b6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80059be:	2312      	movs	r3, #18
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	1cba      	adds	r2, r7, #2
 80059c4:	8812      	ldrh	r2, [r2, #0]
 80059c6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059c8:	183b      	adds	r3, r7, r0
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d011      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x84>
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	2382      	movs	r3, #130	; 0x82
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d107      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x7a>
 80059e2:	183b      	adds	r3, r7, r0
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d004      	beq.n	80059f4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80059ea:	2323      	movs	r3, #35	; 0x23
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	2202      	movs	r2, #2
 80059f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80059f2:	e17e      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d006      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x98>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_SPI_TransmitReceive+0x98>
 8005a00:	1cbb      	adds	r3, r7, #2
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005a08:	2323      	movs	r3, #35	; 0x23
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a10:	e16f      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	225d      	movs	r2, #93	; 0x5d
 8005a16:	5c9b      	ldrb	r3, [r3, r2]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d003      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	225d      	movs	r2, #93	; 0x5d
 8005a22:	2105      	movs	r1, #5
 8005a24:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1cba      	adds	r2, r7, #2
 8005a36:	2146      	movs	r1, #70	; 0x46
 8005a38:	8812      	ldrh	r2, [r2, #0]
 8005a3a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1cba      	adds	r2, r7, #2
 8005a40:	2144      	movs	r1, #68	; 0x44
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1cba      	adds	r2, r7, #2
 8005a50:	8812      	ldrh	r2, [r2, #0]
 8005a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1cba      	adds	r2, r7, #2
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	23e0      	movs	r3, #224	; 0xe0
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d908      	bls.n	8005a86 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	49a4      	ldr	r1, [pc, #656]	; (8005d10 <HAL_SPI_TransmitReceive+0x3a0>)
 8005a80:	400a      	ands	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	e008      	b.n	8005a98 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685a      	ldr	r2, [r3, #4]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	0149      	lsls	r1, r1, #5
 8005a94:	430a      	orrs	r2, r1
 8005a96:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2240      	movs	r2, #64	; 0x40
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d007      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2140      	movs	r1, #64	; 0x40
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	23e0      	movs	r3, #224	; 0xe0
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d800      	bhi.n	8005ac4 <HAL_SPI_TransmitReceive+0x154>
 8005ac2:	e07f      	b.n	8005bc4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d005      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x168>
 8005acc:	2312      	movs	r3, #18
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d000      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x168>
 8005ad6:	e069      	b.n	8005bac <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	881a      	ldrh	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afc:	e056      	b.n	8005bac <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2202      	movs	r2, #2
 8005b06:	4013      	ands	r3, r2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d11b      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x1d4>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d016      	beq.n	8005b44 <HAL_SPI_TransmitReceive+0x1d4>
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d113      	bne.n	8005b44 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	881a      	ldrh	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	1c9a      	adds	r2, r3, #2
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d11c      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x21c>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2246      	movs	r2, #70	; 0x46
 8005b56:	5a9b      	ldrh	r3, [r3, r2]
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d016      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	1c9a      	adds	r2, r3, #2
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2246      	movs	r2, #70	; 0x46
 8005b7a:	5a9b      	ldrh	r3, [r3, r2]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b299      	uxth	r1, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2246      	movs	r2, #70	; 0x46
 8005b86:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b8c:	f7fd f9da 	bl	8002f44 <HAL_GetTick>
 8005b90:	0002      	movs	r2, r0
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d807      	bhi.n	8005bac <HAL_SPI_TransmitReceive+0x23c>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	d004      	beq.n	8005bac <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005ba2:	2323      	movs	r3, #35	; 0x23
 8005ba4:	18fb      	adds	r3, r7, r3
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	701a      	strb	r2, [r3, #0]
        goto error;
 8005baa:	e0a2      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1a3      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x18e>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2246      	movs	r2, #70	; 0x46
 8005bba:	5a9b      	ldrh	r3, [r3, r2]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d19d      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x18e>
 8005bc2:	e085      	b.n	8005cd0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x268>
 8005bcc:	2312      	movs	r3, #18
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d000      	beq.n	8005bd8 <HAL_SPI_TransmitReceive+0x268>
 8005bd6:	e070      	b.n	8005cba <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	7812      	ldrb	r2, [r2, #0]
 8005be4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bfe:	e05c      	b.n	8005cba <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2202      	movs	r2, #2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d11c      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x2d8>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d017      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x2d8>
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d114      	bne.n	8005c48 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	330c      	adds	r3, #12
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d11e      	bne.n	8005c94 <HAL_SPI_TransmitReceive+0x324>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2246      	movs	r2, #70	; 0x46
 8005c5a:	5a9b      	ldrh	r3, [r3, r2]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d018      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	001a      	movs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2246      	movs	r2, #70	; 0x46
 8005c82:	5a9b      	ldrh	r3, [r3, r2]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b299      	uxth	r1, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2246      	movs	r2, #70	; 0x46
 8005c8e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c90:	2301      	movs	r3, #1
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c94:	f7fd f956 	bl	8002f44 <HAL_GetTick>
 8005c98:	0002      	movs	r2, r0
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d802      	bhi.n	8005caa <HAL_SPI_TransmitReceive+0x33a>
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	d102      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x340>
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d104      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005cb0:	2323      	movs	r3, #35	; 0x23
 8005cb2:	18fb      	adds	r3, r7, r3
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	701a      	strb	r2, [r3, #0]
        goto error;
 8005cb8:	e01b      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d19d      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x290>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2246      	movs	r2, #70	; 0x46
 8005cc8:	5a9b      	ldrh	r3, [r3, r2]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d197      	bne.n	8005c00 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 f9b6 	bl	8006048 <SPI_EndRxTxTransaction>
 8005cdc:	1e03      	subs	r3, r0, #0
 8005cde:	d007      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005ce0:	2323      	movs	r3, #35	; 0x23
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	661a      	str	r2, [r3, #96]	; 0x60
 8005cee:	e000      	b.n	8005cf2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005cf0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	225d      	movs	r2, #93	; 0x5d
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	225c      	movs	r2, #92	; 0x5c
 8005cfe:	2100      	movs	r1, #0
 8005d00:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d02:	2323      	movs	r3, #35	; 0x23
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	781b      	ldrb	r3, [r3, #0]
}
 8005d08:	0018      	movs	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b00a      	add	sp, #40	; 0x28
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	ffffefff 	.word	0xffffefff

08005d14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	225d      	movs	r2, #93	; 0x5d
 8005d20:	5c9b      	ldrb	r3, [r3, r2]
 8005d22:	b2db      	uxtb	r3, r3
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	1dfb      	adds	r3, r7, #7
 8005d3a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d3c:	f7fd f902 	bl	8002f44 <HAL_GetTick>
 8005d40:	0002      	movs	r2, r0
 8005d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d44:	1a9b      	subs	r3, r3, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	18d3      	adds	r3, r2, r3
 8005d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d4c:	f7fd f8fa 	bl	8002f44 <HAL_GetTick>
 8005d50:	0003      	movs	r3, r0
 8005d52:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d54:	4b3a      	ldr	r3, [pc, #232]	; (8005e40 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	015b      	lsls	r3, r3, #5
 8005d5a:	0d1b      	lsrs	r3, r3, #20
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	4353      	muls	r3, r2
 8005d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d62:	e058      	b.n	8005e16 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	d055      	beq.n	8005e16 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d6a:	f7fd f8eb 	bl	8002f44 <HAL_GetTick>
 8005d6e:	0002      	movs	r2, r0
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d902      	bls.n	8005d80 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d142      	bne.n	8005e06 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	21e0      	movs	r1, #224	; 0xe0
 8005d8c:	438a      	bics	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	685a      	ldr	r2, [r3, #4]
 8005d94:	2382      	movs	r3, #130	; 0x82
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d113      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	021b      	lsls	r3, r3, #8
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d005      	beq.n	8005db4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	2380      	movs	r3, #128	; 0x80
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d107      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2140      	movs	r1, #64	; 0x40
 8005dc0:	438a      	bics	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	019b      	lsls	r3, r3, #6
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d110      	bne.n	8005df2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	491a      	ldr	r1, [pc, #104]	; (8005e44 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005ddc:	400a      	ands	r2, r1
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	0189      	lsls	r1, r1, #6
 8005dee:	430a      	orrs	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	225d      	movs	r2, #93	; 0x5d
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	225c      	movs	r2, #92	; 0x5c
 8005dfe:	2100      	movs	r1, #0
 8005e00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e017      	b.n	8005e36 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	425a      	negs	r2, r3
 8005e26:	4153      	adcs	r3, r2
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	1dfb      	adds	r3, r7, #7
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d197      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	0018      	movs	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b008      	add	sp, #32
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	20000000 	.word	0x20000000
 8005e44:	ffffdfff 	.word	0xffffdfff

08005e48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e56:	2317      	movs	r3, #23
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e5e:	f7fd f871 	bl	8002f44 <HAL_GetTick>
 8005e62:	0002      	movs	r2, r0
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	1a9b      	subs	r3, r3, r2
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	18d3      	adds	r3, r2, r3
 8005e6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e6e:	f7fd f869 	bl	8002f44 <HAL_GetTick>
 8005e72:	0003      	movs	r3, r0
 8005e74:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e7e:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	0013      	movs	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	189b      	adds	r3, r3, r2
 8005e88:	00da      	lsls	r2, r3, #3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	0d1b      	lsrs	r3, r3, #20
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	4353      	muls	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e94:	e068      	b.n	8005f68 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	23c0      	movs	r3, #192	; 0xc0
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d10a      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d107      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	2117      	movs	r1, #23
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	d055      	beq.n	8005f68 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ebc:	f7fd f842 	bl	8002f44 <HAL_GetTick>
 8005ec0:	0002      	movs	r2, r0
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d902      	bls.n	8005ed2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d142      	bne.n	8005f58 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	21e0      	movs	r1, #224	; 0xe0
 8005ede:	438a      	bics	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	2382      	movs	r3, #130	; 0x82
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d113      	bne.n	8005f16 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d005      	beq.n	8005f06 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689a      	ldr	r2, [r3, #8]
 8005efe:	2380      	movs	r3, #128	; 0x80
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d107      	bne.n	8005f16 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2140      	movs	r1, #64	; 0x40
 8005f12:	438a      	bics	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	019b      	lsls	r3, r3, #6
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d110      	bne.n	8005f44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4916      	ldr	r1, [pc, #88]	; (8005f88 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005f2e:	400a      	ands	r2, r1
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2180      	movs	r1, #128	; 0x80
 8005f3e:	0189      	lsls	r1, r1, #6
 8005f40:	430a      	orrs	r2, r1
 8005f42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	225d      	movs	r2, #93	; 0x5d
 8005f48:	2101      	movs	r1, #1
 8005f4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	225c      	movs	r2, #92	; 0x5c
 8005f50:	2100      	movs	r1, #0
 8005f52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e010      	b.n	8005f7a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d18e      	bne.n	8005e96 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b00a      	add	sp, #40	; 0x28
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	20000000 	.word	0x20000000
 8005f88:	ffffdfff 	.word	0xffffdfff

08005f8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af02      	add	r7, sp, #8
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	2382      	movs	r3, #130	; 0x82
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d113      	bne.n	8005fcc <SPI_EndRxTransaction+0x40>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d005      	beq.n	8005fbc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d107      	bne.n	8005fcc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2140      	movs	r1, #64	; 0x40
 8005fc8:	438a      	bics	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	0013      	movs	r3, r2
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	f7ff fea7 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 8005fde:	1e03      	subs	r3, r0, #0
 8005fe0:	d007      	beq.n	8005ff2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e026      	b.n	8006040 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	2382      	movs	r3, #130	; 0x82
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d11f      	bne.n	800603e <SPI_EndRxTransaction+0xb2>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	2380      	movs	r3, #128	; 0x80
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	429a      	cmp	r2, r3
 8006008:	d005      	beq.n	8006016 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	2380      	movs	r3, #128	; 0x80
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	429a      	cmp	r2, r3
 8006014:	d113      	bne.n	800603e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	23c0      	movs	r3, #192	; 0xc0
 800601a:	00d9      	lsls	r1, r3, #3
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	0013      	movs	r3, r2
 8006024:	2200      	movs	r2, #0
 8006026:	f7ff ff0f 	bl	8005e48 <SPI_WaitFifoStateUntilTimeout>
 800602a:	1e03      	subs	r3, r0, #0
 800602c:	d007      	beq.n	800603e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006032:	2220      	movs	r2, #32
 8006034:	431a      	orrs	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e000      	b.n	8006040 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b004      	add	sp, #16
 8006046:	bd80      	pop	{r7, pc}

08006048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	23c0      	movs	r3, #192	; 0xc0
 8006058:	0159      	lsls	r1, r3, #5
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	0013      	movs	r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	f7ff fef0 	bl	8005e48 <SPI_WaitFifoStateUntilTimeout>
 8006068:	1e03      	subs	r3, r0, #0
 800606a:	d007      	beq.n	800607c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	2220      	movs	r2, #32
 8006072:	431a      	orrs	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e027      	b.n	80060cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	0013      	movs	r3, r2
 8006086:	2200      	movs	r2, #0
 8006088:	2180      	movs	r1, #128	; 0x80
 800608a:	f7ff fe4f 	bl	8005d2c <SPI_WaitFlagStateUntilTimeout>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d007      	beq.n	80060a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006096:	2220      	movs	r2, #32
 8006098:	431a      	orrs	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e014      	b.n	80060cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	23c0      	movs	r3, #192	; 0xc0
 80060a6:	00d9      	lsls	r1, r3, #3
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	0013      	movs	r3, r2
 80060b0:	2200      	movs	r2, #0
 80060b2:	f7ff fec9 	bl	8005e48 <SPI_WaitFifoStateUntilTimeout>
 80060b6:	1e03      	subs	r3, r0, #0
 80060b8:	d007      	beq.n	80060ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	2220      	movs	r2, #32
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e000      	b.n	80060cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	0018      	movs	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b004      	add	sp, #16
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e04a      	b.n	800617c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	223d      	movs	r2, #61	; 0x3d
 80060ea:	5c9b      	ldrb	r3, [r3, r2]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d107      	bne.n	8006102 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	223c      	movs	r2, #60	; 0x3c
 80060f6:	2100      	movs	r1, #0
 80060f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7fc fdc5 	bl	8002c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	223d      	movs	r2, #61	; 0x3d
 8006106:	2102      	movs	r1, #2
 8006108:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3304      	adds	r3, #4
 8006112:	0019      	movs	r1, r3
 8006114:	0010      	movs	r0, r2
 8006116:	f000 fd03 	bl	8006b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2248      	movs	r2, #72	; 0x48
 800611e:	2101      	movs	r1, #1
 8006120:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	223e      	movs	r2, #62	; 0x3e
 8006126:	2101      	movs	r1, #1
 8006128:	5499      	strb	r1, [r3, r2]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	223f      	movs	r2, #63	; 0x3f
 800612e:	2101      	movs	r1, #1
 8006130:	5499      	strb	r1, [r3, r2]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2240      	movs	r2, #64	; 0x40
 8006136:	2101      	movs	r1, #1
 8006138:	5499      	strb	r1, [r3, r2]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2241      	movs	r2, #65	; 0x41
 800613e:	2101      	movs	r1, #1
 8006140:	5499      	strb	r1, [r3, r2]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2242      	movs	r2, #66	; 0x42
 8006146:	2101      	movs	r1, #1
 8006148:	5499      	strb	r1, [r3, r2]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2243      	movs	r2, #67	; 0x43
 800614e:	2101      	movs	r1, #1
 8006150:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2244      	movs	r2, #68	; 0x44
 8006156:	2101      	movs	r1, #1
 8006158:	5499      	strb	r1, [r3, r2]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2245      	movs	r2, #69	; 0x45
 800615e:	2101      	movs	r1, #1
 8006160:	5499      	strb	r1, [r3, r2]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2246      	movs	r2, #70	; 0x46
 8006166:	2101      	movs	r1, #1
 8006168:	5499      	strb	r1, [r3, r2]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2247      	movs	r2, #71	; 0x47
 800616e:	2101      	movs	r1, #1
 8006170:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	223d      	movs	r2, #61	; 0x3d
 8006176:	2101      	movs	r1, #1
 8006178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	0018      	movs	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	b002      	add	sp, #8
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	223d      	movs	r2, #61	; 0x3d
 8006190:	5c9b      	ldrb	r3, [r3, r2]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e047      	b.n	800622c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	223d      	movs	r2, #61	; 0x3d
 80061a0:	2102      	movs	r1, #2
 80061a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2101      	movs	r1, #1
 80061b0:	430a      	orrs	r2, r1
 80061b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1e      	ldr	r2, [pc, #120]	; (8006234 <HAL_TIM_Base_Start_IT+0xb0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d014      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0x64>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	2380      	movs	r3, #128	; 0x80
 80061c4:	05db      	lsls	r3, r3, #23
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d00e      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0x64>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a1a      	ldr	r2, [pc, #104]	; (8006238 <HAL_TIM_Base_Start_IT+0xb4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0x64>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a18      	ldr	r2, [pc, #96]	; (800623c <HAL_TIM_Base_Start_IT+0xb8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0x64>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a17      	ldr	r2, [pc, #92]	; (8006240 <HAL_TIM_Base_Start_IT+0xbc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d116      	bne.n	8006216 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	4a15      	ldr	r2, [pc, #84]	; (8006244 <HAL_TIM_Base_Start_IT+0xc0>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b06      	cmp	r3, #6
 80061f8:	d016      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0xa4>
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	025b      	lsls	r3, r3, #9
 8006200:	429a      	cmp	r2, r3
 8006202:	d011      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2101      	movs	r1, #1
 8006210:	430a      	orrs	r2, r1
 8006212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006214:	e008      	b.n	8006228 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2101      	movs	r1, #1
 8006222:	430a      	orrs	r2, r1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e000      	b.n	800622a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	0018      	movs	r0, r3
 800622e:	46bd      	mov	sp, r7
 8006230:	b004      	add	sp, #16
 8006232:	bd80      	pop	{r7, pc}
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800
 8006240:	40014000 	.word	0x40014000
 8006244:	00010007 	.word	0x00010007

08006248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e04a      	b.n	80062f0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	223d      	movs	r2, #61	; 0x3d
 800625e:	5c9b      	ldrb	r3, [r3, r2]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d107      	bne.n	8006276 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	223c      	movs	r2, #60	; 0x3c
 800626a:	2100      	movs	r1, #0
 800626c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f000 f841 	bl	80062f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	223d      	movs	r2, #61	; 0x3d
 800627a:	2102      	movs	r1, #2
 800627c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	0019      	movs	r1, r3
 8006288:	0010      	movs	r0, r2
 800628a:	f000 fc49 	bl	8006b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2248      	movs	r2, #72	; 0x48
 8006292:	2101      	movs	r1, #1
 8006294:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	223e      	movs	r2, #62	; 0x3e
 800629a:	2101      	movs	r1, #1
 800629c:	5499      	strb	r1, [r3, r2]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	223f      	movs	r2, #63	; 0x3f
 80062a2:	2101      	movs	r1, #1
 80062a4:	5499      	strb	r1, [r3, r2]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2240      	movs	r2, #64	; 0x40
 80062aa:	2101      	movs	r1, #1
 80062ac:	5499      	strb	r1, [r3, r2]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2241      	movs	r2, #65	; 0x41
 80062b2:	2101      	movs	r1, #1
 80062b4:	5499      	strb	r1, [r3, r2]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2242      	movs	r2, #66	; 0x42
 80062ba:	2101      	movs	r1, #1
 80062bc:	5499      	strb	r1, [r3, r2]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2243      	movs	r2, #67	; 0x43
 80062c2:	2101      	movs	r1, #1
 80062c4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2244      	movs	r2, #68	; 0x44
 80062ca:	2101      	movs	r1, #1
 80062cc:	5499      	strb	r1, [r3, r2]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2245      	movs	r2, #69	; 0x45
 80062d2:	2101      	movs	r1, #1
 80062d4:	5499      	strb	r1, [r3, r2]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2246      	movs	r2, #70	; 0x46
 80062da:	2101      	movs	r1, #1
 80062dc:	5499      	strb	r1, [r3, r2]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2247      	movs	r2, #71	; 0x47
 80062e2:	2101      	movs	r1, #1
 80062e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	223d      	movs	r2, #61	; 0x3d
 80062ea:	2101      	movs	r1, #1
 80062ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	0018      	movs	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	b002      	add	sp, #8
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <HAL_TIM_PWM_Start+0x22>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	223e      	movs	r2, #62	; 0x3e
 800631c:	5c9b      	ldrb	r3, [r3, r2]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	1e5a      	subs	r2, r3, #1
 8006324:	4193      	sbcs	r3, r2
 8006326:	b2db      	uxtb	r3, r3
 8006328:	e037      	b.n	800639a <HAL_TIM_PWM_Start+0x92>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d108      	bne.n	8006342 <HAL_TIM_PWM_Start+0x3a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	223f      	movs	r2, #63	; 0x3f
 8006334:	5c9b      	ldrb	r3, [r3, r2]
 8006336:	b2db      	uxtb	r3, r3
 8006338:	3b01      	subs	r3, #1
 800633a:	1e5a      	subs	r2, r3, #1
 800633c:	4193      	sbcs	r3, r2
 800633e:	b2db      	uxtb	r3, r3
 8006340:	e02b      	b.n	800639a <HAL_TIM_PWM_Start+0x92>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d108      	bne.n	800635a <HAL_TIM_PWM_Start+0x52>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2240      	movs	r2, #64	; 0x40
 800634c:	5c9b      	ldrb	r3, [r3, r2]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	1e5a      	subs	r2, r3, #1
 8006354:	4193      	sbcs	r3, r2
 8006356:	b2db      	uxtb	r3, r3
 8006358:	e01f      	b.n	800639a <HAL_TIM_PWM_Start+0x92>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d108      	bne.n	8006372 <HAL_TIM_PWM_Start+0x6a>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2241      	movs	r2, #65	; 0x41
 8006364:	5c9b      	ldrb	r3, [r3, r2]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	4193      	sbcs	r3, r2
 800636e:	b2db      	uxtb	r3, r3
 8006370:	e013      	b.n	800639a <HAL_TIM_PWM_Start+0x92>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b10      	cmp	r3, #16
 8006376:	d108      	bne.n	800638a <HAL_TIM_PWM_Start+0x82>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2242      	movs	r2, #66	; 0x42
 800637c:	5c9b      	ldrb	r3, [r3, r2]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	1e5a      	subs	r2, r3, #1
 8006384:	4193      	sbcs	r3, r2
 8006386:	b2db      	uxtb	r3, r3
 8006388:	e007      	b.n	800639a <HAL_TIM_PWM_Start+0x92>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2243      	movs	r2, #67	; 0x43
 800638e:	5c9b      	ldrb	r3, [r3, r2]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	1e5a      	subs	r2, r3, #1
 8006396:	4193      	sbcs	r3, r2
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e090      	b.n	80064c4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Start+0xaa>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	223e      	movs	r2, #62	; 0x3e
 80063ac:	2102      	movs	r1, #2
 80063ae:	5499      	strb	r1, [r3, r2]
 80063b0:	e023      	b.n	80063fa <HAL_TIM_PWM_Start+0xf2>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start+0xba>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	223f      	movs	r2, #63	; 0x3f
 80063bc:	2102      	movs	r1, #2
 80063be:	5499      	strb	r1, [r3, r2]
 80063c0:	e01b      	b.n	80063fa <HAL_TIM_PWM_Start+0xf2>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start+0xca>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2240      	movs	r2, #64	; 0x40
 80063cc:	2102      	movs	r1, #2
 80063ce:	5499      	strb	r1, [r3, r2]
 80063d0:	e013      	b.n	80063fa <HAL_TIM_PWM_Start+0xf2>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Start+0xda>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2241      	movs	r2, #65	; 0x41
 80063dc:	2102      	movs	r1, #2
 80063de:	5499      	strb	r1, [r3, r2]
 80063e0:	e00b      	b.n	80063fa <HAL_TIM_PWM_Start+0xf2>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_PWM_Start+0xea>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2242      	movs	r2, #66	; 0x42
 80063ec:	2102      	movs	r1, #2
 80063ee:	5499      	strb	r1, [r3, r2]
 80063f0:	e003      	b.n	80063fa <HAL_TIM_PWM_Start+0xf2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2243      	movs	r2, #67	; 0x43
 80063f6:	2102      	movs	r1, #2
 80063f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	2201      	movs	r2, #1
 8006402:	0018      	movs	r0, r3
 8006404:	f000 ff76 	bl	80072f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a2f      	ldr	r2, [pc, #188]	; (80064cc <HAL_TIM_PWM_Start+0x1c4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00e      	beq.n	8006430 <HAL_TIM_PWM_Start+0x128>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a2e      	ldr	r2, [pc, #184]	; (80064d0 <HAL_TIM_PWM_Start+0x1c8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d009      	beq.n	8006430 <HAL_TIM_PWM_Start+0x128>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2c      	ldr	r2, [pc, #176]	; (80064d4 <HAL_TIM_PWM_Start+0x1cc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d004      	beq.n	8006430 <HAL_TIM_PWM_Start+0x128>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a2b      	ldr	r2, [pc, #172]	; (80064d8 <HAL_TIM_PWM_Start+0x1d0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d101      	bne.n	8006434 <HAL_TIM_PWM_Start+0x12c>
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_TIM_PWM_Start+0x12e>
 8006434:	2300      	movs	r3, #0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d008      	beq.n	800644c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	0209      	lsls	r1, r1, #8
 8006448:	430a      	orrs	r2, r1
 800644a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1e      	ldr	r2, [pc, #120]	; (80064cc <HAL_TIM_PWM_Start+0x1c4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d014      	beq.n	8006480 <HAL_TIM_PWM_Start+0x178>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	2380      	movs	r3, #128	; 0x80
 800645c:	05db      	lsls	r3, r3, #23
 800645e:	429a      	cmp	r2, r3
 8006460:	d00e      	beq.n	8006480 <HAL_TIM_PWM_Start+0x178>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <HAL_TIM_PWM_Start+0x1d4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_TIM_PWM_Start+0x178>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_TIM_PWM_Start+0x1d8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d004      	beq.n	8006480 <HAL_TIM_PWM_Start+0x178>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <HAL_TIM_PWM_Start+0x1c8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d116      	bne.n	80064ae <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <HAL_TIM_PWM_Start+0x1dc>)
 8006488:	4013      	ands	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b06      	cmp	r3, #6
 8006490:	d016      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x1b8>
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	025b      	lsls	r3, r3, #9
 8006498:	429a      	cmp	r2, r3
 800649a:	d011      	beq.n	80064c0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2101      	movs	r1, #1
 80064a8:	430a      	orrs	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ac:	e008      	b.n	80064c0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2101      	movs	r1, #1
 80064ba:	430a      	orrs	r2, r1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e000      	b.n	80064c2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	0018      	movs	r0, r3
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b004      	add	sp, #16
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	40012c00 	.word	0x40012c00
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	00010007 	.word	0x00010007

080064e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2202      	movs	r2, #2
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d124      	bne.n	8006548 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2202      	movs	r2, #2
 8006506:	4013      	ands	r3, r2
 8006508:	2b02      	cmp	r3, #2
 800650a:	d11d      	bne.n	8006548 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2203      	movs	r2, #3
 8006512:	4252      	negs	r2, r2
 8006514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2203      	movs	r2, #3
 8006524:	4013      	ands	r3, r2
 8006526:	d004      	beq.n	8006532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f000 fae0 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 8006530:	e007      	b.n	8006542 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0018      	movs	r0, r3
 8006536:	f000 fad3 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	0018      	movs	r0, r3
 800653e:	f000 fadf 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2204      	movs	r2, #4
 8006550:	4013      	ands	r3, r2
 8006552:	2b04      	cmp	r3, #4
 8006554:	d125      	bne.n	80065a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	2204      	movs	r2, #4
 800655e:	4013      	ands	r3, r2
 8006560:	2b04      	cmp	r3, #4
 8006562:	d11e      	bne.n	80065a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2205      	movs	r2, #5
 800656a:	4252      	negs	r2, r2
 800656c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2202      	movs	r2, #2
 8006572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	23c0      	movs	r3, #192	; 0xc0
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4013      	ands	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f000 fab3 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 800658a:	e007      	b.n	800659c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	0018      	movs	r0, r3
 8006590:	f000 faa6 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	0018      	movs	r0, r3
 8006598:	f000 fab2 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2208      	movs	r2, #8
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d124      	bne.n	80065fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2208      	movs	r2, #8
 80065b8:	4013      	ands	r3, r2
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d11d      	bne.n	80065fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2209      	movs	r2, #9
 80065c4:	4252      	negs	r2, r2
 80065c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2204      	movs	r2, #4
 80065cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2203      	movs	r2, #3
 80065d6:	4013      	ands	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	0018      	movs	r0, r3
 80065de:	f000 fa87 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 80065e2:	e007      	b.n	80065f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 fa7a 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0018      	movs	r0, r3
 80065f0:	f000 fa86 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2210      	movs	r2, #16
 8006602:	4013      	ands	r3, r2
 8006604:	2b10      	cmp	r3, #16
 8006606:	d125      	bne.n	8006654 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	2210      	movs	r2, #16
 8006610:	4013      	ands	r3, r2
 8006612:	2b10      	cmp	r3, #16
 8006614:	d11e      	bne.n	8006654 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2211      	movs	r2, #17
 800661c:	4252      	negs	r2, r2
 800661e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2208      	movs	r2, #8
 8006624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69da      	ldr	r2, [r3, #28]
 800662c:	23c0      	movs	r3, #192	; 0xc0
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4013      	ands	r3, r2
 8006632:	d004      	beq.n	800663e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fa5a 	bl	8006af0 <HAL_TIM_IC_CaptureCallback>
 800663c:	e007      	b.n	800664e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f000 fa4d 	bl	8006ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0018      	movs	r0, r3
 800664a:	f000 fa59 	bl	8006b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2201      	movs	r2, #1
 800665c:	4013      	ands	r3, r2
 800665e:	2b01      	cmp	r3, #1
 8006660:	d10f      	bne.n	8006682 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2201      	movs	r2, #1
 800666a:	4013      	ands	r3, r2
 800666c:	2b01      	cmp	r3, #1
 800666e:	d108      	bne.n	8006682 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2202      	movs	r2, #2
 8006676:	4252      	negs	r2, r2
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0018      	movs	r0, r3
 800667e:	f000 fa27 	bl	8006ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	4013      	ands	r3, r2
 800668c:	2b80      	cmp	r3, #128	; 0x80
 800668e:	d10f      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2280      	movs	r2, #128	; 0x80
 8006698:	4013      	ands	r3, r2
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d108      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2281      	movs	r2, #129	; 0x81
 80066a4:	4252      	negs	r2, r2
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 fec4 	bl	8007438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	2380      	movs	r3, #128	; 0x80
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	401a      	ands	r2, r3
 80066bc:	2380      	movs	r3, #128	; 0x80
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d10e      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2280      	movs	r2, #128	; 0x80
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d107      	bne.n	80066e2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a1c      	ldr	r2, [pc, #112]	; (8006748 <HAL_TIM_IRQHandler+0x260>)
 80066d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	0018      	movs	r0, r3
 80066de:	f000 feb3 	bl	8007448 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2240      	movs	r2, #64	; 0x40
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b40      	cmp	r3, #64	; 0x40
 80066ee:	d10f      	bne.n	8006710 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2240      	movs	r2, #64	; 0x40
 80066f8:	4013      	ands	r3, r2
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d108      	bne.n	8006710 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2241      	movs	r2, #65	; 0x41
 8006704:	4252      	negs	r2, r2
 8006706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0018      	movs	r0, r3
 800670c:	f000 fa00 	bl	8006b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2220      	movs	r2, #32
 8006718:	4013      	ands	r3, r2
 800671a:	2b20      	cmp	r3, #32
 800671c:	d10f      	bne.n	800673e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	4013      	ands	r3, r2
 8006728:	2b20      	cmp	r3, #32
 800672a:	d108      	bne.n	800673e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2221      	movs	r2, #33	; 0x21
 8006732:	4252      	negs	r2, r2
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fe75 	bl	8007428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800673e:	46c0      	nop			; (mov r8, r8)
 8006740:	46bd      	mov	sp, r7
 8006742:	b002      	add	sp, #8
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	fffffeff 	.word	0xfffffeff

0800674c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	223c      	movs	r2, #60	; 0x3c
 800675c:	5c9b      	ldrb	r3, [r3, r2]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006762:	2302      	movs	r3, #2
 8006764:	e0df      	b.n	8006926 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	223c      	movs	r2, #60	; 0x3c
 800676a:	2101      	movs	r1, #1
 800676c:	5499      	strb	r1, [r3, r2]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b14      	cmp	r3, #20
 8006772:	d900      	bls.n	8006776 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006774:	e0d1      	b.n	800691a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	009a      	lsls	r2, r3, #2
 800677a:	4b6d      	ldr	r3, [pc, #436]	; (8006930 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800677c:	18d3      	adds	r3, r2, r3
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0011      	movs	r1, r2
 800678a:	0018      	movs	r0, r3
 800678c:	f000 fa52 	bl	8006c34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2108      	movs	r1, #8
 800679c:	430a      	orrs	r2, r1
 800679e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	699a      	ldr	r2, [r3, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2104      	movs	r1, #4
 80067ac:	438a      	bics	r2, r1
 80067ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6999      	ldr	r1, [r3, #24]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	691a      	ldr	r2, [r3, #16]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	619a      	str	r2, [r3, #24]
      break;
 80067c2:	e0ab      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	0011      	movs	r1, r2
 80067cc:	0018      	movs	r0, r3
 80067ce:	f000 fabb 	bl	8006d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	0109      	lsls	r1, r1, #4
 80067e0:	430a      	orrs	r2, r1
 80067e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4951      	ldr	r1, [pc, #324]	; (8006934 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80067f0:	400a      	ands	r2, r1
 80067f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6999      	ldr	r1, [r3, #24]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	021a      	lsls	r2, r3, #8
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	619a      	str	r2, [r3, #24]
      break;
 8006808:	e088      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	0011      	movs	r1, r2
 8006812:	0018      	movs	r0, r3
 8006814:	f000 fb1c 	bl	8006e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2108      	movs	r1, #8
 8006824:	430a      	orrs	r2, r1
 8006826:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69da      	ldr	r2, [r3, #28]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2104      	movs	r1, #4
 8006834:	438a      	bics	r2, r1
 8006836:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	69d9      	ldr	r1, [r3, #28]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	61da      	str	r2, [r3, #28]
      break;
 800684a:	e067      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	0011      	movs	r1, r2
 8006854:	0018      	movs	r0, r3
 8006856:	f000 fb83 	bl	8006f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2180      	movs	r1, #128	; 0x80
 8006866:	0109      	lsls	r1, r1, #4
 8006868:	430a      	orrs	r2, r1
 800686a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69da      	ldr	r2, [r3, #28]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	492f      	ldr	r1, [pc, #188]	; (8006934 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006878:	400a      	ands	r2, r1
 800687a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69d9      	ldr	r1, [r3, #28]
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	021a      	lsls	r2, r3, #8
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	61da      	str	r2, [r3, #28]
      break;
 8006890:	e044      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	0011      	movs	r1, r2
 800689a:	0018      	movs	r0, r3
 800689c:	f000 fbca 	bl	8007034 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2108      	movs	r1, #8
 80068ac:	430a      	orrs	r2, r1
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2104      	movs	r1, #4
 80068bc:	438a      	bics	r2, r1
 80068be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068d2:	e023      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	0011      	movs	r1, r2
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 fc09 	bl	80070f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	0109      	lsls	r1, r1, #4
 80068f0:	430a      	orrs	r2, r1
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	490d      	ldr	r1, [pc, #52]	; (8006934 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006900:	400a      	ands	r2, r1
 8006902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	021a      	lsls	r2, r3, #8
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006918:	e000      	b.n	800691c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800691a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	223c      	movs	r2, #60	; 0x3c
 8006920:	2100      	movs	r1, #0
 8006922:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	0018      	movs	r0, r3
 8006928:	46bd      	mov	sp, r7
 800692a:	b004      	add	sp, #16
 800692c:	bd80      	pop	{r7, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	08007628 	.word	0x08007628
 8006934:	fffffbff 	.word	0xfffffbff

08006938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	223c      	movs	r2, #60	; 0x3c
 8006946:	5c9b      	ldrb	r3, [r3, r2]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <HAL_TIM_ConfigClockSource+0x18>
 800694c:	2302      	movs	r3, #2
 800694e:	e0b7      	b.n	8006ac0 <HAL_TIM_ConfigClockSource+0x188>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	223c      	movs	r2, #60	; 0x3c
 8006954:	2101      	movs	r1, #1
 8006956:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	223d      	movs	r2, #61	; 0x3d
 800695c:	2102      	movs	r1, #2
 800695e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a57      	ldr	r2, [pc, #348]	; (8006ac8 <HAL_TIM_ConfigClockSource+0x190>)
 800696c:	4013      	ands	r3, r2
 800696e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4a56      	ldr	r2, [pc, #344]	; (8006acc <HAL_TIM_ConfigClockSource+0x194>)
 8006974:	4013      	ands	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2280      	movs	r2, #128	; 0x80
 8006986:	0192      	lsls	r2, r2, #6
 8006988:	4293      	cmp	r3, r2
 800698a:	d040      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0xd6>
 800698c:	2280      	movs	r2, #128	; 0x80
 800698e:	0192      	lsls	r2, r2, #6
 8006990:	4293      	cmp	r3, r2
 8006992:	d900      	bls.n	8006996 <HAL_TIM_ConfigClockSource+0x5e>
 8006994:	e088      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 8006996:	2280      	movs	r2, #128	; 0x80
 8006998:	0152      	lsls	r2, r2, #5
 800699a:	4293      	cmp	r3, r2
 800699c:	d100      	bne.n	80069a0 <HAL_TIM_ConfigClockSource+0x68>
 800699e:	e085      	b.n	8006aac <HAL_TIM_ConfigClockSource+0x174>
 80069a0:	2280      	movs	r2, #128	; 0x80
 80069a2:	0152      	lsls	r2, r2, #5
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d900      	bls.n	80069aa <HAL_TIM_ConfigClockSource+0x72>
 80069a8:	e07e      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069aa:	2b70      	cmp	r3, #112	; 0x70
 80069ac:	d018      	beq.n	80069e0 <HAL_TIM_ConfigClockSource+0xa8>
 80069ae:	d900      	bls.n	80069b2 <HAL_TIM_ConfigClockSource+0x7a>
 80069b0:	e07a      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069b2:	2b60      	cmp	r3, #96	; 0x60
 80069b4:	d04f      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x11e>
 80069b6:	d900      	bls.n	80069ba <HAL_TIM_ConfigClockSource+0x82>
 80069b8:	e076      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069ba:	2b50      	cmp	r3, #80	; 0x50
 80069bc:	d03b      	beq.n	8006a36 <HAL_TIM_ConfigClockSource+0xfe>
 80069be:	d900      	bls.n	80069c2 <HAL_TIM_ConfigClockSource+0x8a>
 80069c0:	e072      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d057      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x13e>
 80069c6:	d900      	bls.n	80069ca <HAL_TIM_ConfigClockSource+0x92>
 80069c8:	e06e      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069ca:	2b30      	cmp	r3, #48	; 0x30
 80069cc:	d063      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x15e>
 80069ce:	d86b      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d060      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x15e>
 80069d4:	d868      	bhi.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d05d      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x15e>
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d05b      	beq.n	8006a96 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80069de:	e063      	b.n	8006aa8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f000 fc60 	bl	80072b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2277      	movs	r2, #119	; 0x77
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	609a      	str	r2, [r3, #8]
      break;
 8006a0c:	e04f      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6899      	ldr	r1, [r3, #8]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	f000 fc49 	bl	80072b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2180      	movs	r1, #128	; 0x80
 8006a2e:	01c9      	lsls	r1, r1, #7
 8006a30:	430a      	orrs	r2, r1
 8006a32:	609a      	str	r2, [r3, #8]
      break;
 8006a34:	e03b      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6818      	ldr	r0, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	6859      	ldr	r1, [r3, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	001a      	movs	r2, r3
 8006a44:	f000 fbba 	bl	80071bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2150      	movs	r1, #80	; 0x50
 8006a4e:	0018      	movs	r0, r3
 8006a50:	f000 fc14 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 8006a54:	e02b      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6859      	ldr	r1, [r3, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	001a      	movs	r2, r3
 8006a64:	f000 fbd8 	bl	8007218 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2160      	movs	r1, #96	; 0x60
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f000 fc04 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 8006a74:	e01b      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6818      	ldr	r0, [r3, #0]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6859      	ldr	r1, [r3, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	001a      	movs	r2, r3
 8006a84:	f000 fb9a 	bl	80071bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2140      	movs	r1, #64	; 0x40
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f000 fbf4 	bl	800727c <TIM_ITRx_SetConfig>
      break;
 8006a94:	e00b      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	0010      	movs	r0, r2
 8006aa2:	f000 fbeb 	bl	800727c <TIM_ITRx_SetConfig>
        break;
 8006aa6:	e002      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006aa8:	46c0      	nop			; (mov r8, r8)
 8006aaa:	e000      	b.n	8006aae <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006aac:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	223d      	movs	r2, #61	; 0x3d
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	223c      	movs	r2, #60	; 0x3c
 8006aba:	2100      	movs	r1, #0
 8006abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	b004      	add	sp, #16
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	ffceff88 	.word	0xffceff88
 8006acc:	ffff00ff 	.word	0xffff00ff

08006ad0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ad8:	46c0      	nop			; (mov r8, r8)
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b002      	add	sp, #8
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b002      	add	sp, #8
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	46bd      	mov	sp, r7
 8006afc:	b002      	add	sp, #8
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b08:	46c0      	nop			; (mov r8, r8)
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b18:	46c0      	nop			; (mov r8, r8)
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	b002      	add	sp, #8
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a38      	ldr	r2, [pc, #224]	; (8006c14 <TIM_Base_SetConfig+0xf4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00c      	beq.n	8006b52 <TIM_Base_SetConfig+0x32>
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	2380      	movs	r3, #128	; 0x80
 8006b3c:	05db      	lsls	r3, r3, #23
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d007      	beq.n	8006b52 <TIM_Base_SetConfig+0x32>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a34      	ldr	r2, [pc, #208]	; (8006c18 <TIM_Base_SetConfig+0xf8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d003      	beq.n	8006b52 <TIM_Base_SetConfig+0x32>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a33      	ldr	r2, [pc, #204]	; (8006c1c <TIM_Base_SetConfig+0xfc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d108      	bne.n	8006b64 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2270      	movs	r2, #112	; 0x70
 8006b56:	4393      	bics	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a2b      	ldr	r2, [pc, #172]	; (8006c14 <TIM_Base_SetConfig+0xf4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d01c      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	05db      	lsls	r3, r3, #23
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d017      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a27      	ldr	r2, [pc, #156]	; (8006c18 <TIM_Base_SetConfig+0xf8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a26      	ldr	r2, [pc, #152]	; (8006c1c <TIM_Base_SetConfig+0xfc>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00f      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a25      	ldr	r2, [pc, #148]	; (8006c20 <TIM_Base_SetConfig+0x100>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00b      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a24      	ldr	r2, [pc, #144]	; (8006c24 <TIM_Base_SetConfig+0x104>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a23      	ldr	r2, [pc, #140]	; (8006c28 <TIM_Base_SetConfig+0x108>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <TIM_Base_SetConfig+0x86>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a22      	ldr	r2, [pc, #136]	; (8006c2c <TIM_Base_SetConfig+0x10c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d108      	bne.n	8006bb8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a21      	ldr	r2, [pc, #132]	; (8006c30 <TIM_Base_SetConfig+0x110>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2280      	movs	r2, #128	; 0x80
 8006bbc:	4393      	bics	r3, r2
 8006bbe:	001a      	movs	r2, r3
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a0c      	ldr	r2, [pc, #48]	; (8006c14 <TIM_Base_SetConfig+0xf4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_Base_SetConfig+0xde>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a0e      	ldr	r2, [pc, #56]	; (8006c24 <TIM_Base_SetConfig+0x104>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_Base_SetConfig+0xde>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a0d      	ldr	r2, [pc, #52]	; (8006c28 <TIM_Base_SetConfig+0x108>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_Base_SetConfig+0xde>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a0c      	ldr	r2, [pc, #48]	; (8006c2c <TIM_Base_SetConfig+0x10c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d103      	bne.n	8006c06 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	615a      	str	r2, [r3, #20]
}
 8006c0c:	46c0      	nop			; (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b004      	add	sp, #16
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40012c00 	.word	0x40012c00
 8006c18:	40000400 	.word	0x40000400
 8006c1c:	40000800 	.word	0x40000800
 8006c20:	40002000 	.word	0x40002000
 8006c24:	40014000 	.word	0x40014000
 8006c28:	40014400 	.word	0x40014400
 8006c2c:	40014800 	.word	0x40014800
 8006c30:	fffffcff 	.word	0xfffffcff

08006c34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	2201      	movs	r2, #1
 8006c44:	4393      	bics	r3, r2
 8006c46:	001a      	movs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a32      	ldr	r2, [pc, #200]	; (8006d2c <TIM_OC1_SetConfig+0xf8>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2203      	movs	r2, #3
 8006c6a:	4393      	bics	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	4393      	bics	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a28      	ldr	r2, [pc, #160]	; (8006d30 <TIM_OC1_SetConfig+0xfc>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00b      	beq.n	8006caa <TIM_OC1_SetConfig+0x76>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a27      	ldr	r2, [pc, #156]	; (8006d34 <TIM_OC1_SetConfig+0x100>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d007      	beq.n	8006caa <TIM_OC1_SetConfig+0x76>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <TIM_OC1_SetConfig+0x104>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d003      	beq.n	8006caa <TIM_OC1_SetConfig+0x76>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <TIM_OC1_SetConfig+0x108>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d10c      	bne.n	8006cc4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2208      	movs	r2, #8
 8006cae:	4393      	bics	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	4393      	bics	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1a      	ldr	r2, [pc, #104]	; (8006d30 <TIM_OC1_SetConfig+0xfc>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00b      	beq.n	8006ce4 <TIM_OC1_SetConfig+0xb0>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <TIM_OC1_SetConfig+0x100>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d007      	beq.n	8006ce4 <TIM_OC1_SetConfig+0xb0>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <TIM_OC1_SetConfig+0x104>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d003      	beq.n	8006ce4 <TIM_OC1_SetConfig+0xb0>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a17      	ldr	r2, [pc, #92]	; (8006d3c <TIM_OC1_SetConfig+0x108>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d111      	bne.n	8006d08 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <TIM_OC1_SetConfig+0x10c>)
 8006ce8:	4013      	ands	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <TIM_OC1_SetConfig+0x110>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	621a      	str	r2, [r3, #32]
}
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b006      	add	sp, #24
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	46c0      	nop			; (mov r8, r8)
 8006d2c:	fffeff8f 	.word	0xfffeff8f
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40014000 	.word	0x40014000
 8006d38:	40014400 	.word	0x40014400
 8006d3c:	40014800 	.word	0x40014800
 8006d40:	fffffeff 	.word	0xfffffeff
 8006d44:	fffffdff 	.word	0xfffffdff

08006d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	2210      	movs	r2, #16
 8006d58:	4393      	bics	r3, r2
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a2e      	ldr	r2, [pc, #184]	; (8006e30 <TIM_OC2_SetConfig+0xe8>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4a2d      	ldr	r2, [pc, #180]	; (8006e34 <TIM_OC2_SetConfig+0xec>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	021b      	lsls	r3, r3, #8
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2220      	movs	r2, #32
 8006d92:	4393      	bics	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a24      	ldr	r2, [pc, #144]	; (8006e38 <TIM_OC2_SetConfig+0xf0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d10d      	bne.n	8006dc6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2280      	movs	r2, #128	; 0x80
 8006dae:	4393      	bics	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2240      	movs	r2, #64	; 0x40
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a1b      	ldr	r2, [pc, #108]	; (8006e38 <TIM_OC2_SetConfig+0xf0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00b      	beq.n	8006de6 <TIM_OC2_SetConfig+0x9e>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a1a      	ldr	r2, [pc, #104]	; (8006e3c <TIM_OC2_SetConfig+0xf4>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d007      	beq.n	8006de6 <TIM_OC2_SetConfig+0x9e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a19      	ldr	r2, [pc, #100]	; (8006e40 <TIM_OC2_SetConfig+0xf8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d003      	beq.n	8006de6 <TIM_OC2_SetConfig+0x9e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a18      	ldr	r2, [pc, #96]	; (8006e44 <TIM_OC2_SetConfig+0xfc>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d113      	bne.n	8006e0e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	4a17      	ldr	r2, [pc, #92]	; (8006e48 <TIM_OC2_SetConfig+0x100>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	4a16      	ldr	r2, [pc, #88]	; (8006e4c <TIM_OC2_SetConfig+0x104>)
 8006df2:	4013      	ands	r3, r2
 8006df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	46c0      	nop			; (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b006      	add	sp, #24
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	feff8fff 	.word	0xfeff8fff
 8006e34:	fffffcff 	.word	0xfffffcff
 8006e38:	40012c00 	.word	0x40012c00
 8006e3c:	40014000 	.word	0x40014000
 8006e40:	40014400 	.word	0x40014400
 8006e44:	40014800 	.word	0x40014800
 8006e48:	fffffbff 	.word	0xfffffbff
 8006e4c:	fffff7ff 	.word	0xfffff7ff

08006e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4a35      	ldr	r2, [pc, #212]	; (8006f34 <TIM_OC3_SetConfig+0xe4>)
 8006e60:	401a      	ands	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a1b      	ldr	r3, [r3, #32]
 8006e6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4a2f      	ldr	r2, [pc, #188]	; (8006f38 <TIM_OC3_SetConfig+0xe8>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2203      	movs	r2, #3
 8006e84:	4393      	bics	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <TIM_OC3_SetConfig+0xec>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <TIM_OC3_SetConfig+0xf0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d10d      	bne.n	8006eca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	4a24      	ldr	r2, [pc, #144]	; (8006f44 <TIM_OC3_SetConfig+0xf4>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	4a20      	ldr	r2, [pc, #128]	; (8006f48 <TIM_OC3_SetConfig+0xf8>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1c      	ldr	r2, [pc, #112]	; (8006f40 <TIM_OC3_SetConfig+0xf0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_OC3_SetConfig+0x9a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <TIM_OC3_SetConfig+0xfc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_OC3_SetConfig+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	; (8006f50 <TIM_OC3_SetConfig+0x100>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC3_SetConfig+0x9a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <TIM_OC3_SetConfig+0x104>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d113      	bne.n	8006f12 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	4a1a      	ldr	r2, [pc, #104]	; (8006f58 <TIM_OC3_SetConfig+0x108>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	4a19      	ldr	r2, [pc, #100]	; (8006f5c <TIM_OC3_SetConfig+0x10c>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	46c0      	nop			; (mov r8, r8)
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	b006      	add	sp, #24
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	fffffeff 	.word	0xfffffeff
 8006f38:	fffeff8f 	.word	0xfffeff8f
 8006f3c:	fffffdff 	.word	0xfffffdff
 8006f40:	40012c00 	.word	0x40012c00
 8006f44:	fffff7ff 	.word	0xfffff7ff
 8006f48:	fffffbff 	.word	0xfffffbff
 8006f4c:	40014000 	.word	0x40014000
 8006f50:	40014400 	.word	0x40014400
 8006f54:	40014800 	.word	0x40014800
 8006f58:	ffffefff 	.word	0xffffefff
 8006f5c:	ffffdfff 	.word	0xffffdfff

08006f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	4a28      	ldr	r2, [pc, #160]	; (8007010 <TIM_OC4_SetConfig+0xb0>)
 8006f70:	401a      	ands	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <TIM_OC4_SetConfig+0xb4>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4a21      	ldr	r2, [pc, #132]	; (8007018 <TIM_OC4_SetConfig+0xb8>)
 8006f94:	4013      	ands	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	021b      	lsls	r3, r3, #8
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	4a1d      	ldr	r2, [pc, #116]	; (800701c <TIM_OC4_SetConfig+0xbc>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a19      	ldr	r2, [pc, #100]	; (8007020 <TIM_OC4_SetConfig+0xc0>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00b      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x78>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a18      	ldr	r2, [pc, #96]	; (8007024 <TIM_OC4_SetConfig+0xc4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d007      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x78>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a17      	ldr	r2, [pc, #92]	; (8007028 <TIM_OC4_SetConfig+0xc8>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d003      	beq.n	8006fd8 <TIM_OC4_SetConfig+0x78>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a16      	ldr	r2, [pc, #88]	; (800702c <TIM_OC4_SetConfig+0xcc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d109      	bne.n	8006fec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4a15      	ldr	r2, [pc, #84]	; (8007030 <TIM_OC4_SetConfig+0xd0>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	019b      	lsls	r3, r3, #6
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	46bd      	mov	sp, r7
 800700a:	b006      	add	sp, #24
 800700c:	bd80      	pop	{r7, pc}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	ffffefff 	.word	0xffffefff
 8007014:	feff8fff 	.word	0xfeff8fff
 8007018:	fffffcff 	.word	0xfffffcff
 800701c:	ffffdfff 	.word	0xffffdfff
 8007020:	40012c00 	.word	0x40012c00
 8007024:	40014000 	.word	0x40014000
 8007028:	40014400 	.word	0x40014400
 800702c:	40014800 	.word	0x40014800
 8007030:	ffffbfff 	.word	0xffffbfff

08007034 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	4a25      	ldr	r2, [pc, #148]	; (80070d8 <TIM_OC5_SetConfig+0xa4>)
 8007044:	401a      	ands	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <TIM_OC5_SetConfig+0xa8>)
 8007060:	4013      	ands	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <TIM_OC5_SetConfig+0xac>)
 8007072:	4013      	ands	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	041b      	lsls	r3, r3, #16
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <TIM_OC5_SetConfig+0xb0>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d00b      	beq.n	80070a2 <TIM_OC5_SetConfig+0x6e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <TIM_OC5_SetConfig+0xb4>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d007      	beq.n	80070a2 <TIM_OC5_SetConfig+0x6e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC5_SetConfig+0xb8>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d003      	beq.n	80070a2 <TIM_OC5_SetConfig+0x6e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a14      	ldr	r2, [pc, #80]	; (80070f0 <TIM_OC5_SetConfig+0xbc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d109      	bne.n	80070b6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	4a0c      	ldr	r2, [pc, #48]	; (80070d8 <TIM_OC5_SetConfig+0xa4>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b006      	add	sp, #24
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	fffeffff 	.word	0xfffeffff
 80070dc:	fffeff8f 	.word	0xfffeff8f
 80070e0:	fffdffff 	.word	0xfffdffff
 80070e4:	40012c00 	.word	0x40012c00
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800

080070f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	4a26      	ldr	r2, [pc, #152]	; (800719c <TIM_OC6_SetConfig+0xa8>)
 8007104:	401a      	ands	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4a20      	ldr	r2, [pc, #128]	; (80071a0 <TIM_OC6_SetConfig+0xac>)
 8007120:	4013      	ands	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4a1c      	ldr	r2, [pc, #112]	; (80071a4 <TIM_OC6_SetConfig+0xb0>)
 8007134:	4013      	ands	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	051b      	lsls	r3, r3, #20
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <TIM_OC6_SetConfig+0xb4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d00b      	beq.n	8007164 <TIM_OC6_SetConfig+0x70>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a17      	ldr	r2, [pc, #92]	; (80071ac <TIM_OC6_SetConfig+0xb8>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <TIM_OC6_SetConfig+0x70>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a16      	ldr	r2, [pc, #88]	; (80071b0 <TIM_OC6_SetConfig+0xbc>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_OC6_SetConfig+0x70>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <TIM_OC6_SetConfig+0xc0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d109      	bne.n	8007178 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <TIM_OC6_SetConfig+0xc4>)
 8007168:	4013      	ands	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	029b      	lsls	r3, r3, #10
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	46bd      	mov	sp, r7
 8007196:	b006      	add	sp, #24
 8007198:	bd80      	pop	{r7, pc}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	ffefffff 	.word	0xffefffff
 80071a0:	feff8fff 	.word	0xfeff8fff
 80071a4:	ffdfffff 	.word	0xffdfffff
 80071a8:	40012c00 	.word	0x40012c00
 80071ac:	40014000 	.word	0x40014000
 80071b0:	40014400 	.word	0x40014400
 80071b4:	40014800 	.word	0x40014800
 80071b8:	fffbffff 	.word	0xfffbffff

080071bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	2201      	movs	r2, #1
 80071d4:	4393      	bics	r3, r2
 80071d6:	001a      	movs	r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	22f0      	movs	r2, #240	; 0xf0
 80071e6:	4393      	bics	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	220a      	movs	r2, #10
 80071f8:	4393      	bics	r3, r2
 80071fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	46c0      	nop			; (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b006      	add	sp, #24
 8007216:	bd80      	pop	{r7, pc}

08007218 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	2210      	movs	r2, #16
 800722a:	4393      	bics	r3, r2
 800722c:	001a      	movs	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	4a0d      	ldr	r2, [pc, #52]	; (8007278 <TIM_TI2_ConfigInputStage+0x60>)
 8007242:	4013      	ands	r3, r2
 8007244:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	031b      	lsls	r3, r3, #12
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4313      	orrs	r3, r2
 800724e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	22a0      	movs	r2, #160	; 0xa0
 8007254:	4393      	bics	r3, r2
 8007256:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	011b      	lsls	r3, r3, #4
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	4313      	orrs	r3, r2
 8007260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	46bd      	mov	sp, r7
 8007272:	b006      	add	sp, #24
 8007274:	bd80      	pop	{r7, pc}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	ffff0fff 	.word	0xffff0fff

0800727c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <TIM_ITRx_SetConfig+0x34>)
 8007290:	4013      	ands	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	2207      	movs	r2, #7
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	609a      	str	r2, [r3, #8]
}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	46bd      	mov	sp, r7
 80072aa:	b004      	add	sp, #16
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	ffcfff8f 	.word	0xffcfff8f

080072b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	4a09      	ldr	r2, [pc, #36]	; (80072f0 <TIM_ETR_SetConfig+0x3c>)
 80072cc:	4013      	ands	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	021a      	lsls	r2, r3, #8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4313      	orrs	r3, r2
 80072dc:	697a      	ldr	r2, [r7, #20]
 80072de:	4313      	orrs	r3, r2
 80072e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	46c0      	nop			; (mov r8, r8)
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b006      	add	sp, #24
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	ffff00ff 	.word	0xffff00ff

080072f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	221f      	movs	r2, #31
 8007304:	4013      	ands	r3, r2
 8007306:	2201      	movs	r2, #1
 8007308:	409a      	lsls	r2, r3
 800730a:	0013      	movs	r3, r2
 800730c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	43d2      	mvns	r2, r2
 8007316:	401a      	ands	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6a1a      	ldr	r2, [r3, #32]
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	211f      	movs	r1, #31
 8007324:	400b      	ands	r3, r1
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4099      	lsls	r1, r3
 800732a:	000b      	movs	r3, r1
 800732c:	431a      	orrs	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	621a      	str	r2, [r3, #32]
}
 8007332:	46c0      	nop			; (mov r8, r8)
 8007334:	46bd      	mov	sp, r7
 8007336:	b006      	add	sp, #24
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	223c      	movs	r2, #60	; 0x3c
 800734a:	5c9b      	ldrb	r3, [r3, r2]
 800734c:	2b01      	cmp	r3, #1
 800734e:	d101      	bne.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007350:	2302      	movs	r3, #2
 8007352:	e05a      	b.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	223c      	movs	r2, #60	; 0x3c
 8007358:	2101      	movs	r1, #1
 800735a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	223d      	movs	r2, #61	; 0x3d
 8007360:	2102      	movs	r1, #2
 8007362:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a26      	ldr	r2, [pc, #152]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d108      	bne.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	4a25      	ldr	r2, [pc, #148]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007382:	4013      	ands	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2270      	movs	r2, #112	; 0x70
 8007394:	4393      	bics	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a19      	ldr	r2, [pc, #100]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d014      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	2380      	movs	r3, #128	; 0x80
 80073ba:	05db      	lsls	r3, r3, #23
 80073bc:	429a      	cmp	r2, r3
 80073be:	d00e      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d009      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a14      	ldr	r2, [pc, #80]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d004      	beq.n	80073de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a12      	ldr	r2, [pc, #72]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d10c      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2280      	movs	r2, #128	; 0x80
 80073e2:	4393      	bics	r3, r2
 80073e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	223d      	movs	r2, #61	; 0x3d
 80073fc:	2101      	movs	r1, #1
 80073fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	223c      	movs	r2, #60	; 0x3c
 8007404:	2100      	movs	r1, #0
 8007406:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	0018      	movs	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	b004      	add	sp, #16
 8007410:	bd80      	pop	{r7, pc}
 8007412:	46c0      	nop			; (mov r8, r8)
 8007414:	40012c00 	.word	0x40012c00
 8007418:	ff0fffff 	.word	0xff0fffff
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40014000 	.word	0x40014000

08007428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007430:	46c0      	nop			; (mov r8, r8)
 8007432:	46bd      	mov	sp, r7
 8007434:	b002      	add	sp, #8
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007440:	46c0      	nop			; (mov r8, r8)
 8007442:	46bd      	mov	sp, r7
 8007444:	b002      	add	sp, #8
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007450:	46c0      	nop			; (mov r8, r8)
 8007452:	46bd      	mov	sp, r7
 8007454:	b002      	add	sp, #8
 8007456:	bd80      	pop	{r7, pc}

08007458 <__libc_init_array>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	2600      	movs	r6, #0
 800745c:	4d0c      	ldr	r5, [pc, #48]	; (8007490 <__libc_init_array+0x38>)
 800745e:	4c0d      	ldr	r4, [pc, #52]	; (8007494 <__libc_init_array+0x3c>)
 8007460:	1b64      	subs	r4, r4, r5
 8007462:	10a4      	asrs	r4, r4, #2
 8007464:	42a6      	cmp	r6, r4
 8007466:	d109      	bne.n	800747c <__libc_init_array+0x24>
 8007468:	2600      	movs	r6, #0
 800746a:	f000 f821 	bl	80074b0 <_init>
 800746e:	4d0a      	ldr	r5, [pc, #40]	; (8007498 <__libc_init_array+0x40>)
 8007470:	4c0a      	ldr	r4, [pc, #40]	; (800749c <__libc_init_array+0x44>)
 8007472:	1b64      	subs	r4, r4, r5
 8007474:	10a4      	asrs	r4, r4, #2
 8007476:	42a6      	cmp	r6, r4
 8007478:	d105      	bne.n	8007486 <__libc_init_array+0x2e>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	00b3      	lsls	r3, r6, #2
 800747e:	58eb      	ldr	r3, [r5, r3]
 8007480:	4798      	blx	r3
 8007482:	3601      	adds	r6, #1
 8007484:	e7ee      	b.n	8007464 <__libc_init_array+0xc>
 8007486:	00b3      	lsls	r3, r6, #2
 8007488:	58eb      	ldr	r3, [r5, r3]
 800748a:	4798      	blx	r3
 800748c:	3601      	adds	r6, #1
 800748e:	e7f2      	b.n	8007476 <__libc_init_array+0x1e>
 8007490:	0800767c 	.word	0x0800767c
 8007494:	0800767c 	.word	0x0800767c
 8007498:	0800767c 	.word	0x0800767c
 800749c:	08007680 	.word	0x08007680

080074a0 <memset>:
 80074a0:	0003      	movs	r3, r0
 80074a2:	1882      	adds	r2, r0, r2
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d100      	bne.n	80074aa <memset+0xa>
 80074a8:	4770      	bx	lr
 80074aa:	7019      	strb	r1, [r3, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	e7f9      	b.n	80074a4 <memset+0x4>

080074b0 <_init>:
 80074b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b2:	46c0      	nop			; (mov r8, r8)
 80074b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074b6:	bc08      	pop	{r3}
 80074b8:	469e      	mov	lr, r3
 80074ba:	4770      	bx	lr

080074bc <_fini>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c2:	bc08      	pop	{r3}
 80074c4:	469e      	mov	lr, r3
 80074c6:	4770      	bx	lr
