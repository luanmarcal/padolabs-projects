
motor-cc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007aac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08007b68  08007b68  00017b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d04  08007d04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007d04  08007d04  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d04  08007d04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d04  08007d04  00017d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d08  08007d08  00017d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  08007d18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08007d18  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111ca  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002401  00000000  00000000  000311fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00033600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8b3  00000000  00000000  000355f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011616  00000000  00000000  00051eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd0fe  00000000  00000000  000634c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001205bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  00120614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007b50 	.word	0x08007b50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08007b50 	.word	0x08007b50

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_f2uiz>:
 80003f0:	219e      	movs	r1, #158	; 0x9e
 80003f2:	b510      	push	{r4, lr}
 80003f4:	05c9      	lsls	r1, r1, #23
 80003f6:	1c04      	adds	r4, r0, #0
 80003f8:	f001 f976 	bl	80016e8 <__aeabi_fcmpge>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d103      	bne.n	8000408 <__aeabi_f2uiz+0x18>
 8000400:	1c20      	adds	r0, r4, #0
 8000402:	f000 faef 	bl	80009e4 <__aeabi_f2iz>
 8000406:	bd10      	pop	{r4, pc}
 8000408:	219e      	movs	r1, #158	; 0x9e
 800040a:	1c20      	adds	r0, r4, #0
 800040c:	05c9      	lsls	r1, r1, #23
 800040e:	f000 f921 	bl	8000654 <__aeabi_fsub>
 8000412:	f000 fae7 	bl	80009e4 <__aeabi_f2iz>
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	061b      	lsls	r3, r3, #24
 800041a:	469c      	mov	ip, r3
 800041c:	4460      	add	r0, ip
 800041e:	e7f2      	b.n	8000406 <__aeabi_f2uiz+0x16>

08000420 <__aeabi_fmul>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	4657      	mov	r7, sl
 8000424:	464e      	mov	r6, r9
 8000426:	4645      	mov	r5, r8
 8000428:	46de      	mov	lr, fp
 800042a:	0244      	lsls	r4, r0, #9
 800042c:	b5e0      	push	{r5, r6, r7, lr}
 800042e:	0045      	lsls	r5, r0, #1
 8000430:	1c0f      	adds	r7, r1, #0
 8000432:	0a64      	lsrs	r4, r4, #9
 8000434:	0e2d      	lsrs	r5, r5, #24
 8000436:	0fc6      	lsrs	r6, r0, #31
 8000438:	2d00      	cmp	r5, #0
 800043a:	d047      	beq.n	80004cc <__aeabi_fmul+0xac>
 800043c:	2dff      	cmp	r5, #255	; 0xff
 800043e:	d04d      	beq.n	80004dc <__aeabi_fmul+0xbc>
 8000440:	2300      	movs	r3, #0
 8000442:	2080      	movs	r0, #128	; 0x80
 8000444:	469a      	mov	sl, r3
 8000446:	469b      	mov	fp, r3
 8000448:	00e4      	lsls	r4, r4, #3
 800044a:	04c0      	lsls	r0, r0, #19
 800044c:	4304      	orrs	r4, r0
 800044e:	3d7f      	subs	r5, #127	; 0x7f
 8000450:	0278      	lsls	r0, r7, #9
 8000452:	0a43      	lsrs	r3, r0, #9
 8000454:	4699      	mov	r9, r3
 8000456:	007a      	lsls	r2, r7, #1
 8000458:	0ffb      	lsrs	r3, r7, #31
 800045a:	4698      	mov	r8, r3
 800045c:	0e12      	lsrs	r2, r2, #24
 800045e:	464b      	mov	r3, r9
 8000460:	d044      	beq.n	80004ec <__aeabi_fmul+0xcc>
 8000462:	2aff      	cmp	r2, #255	; 0xff
 8000464:	d011      	beq.n	800048a <__aeabi_fmul+0x6a>
 8000466:	00d8      	lsls	r0, r3, #3
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	04db      	lsls	r3, r3, #19
 800046c:	4303      	orrs	r3, r0
 800046e:	4699      	mov	r9, r3
 8000470:	2000      	movs	r0, #0
 8000472:	3a7f      	subs	r2, #127	; 0x7f
 8000474:	18ad      	adds	r5, r5, r2
 8000476:	4647      	mov	r7, r8
 8000478:	4653      	mov	r3, sl
 800047a:	4077      	eors	r7, r6
 800047c:	1c69      	adds	r1, r5, #1
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d83f      	bhi.n	8000502 <__aeabi_fmul+0xe2>
 8000482:	4a72      	ldr	r2, [pc, #456]	; (800064c <__aeabi_fmul+0x22c>)
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	58d3      	ldr	r3, [r2, r3]
 8000488:	469f      	mov	pc, r3
 800048a:	35ff      	adds	r5, #255	; 0xff
 800048c:	2b00      	cmp	r3, #0
 800048e:	d000      	beq.n	8000492 <__aeabi_fmul+0x72>
 8000490:	e079      	b.n	8000586 <__aeabi_fmul+0x166>
 8000492:	4652      	mov	r2, sl
 8000494:	2302      	movs	r3, #2
 8000496:	431a      	orrs	r2, r3
 8000498:	4692      	mov	sl, r2
 800049a:	2002      	movs	r0, #2
 800049c:	e7eb      	b.n	8000476 <__aeabi_fmul+0x56>
 800049e:	4647      	mov	r7, r8
 80004a0:	464c      	mov	r4, r9
 80004a2:	4683      	mov	fp, r0
 80004a4:	465b      	mov	r3, fp
 80004a6:	2b02      	cmp	r3, #2
 80004a8:	d028      	beq.n	80004fc <__aeabi_fmul+0xdc>
 80004aa:	2b03      	cmp	r3, #3
 80004ac:	d100      	bne.n	80004b0 <__aeabi_fmul+0x90>
 80004ae:	e0c6      	b.n	800063e <__aeabi_fmul+0x21e>
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d14f      	bne.n	8000554 <__aeabi_fmul+0x134>
 80004b4:	2000      	movs	r0, #0
 80004b6:	2400      	movs	r4, #0
 80004b8:	05c0      	lsls	r0, r0, #23
 80004ba:	07ff      	lsls	r7, r7, #31
 80004bc:	4320      	orrs	r0, r4
 80004be:	4338      	orrs	r0, r7
 80004c0:	bcf0      	pop	{r4, r5, r6, r7}
 80004c2:	46bb      	mov	fp, r7
 80004c4:	46b2      	mov	sl, r6
 80004c6:	46a9      	mov	r9, r5
 80004c8:	46a0      	mov	r8, r4
 80004ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004cc:	2c00      	cmp	r4, #0
 80004ce:	d171      	bne.n	80005b4 <__aeabi_fmul+0x194>
 80004d0:	2304      	movs	r3, #4
 80004d2:	469a      	mov	sl, r3
 80004d4:	3b03      	subs	r3, #3
 80004d6:	2500      	movs	r5, #0
 80004d8:	469b      	mov	fp, r3
 80004da:	e7b9      	b.n	8000450 <__aeabi_fmul+0x30>
 80004dc:	2c00      	cmp	r4, #0
 80004de:	d163      	bne.n	80005a8 <__aeabi_fmul+0x188>
 80004e0:	2308      	movs	r3, #8
 80004e2:	469a      	mov	sl, r3
 80004e4:	3b06      	subs	r3, #6
 80004e6:	25ff      	movs	r5, #255	; 0xff
 80004e8:	469b      	mov	fp, r3
 80004ea:	e7b1      	b.n	8000450 <__aeabi_fmul+0x30>
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d150      	bne.n	8000592 <__aeabi_fmul+0x172>
 80004f0:	4652      	mov	r2, sl
 80004f2:	3301      	adds	r3, #1
 80004f4:	431a      	orrs	r2, r3
 80004f6:	4692      	mov	sl, r2
 80004f8:	2001      	movs	r0, #1
 80004fa:	e7bc      	b.n	8000476 <__aeabi_fmul+0x56>
 80004fc:	20ff      	movs	r0, #255	; 0xff
 80004fe:	2400      	movs	r4, #0
 8000500:	e7da      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000502:	4648      	mov	r0, r9
 8000504:	0c26      	lsrs	r6, r4, #16
 8000506:	0424      	lsls	r4, r4, #16
 8000508:	0c22      	lsrs	r2, r4, #16
 800050a:	0404      	lsls	r4, r0, #16
 800050c:	0c24      	lsrs	r4, r4, #16
 800050e:	464b      	mov	r3, r9
 8000510:	0020      	movs	r0, r4
 8000512:	0c1b      	lsrs	r3, r3, #16
 8000514:	4350      	muls	r0, r2
 8000516:	4374      	muls	r4, r6
 8000518:	435a      	muls	r2, r3
 800051a:	435e      	muls	r6, r3
 800051c:	1912      	adds	r2, r2, r4
 800051e:	0c03      	lsrs	r3, r0, #16
 8000520:	189b      	adds	r3, r3, r2
 8000522:	429c      	cmp	r4, r3
 8000524:	d903      	bls.n	800052e <__aeabi_fmul+0x10e>
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	0252      	lsls	r2, r2, #9
 800052a:	4694      	mov	ip, r2
 800052c:	4466      	add	r6, ip
 800052e:	0400      	lsls	r0, r0, #16
 8000530:	041a      	lsls	r2, r3, #16
 8000532:	0c00      	lsrs	r0, r0, #16
 8000534:	1812      	adds	r2, r2, r0
 8000536:	0194      	lsls	r4, r2, #6
 8000538:	1e60      	subs	r0, r4, #1
 800053a:	4184      	sbcs	r4, r0
 800053c:	0c1b      	lsrs	r3, r3, #16
 800053e:	0e92      	lsrs	r2, r2, #26
 8000540:	199b      	adds	r3, r3, r6
 8000542:	4314      	orrs	r4, r2
 8000544:	019b      	lsls	r3, r3, #6
 8000546:	431c      	orrs	r4, r3
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	d572      	bpl.n	8000632 <__aeabi_fmul+0x212>
 800054c:	2001      	movs	r0, #1
 800054e:	0863      	lsrs	r3, r4, #1
 8000550:	4004      	ands	r4, r0
 8000552:	431c      	orrs	r4, r3
 8000554:	0008      	movs	r0, r1
 8000556:	307f      	adds	r0, #127	; 0x7f
 8000558:	2800      	cmp	r0, #0
 800055a:	dd3c      	ble.n	80005d6 <__aeabi_fmul+0x1b6>
 800055c:	0763      	lsls	r3, r4, #29
 800055e:	d004      	beq.n	800056a <__aeabi_fmul+0x14a>
 8000560:	230f      	movs	r3, #15
 8000562:	4023      	ands	r3, r4
 8000564:	2b04      	cmp	r3, #4
 8000566:	d000      	beq.n	800056a <__aeabi_fmul+0x14a>
 8000568:	3404      	adds	r4, #4
 800056a:	0123      	lsls	r3, r4, #4
 800056c:	d503      	bpl.n	8000576 <__aeabi_fmul+0x156>
 800056e:	3180      	adds	r1, #128	; 0x80
 8000570:	0008      	movs	r0, r1
 8000572:	4b37      	ldr	r3, [pc, #220]	; (8000650 <__aeabi_fmul+0x230>)
 8000574:	401c      	ands	r4, r3
 8000576:	28fe      	cmp	r0, #254	; 0xfe
 8000578:	dcc0      	bgt.n	80004fc <__aeabi_fmul+0xdc>
 800057a:	01a4      	lsls	r4, r4, #6
 800057c:	0a64      	lsrs	r4, r4, #9
 800057e:	b2c0      	uxtb	r0, r0
 8000580:	e79a      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000582:	0037      	movs	r7, r6
 8000584:	e78e      	b.n	80004a4 <__aeabi_fmul+0x84>
 8000586:	4652      	mov	r2, sl
 8000588:	2303      	movs	r3, #3
 800058a:	431a      	orrs	r2, r3
 800058c:	4692      	mov	sl, r2
 800058e:	2003      	movs	r0, #3
 8000590:	e771      	b.n	8000476 <__aeabi_fmul+0x56>
 8000592:	4648      	mov	r0, r9
 8000594:	f001 f8b2 	bl	80016fc <__clzsi2>
 8000598:	464a      	mov	r2, r9
 800059a:	1f43      	subs	r3, r0, #5
 800059c:	409a      	lsls	r2, r3
 800059e:	1a2d      	subs	r5, r5, r0
 80005a0:	4691      	mov	r9, r2
 80005a2:	2000      	movs	r0, #0
 80005a4:	3d76      	subs	r5, #118	; 0x76
 80005a6:	e766      	b.n	8000476 <__aeabi_fmul+0x56>
 80005a8:	230c      	movs	r3, #12
 80005aa:	469a      	mov	sl, r3
 80005ac:	3b09      	subs	r3, #9
 80005ae:	25ff      	movs	r5, #255	; 0xff
 80005b0:	469b      	mov	fp, r3
 80005b2:	e74d      	b.n	8000450 <__aeabi_fmul+0x30>
 80005b4:	0020      	movs	r0, r4
 80005b6:	f001 f8a1 	bl	80016fc <__clzsi2>
 80005ba:	2576      	movs	r5, #118	; 0x76
 80005bc:	1f43      	subs	r3, r0, #5
 80005be:	409c      	lsls	r4, r3
 80005c0:	2300      	movs	r3, #0
 80005c2:	426d      	negs	r5, r5
 80005c4:	469a      	mov	sl, r3
 80005c6:	469b      	mov	fp, r3
 80005c8:	1a2d      	subs	r5, r5, r0
 80005ca:	e741      	b.n	8000450 <__aeabi_fmul+0x30>
 80005cc:	2480      	movs	r4, #128	; 0x80
 80005ce:	2700      	movs	r7, #0
 80005d0:	20ff      	movs	r0, #255	; 0xff
 80005d2:	03e4      	lsls	r4, r4, #15
 80005d4:	e770      	b.n	80004b8 <__aeabi_fmul+0x98>
 80005d6:	2301      	movs	r3, #1
 80005d8:	1a1b      	subs	r3, r3, r0
 80005da:	2b1b      	cmp	r3, #27
 80005dc:	dd00      	ble.n	80005e0 <__aeabi_fmul+0x1c0>
 80005de:	e769      	b.n	80004b4 <__aeabi_fmul+0x94>
 80005e0:	319e      	adds	r1, #158	; 0x9e
 80005e2:	0020      	movs	r0, r4
 80005e4:	408c      	lsls	r4, r1
 80005e6:	40d8      	lsrs	r0, r3
 80005e8:	1e63      	subs	r3, r4, #1
 80005ea:	419c      	sbcs	r4, r3
 80005ec:	4304      	orrs	r4, r0
 80005ee:	0763      	lsls	r3, r4, #29
 80005f0:	d004      	beq.n	80005fc <__aeabi_fmul+0x1dc>
 80005f2:	230f      	movs	r3, #15
 80005f4:	4023      	ands	r3, r4
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d000      	beq.n	80005fc <__aeabi_fmul+0x1dc>
 80005fa:	3404      	adds	r4, #4
 80005fc:	0163      	lsls	r3, r4, #5
 80005fe:	d51a      	bpl.n	8000636 <__aeabi_fmul+0x216>
 8000600:	2001      	movs	r0, #1
 8000602:	2400      	movs	r4, #0
 8000604:	e758      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000606:	2080      	movs	r0, #128	; 0x80
 8000608:	03c0      	lsls	r0, r0, #15
 800060a:	4204      	tst	r4, r0
 800060c:	d009      	beq.n	8000622 <__aeabi_fmul+0x202>
 800060e:	464b      	mov	r3, r9
 8000610:	4203      	tst	r3, r0
 8000612:	d106      	bne.n	8000622 <__aeabi_fmul+0x202>
 8000614:	464c      	mov	r4, r9
 8000616:	4304      	orrs	r4, r0
 8000618:	0264      	lsls	r4, r4, #9
 800061a:	4647      	mov	r7, r8
 800061c:	20ff      	movs	r0, #255	; 0xff
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	e74a      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000622:	2080      	movs	r0, #128	; 0x80
 8000624:	03c0      	lsls	r0, r0, #15
 8000626:	4304      	orrs	r4, r0
 8000628:	0264      	lsls	r4, r4, #9
 800062a:	0037      	movs	r7, r6
 800062c:	20ff      	movs	r0, #255	; 0xff
 800062e:	0a64      	lsrs	r4, r4, #9
 8000630:	e742      	b.n	80004b8 <__aeabi_fmul+0x98>
 8000632:	0029      	movs	r1, r5
 8000634:	e78e      	b.n	8000554 <__aeabi_fmul+0x134>
 8000636:	01a4      	lsls	r4, r4, #6
 8000638:	2000      	movs	r0, #0
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	e73c      	b.n	80004b8 <__aeabi_fmul+0x98>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4304      	orrs	r4, r0
 8000644:	0264      	lsls	r4, r4, #9
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	0a64      	lsrs	r4, r4, #9
 800064a:	e735      	b.n	80004b8 <__aeabi_fmul+0x98>
 800064c:	08007b68 	.word	0x08007b68
 8000650:	f7ffffff 	.word	0xf7ffffff

08000654 <__aeabi_fsub>:
 8000654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000656:	4646      	mov	r6, r8
 8000658:	46d6      	mov	lr, sl
 800065a:	464f      	mov	r7, r9
 800065c:	0243      	lsls	r3, r0, #9
 800065e:	0a5b      	lsrs	r3, r3, #9
 8000660:	00da      	lsls	r2, r3, #3
 8000662:	4694      	mov	ip, r2
 8000664:	024a      	lsls	r2, r1, #9
 8000666:	b5c0      	push	{r6, r7, lr}
 8000668:	0044      	lsls	r4, r0, #1
 800066a:	0a56      	lsrs	r6, r2, #9
 800066c:	1c05      	adds	r5, r0, #0
 800066e:	46b0      	mov	r8, r6
 8000670:	0e24      	lsrs	r4, r4, #24
 8000672:	004e      	lsls	r6, r1, #1
 8000674:	0992      	lsrs	r2, r2, #6
 8000676:	001f      	movs	r7, r3
 8000678:	0020      	movs	r0, r4
 800067a:	4692      	mov	sl, r2
 800067c:	0fed      	lsrs	r5, r5, #31
 800067e:	0e36      	lsrs	r6, r6, #24
 8000680:	0fc9      	lsrs	r1, r1, #31
 8000682:	2eff      	cmp	r6, #255	; 0xff
 8000684:	d100      	bne.n	8000688 <__aeabi_fsub+0x34>
 8000686:	e07f      	b.n	8000788 <__aeabi_fsub+0x134>
 8000688:	2201      	movs	r2, #1
 800068a:	4051      	eors	r1, r2
 800068c:	428d      	cmp	r5, r1
 800068e:	d051      	beq.n	8000734 <__aeabi_fsub+0xe0>
 8000690:	1ba2      	subs	r2, r4, r6
 8000692:	4691      	mov	r9, r2
 8000694:	2a00      	cmp	r2, #0
 8000696:	dc00      	bgt.n	800069a <__aeabi_fsub+0x46>
 8000698:	e07e      	b.n	8000798 <__aeabi_fsub+0x144>
 800069a:	2e00      	cmp	r6, #0
 800069c:	d100      	bne.n	80006a0 <__aeabi_fsub+0x4c>
 800069e:	e099      	b.n	80007d4 <__aeabi_fsub+0x180>
 80006a0:	2cff      	cmp	r4, #255	; 0xff
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fsub+0x52>
 80006a4:	e08c      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	4652      	mov	r2, sl
 80006aa:	04db      	lsls	r3, r3, #19
 80006ac:	431a      	orrs	r2, r3
 80006ae:	4692      	mov	sl, r2
 80006b0:	464a      	mov	r2, r9
 80006b2:	2301      	movs	r3, #1
 80006b4:	2a1b      	cmp	r2, #27
 80006b6:	dc08      	bgt.n	80006ca <__aeabi_fsub+0x76>
 80006b8:	4653      	mov	r3, sl
 80006ba:	2120      	movs	r1, #32
 80006bc:	40d3      	lsrs	r3, r2
 80006be:	1a89      	subs	r1, r1, r2
 80006c0:	4652      	mov	r2, sl
 80006c2:	408a      	lsls	r2, r1
 80006c4:	1e51      	subs	r1, r2, #1
 80006c6:	418a      	sbcs	r2, r1
 80006c8:	4313      	orrs	r3, r2
 80006ca:	4662      	mov	r2, ip
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	015a      	lsls	r2, r3, #5
 80006d0:	d400      	bmi.n	80006d4 <__aeabi_fsub+0x80>
 80006d2:	e0f3      	b.n	80008bc <__aeabi_fsub+0x268>
 80006d4:	019b      	lsls	r3, r3, #6
 80006d6:	099e      	lsrs	r6, r3, #6
 80006d8:	0030      	movs	r0, r6
 80006da:	f001 f80f 	bl	80016fc <__clzsi2>
 80006de:	3805      	subs	r0, #5
 80006e0:	4086      	lsls	r6, r0
 80006e2:	4284      	cmp	r4, r0
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_fsub+0x94>
 80006e6:	e0f7      	b.n	80008d8 <__aeabi_fsub+0x284>
 80006e8:	0032      	movs	r2, r6
 80006ea:	1b04      	subs	r4, r0, r4
 80006ec:	2020      	movs	r0, #32
 80006ee:	3401      	adds	r4, #1
 80006f0:	40e2      	lsrs	r2, r4
 80006f2:	1b04      	subs	r4, r0, r4
 80006f4:	40a6      	lsls	r6, r4
 80006f6:	0033      	movs	r3, r6
 80006f8:	1e5e      	subs	r6, r3, #1
 80006fa:	41b3      	sbcs	r3, r6
 80006fc:	2400      	movs	r4, #0
 80006fe:	4313      	orrs	r3, r2
 8000700:	075a      	lsls	r2, r3, #29
 8000702:	d004      	beq.n	800070e <__aeabi_fsub+0xba>
 8000704:	220f      	movs	r2, #15
 8000706:	401a      	ands	r2, r3
 8000708:	2a04      	cmp	r2, #4
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0xba>
 800070c:	3304      	adds	r3, #4
 800070e:	015a      	lsls	r2, r3, #5
 8000710:	d400      	bmi.n	8000714 <__aeabi_fsub+0xc0>
 8000712:	e0d6      	b.n	80008c2 <__aeabi_fsub+0x26e>
 8000714:	1c62      	adds	r2, r4, #1
 8000716:	2cfe      	cmp	r4, #254	; 0xfe
 8000718:	d100      	bne.n	800071c <__aeabi_fsub+0xc8>
 800071a:	e0da      	b.n	80008d2 <__aeabi_fsub+0x27e>
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	0a5f      	lsrs	r7, r3, #9
 8000720:	b2d0      	uxtb	r0, r2
 8000722:	05c0      	lsls	r0, r0, #23
 8000724:	4338      	orrs	r0, r7
 8000726:	07ed      	lsls	r5, r5, #31
 8000728:	4328      	orrs	r0, r5
 800072a:	bce0      	pop	{r5, r6, r7}
 800072c:	46ba      	mov	sl, r7
 800072e:	46b1      	mov	r9, r6
 8000730:	46a8      	mov	r8, r5
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000734:	1ba2      	subs	r2, r4, r6
 8000736:	4691      	mov	r9, r2
 8000738:	2a00      	cmp	r2, #0
 800073a:	dd63      	ble.n	8000804 <__aeabi_fsub+0x1b0>
 800073c:	2e00      	cmp	r6, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fsub+0xee>
 8000740:	e099      	b.n	8000876 <__aeabi_fsub+0x222>
 8000742:	2cff      	cmp	r4, #255	; 0xff
 8000744:	d03c      	beq.n	80007c0 <__aeabi_fsub+0x16c>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	4652      	mov	r2, sl
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	431a      	orrs	r2, r3
 800074e:	4692      	mov	sl, r2
 8000750:	464a      	mov	r2, r9
 8000752:	2301      	movs	r3, #1
 8000754:	2a1b      	cmp	r2, #27
 8000756:	dc08      	bgt.n	800076a <__aeabi_fsub+0x116>
 8000758:	4653      	mov	r3, sl
 800075a:	2120      	movs	r1, #32
 800075c:	40d3      	lsrs	r3, r2
 800075e:	1a89      	subs	r1, r1, r2
 8000760:	4652      	mov	r2, sl
 8000762:	408a      	lsls	r2, r1
 8000764:	1e51      	subs	r1, r2, #1
 8000766:	418a      	sbcs	r2, r1
 8000768:	4313      	orrs	r3, r2
 800076a:	4463      	add	r3, ip
 800076c:	015a      	lsls	r2, r3, #5
 800076e:	d400      	bmi.n	8000772 <__aeabi_fsub+0x11e>
 8000770:	e0a4      	b.n	80008bc <__aeabi_fsub+0x268>
 8000772:	3401      	adds	r4, #1
 8000774:	2cff      	cmp	r4, #255	; 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fsub+0x126>
 8000778:	e0ab      	b.n	80008d2 <__aeabi_fsub+0x27e>
 800077a:	2201      	movs	r2, #1
 800077c:	4997      	ldr	r1, [pc, #604]	; (80009dc <__aeabi_fsub+0x388>)
 800077e:	401a      	ands	r2, r3
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	400b      	ands	r3, r1
 8000784:	4313      	orrs	r3, r2
 8000786:	e7bb      	b.n	8000700 <__aeabi_fsub+0xac>
 8000788:	2a00      	cmp	r2, #0
 800078a:	d032      	beq.n	80007f2 <__aeabi_fsub+0x19e>
 800078c:	428d      	cmp	r5, r1
 800078e:	d035      	beq.n	80007fc <__aeabi_fsub+0x1a8>
 8000790:	22ff      	movs	r2, #255	; 0xff
 8000792:	4252      	negs	r2, r2
 8000794:	4691      	mov	r9, r2
 8000796:	44a1      	add	r9, r4
 8000798:	464a      	mov	r2, r9
 800079a:	2a00      	cmp	r2, #0
 800079c:	d051      	beq.n	8000842 <__aeabi_fsub+0x1ee>
 800079e:	1b30      	subs	r0, r6, r4
 80007a0:	2c00      	cmp	r4, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fsub+0x152>
 80007a4:	e09c      	b.n	80008e0 <__aeabi_fsub+0x28c>
 80007a6:	4663      	mov	r3, ip
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d100      	bne.n	80007ae <__aeabi_fsub+0x15a>
 80007ac:	e0df      	b.n	800096e <__aeabi_fsub+0x31a>
 80007ae:	3801      	subs	r0, #1
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fsub+0x162>
 80007b4:	e0f7      	b.n	80009a6 <__aeabi_fsub+0x352>
 80007b6:	2eff      	cmp	r6, #255	; 0xff
 80007b8:	d000      	beq.n	80007bc <__aeabi_fsub+0x168>
 80007ba:	e099      	b.n	80008f0 <__aeabi_fsub+0x29c>
 80007bc:	000d      	movs	r5, r1
 80007be:	4643      	mov	r3, r8
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fsub+0x172>
 80007c4:	e085      	b.n	80008d2 <__aeabi_fsub+0x27e>
 80007c6:	2780      	movs	r7, #128	; 0x80
 80007c8:	03ff      	lsls	r7, r7, #15
 80007ca:	431f      	orrs	r7, r3
 80007cc:	027f      	lsls	r7, r7, #9
 80007ce:	20ff      	movs	r0, #255	; 0xff
 80007d0:	0a7f      	lsrs	r7, r7, #9
 80007d2:	e7a6      	b.n	8000722 <__aeabi_fsub+0xce>
 80007d4:	4652      	mov	r2, sl
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d074      	beq.n	80008c4 <__aeabi_fsub+0x270>
 80007da:	2201      	movs	r2, #1
 80007dc:	4252      	negs	r2, r2
 80007de:	4690      	mov	r8, r2
 80007e0:	44c1      	add	r9, r8
 80007e2:	464a      	mov	r2, r9
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_fsub+0x196>
 80007e8:	e0c8      	b.n	800097c <__aeabi_fsub+0x328>
 80007ea:	2cff      	cmp	r4, #255	; 0xff
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fsub+0x19c>
 80007ee:	e75f      	b.n	80006b0 <__aeabi_fsub+0x5c>
 80007f0:	e7e6      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80007f2:	2201      	movs	r2, #1
 80007f4:	4051      	eors	r1, r2
 80007f6:	42a9      	cmp	r1, r5
 80007f8:	d000      	beq.n	80007fc <__aeabi_fsub+0x1a8>
 80007fa:	e749      	b.n	8000690 <__aeabi_fsub+0x3c>
 80007fc:	22ff      	movs	r2, #255	; 0xff
 80007fe:	4252      	negs	r2, r2
 8000800:	4691      	mov	r9, r2
 8000802:	44a1      	add	r9, r4
 8000804:	464a      	mov	r2, r9
 8000806:	2a00      	cmp	r2, #0
 8000808:	d043      	beq.n	8000892 <__aeabi_fsub+0x23e>
 800080a:	1b31      	subs	r1, r6, r4
 800080c:	2c00      	cmp	r4, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fsub+0x1be>
 8000810:	e08c      	b.n	800092c <__aeabi_fsub+0x2d8>
 8000812:	2eff      	cmp	r6, #255	; 0xff
 8000814:	d100      	bne.n	8000818 <__aeabi_fsub+0x1c4>
 8000816:	e092      	b.n	800093e <__aeabi_fsub+0x2ea>
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	4662      	mov	r2, ip
 800081c:	04db      	lsls	r3, r3, #19
 800081e:	431a      	orrs	r2, r3
 8000820:	4694      	mov	ip, r2
 8000822:	2301      	movs	r3, #1
 8000824:	291b      	cmp	r1, #27
 8000826:	dc09      	bgt.n	800083c <__aeabi_fsub+0x1e8>
 8000828:	2020      	movs	r0, #32
 800082a:	4663      	mov	r3, ip
 800082c:	4662      	mov	r2, ip
 800082e:	40cb      	lsrs	r3, r1
 8000830:	1a41      	subs	r1, r0, r1
 8000832:	408a      	lsls	r2, r1
 8000834:	0011      	movs	r1, r2
 8000836:	1e48      	subs	r0, r1, #1
 8000838:	4181      	sbcs	r1, r0
 800083a:	430b      	orrs	r3, r1
 800083c:	0034      	movs	r4, r6
 800083e:	4453      	add	r3, sl
 8000840:	e794      	b.n	800076c <__aeabi_fsub+0x118>
 8000842:	22fe      	movs	r2, #254	; 0xfe
 8000844:	1c66      	adds	r6, r4, #1
 8000846:	4232      	tst	r2, r6
 8000848:	d164      	bne.n	8000914 <__aeabi_fsub+0x2c0>
 800084a:	2c00      	cmp	r4, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fsub+0x1fc>
 800084e:	e082      	b.n	8000956 <__aeabi_fsub+0x302>
 8000850:	4663      	mov	r3, ip
 8000852:	2b00      	cmp	r3, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fsub+0x204>
 8000856:	e0ab      	b.n	80009b0 <__aeabi_fsub+0x35c>
 8000858:	4653      	mov	r3, sl
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x20c>
 800085e:	e760      	b.n	8000722 <__aeabi_fsub+0xce>
 8000860:	4663      	mov	r3, ip
 8000862:	4652      	mov	r2, sl
 8000864:	1a9b      	subs	r3, r3, r2
 8000866:	015a      	lsls	r2, r3, #5
 8000868:	d400      	bmi.n	800086c <__aeabi_fsub+0x218>
 800086a:	e0aa      	b.n	80009c2 <__aeabi_fsub+0x36e>
 800086c:	4663      	mov	r3, ip
 800086e:	4652      	mov	r2, sl
 8000870:	000d      	movs	r5, r1
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	e744      	b.n	8000700 <__aeabi_fsub+0xac>
 8000876:	4652      	mov	r2, sl
 8000878:	2a00      	cmp	r2, #0
 800087a:	d023      	beq.n	80008c4 <__aeabi_fsub+0x270>
 800087c:	2201      	movs	r2, #1
 800087e:	4252      	negs	r2, r2
 8000880:	4690      	mov	r8, r2
 8000882:	44c1      	add	r9, r8
 8000884:	464a      	mov	r2, r9
 8000886:	2a00      	cmp	r2, #0
 8000888:	d075      	beq.n	8000976 <__aeabi_fsub+0x322>
 800088a:	2cff      	cmp	r4, #255	; 0xff
 800088c:	d000      	beq.n	8000890 <__aeabi_fsub+0x23c>
 800088e:	e75f      	b.n	8000750 <__aeabi_fsub+0xfc>
 8000890:	e796      	b.n	80007c0 <__aeabi_fsub+0x16c>
 8000892:	26fe      	movs	r6, #254	; 0xfe
 8000894:	3401      	adds	r4, #1
 8000896:	4226      	tst	r6, r4
 8000898:	d153      	bne.n	8000942 <__aeabi_fsub+0x2ee>
 800089a:	2800      	cmp	r0, #0
 800089c:	d172      	bne.n	8000984 <__aeabi_fsub+0x330>
 800089e:	4663      	mov	r3, ip
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fsub+0x252>
 80008a4:	e093      	b.n	80009ce <__aeabi_fsub+0x37a>
 80008a6:	4653      	mov	r3, sl
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d100      	bne.n	80008ae <__aeabi_fsub+0x25a>
 80008ac:	e739      	b.n	8000722 <__aeabi_fsub+0xce>
 80008ae:	4463      	add	r3, ip
 80008b0:	2400      	movs	r4, #0
 80008b2:	015a      	lsls	r2, r3, #5
 80008b4:	d502      	bpl.n	80008bc <__aeabi_fsub+0x268>
 80008b6:	4a4a      	ldr	r2, [pc, #296]	; (80009e0 <__aeabi_fsub+0x38c>)
 80008b8:	3401      	adds	r4, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	075a      	lsls	r2, r3, #29
 80008be:	d000      	beq.n	80008c2 <__aeabi_fsub+0x26e>
 80008c0:	e720      	b.n	8000704 <__aeabi_fsub+0xb0>
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	2cff      	cmp	r4, #255	; 0xff
 80008c6:	d100      	bne.n	80008ca <__aeabi_fsub+0x276>
 80008c8:	e77a      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80008ca:	025b      	lsls	r3, r3, #9
 80008cc:	0a5f      	lsrs	r7, r3, #9
 80008ce:	b2e0      	uxtb	r0, r4
 80008d0:	e727      	b.n	8000722 <__aeabi_fsub+0xce>
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	2700      	movs	r7, #0
 80008d6:	e724      	b.n	8000722 <__aeabi_fsub+0xce>
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <__aeabi_fsub+0x38c>)
 80008da:	1a24      	subs	r4, r4, r0
 80008dc:	4033      	ands	r3, r6
 80008de:	e70f      	b.n	8000700 <__aeabi_fsub+0xac>
 80008e0:	2eff      	cmp	r6, #255	; 0xff
 80008e2:	d100      	bne.n	80008e6 <__aeabi_fsub+0x292>
 80008e4:	e76a      	b.n	80007bc <__aeabi_fsub+0x168>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	4662      	mov	r2, ip
 80008ea:	04db      	lsls	r3, r3, #19
 80008ec:	431a      	orrs	r2, r3
 80008ee:	4694      	mov	ip, r2
 80008f0:	2301      	movs	r3, #1
 80008f2:	281b      	cmp	r0, #27
 80008f4:	dc09      	bgt.n	800090a <__aeabi_fsub+0x2b6>
 80008f6:	2420      	movs	r4, #32
 80008f8:	4663      	mov	r3, ip
 80008fa:	4662      	mov	r2, ip
 80008fc:	40c3      	lsrs	r3, r0
 80008fe:	1a20      	subs	r0, r4, r0
 8000900:	4082      	lsls	r2, r0
 8000902:	0010      	movs	r0, r2
 8000904:	1e44      	subs	r4, r0, #1
 8000906:	41a0      	sbcs	r0, r4
 8000908:	4303      	orrs	r3, r0
 800090a:	4652      	mov	r2, sl
 800090c:	000d      	movs	r5, r1
 800090e:	0034      	movs	r4, r6
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	e6dc      	b.n	80006ce <__aeabi_fsub+0x7a>
 8000914:	4663      	mov	r3, ip
 8000916:	4652      	mov	r2, sl
 8000918:	1a9e      	subs	r6, r3, r2
 800091a:	0173      	lsls	r3, r6, #5
 800091c:	d417      	bmi.n	800094e <__aeabi_fsub+0x2fa>
 800091e:	2e00      	cmp	r6, #0
 8000920:	d000      	beq.n	8000924 <__aeabi_fsub+0x2d0>
 8000922:	e6d9      	b.n	80006d8 <__aeabi_fsub+0x84>
 8000924:	2500      	movs	r5, #0
 8000926:	2000      	movs	r0, #0
 8000928:	2700      	movs	r7, #0
 800092a:	e6fa      	b.n	8000722 <__aeabi_fsub+0xce>
 800092c:	4663      	mov	r3, ip
 800092e:	2b00      	cmp	r3, #0
 8000930:	d044      	beq.n	80009bc <__aeabi_fsub+0x368>
 8000932:	3901      	subs	r1, #1
 8000934:	2900      	cmp	r1, #0
 8000936:	d04c      	beq.n	80009d2 <__aeabi_fsub+0x37e>
 8000938:	2eff      	cmp	r6, #255	; 0xff
 800093a:	d000      	beq.n	800093e <__aeabi_fsub+0x2ea>
 800093c:	e771      	b.n	8000822 <__aeabi_fsub+0x1ce>
 800093e:	4643      	mov	r3, r8
 8000940:	e73e      	b.n	80007c0 <__aeabi_fsub+0x16c>
 8000942:	2cff      	cmp	r4, #255	; 0xff
 8000944:	d0c5      	beq.n	80008d2 <__aeabi_fsub+0x27e>
 8000946:	4652      	mov	r2, sl
 8000948:	4462      	add	r2, ip
 800094a:	0853      	lsrs	r3, r2, #1
 800094c:	e7b6      	b.n	80008bc <__aeabi_fsub+0x268>
 800094e:	4663      	mov	r3, ip
 8000950:	000d      	movs	r5, r1
 8000952:	1ad6      	subs	r6, r2, r3
 8000954:	e6c0      	b.n	80006d8 <__aeabi_fsub+0x84>
 8000956:	4662      	mov	r2, ip
 8000958:	2a00      	cmp	r2, #0
 800095a:	d116      	bne.n	800098a <__aeabi_fsub+0x336>
 800095c:	4653      	mov	r3, sl
 800095e:	2b00      	cmp	r3, #0
 8000960:	d000      	beq.n	8000964 <__aeabi_fsub+0x310>
 8000962:	e72b      	b.n	80007bc <__aeabi_fsub+0x168>
 8000964:	2780      	movs	r7, #128	; 0x80
 8000966:	2500      	movs	r5, #0
 8000968:	20ff      	movs	r0, #255	; 0xff
 800096a:	03ff      	lsls	r7, r7, #15
 800096c:	e6d9      	b.n	8000722 <__aeabi_fsub+0xce>
 800096e:	000d      	movs	r5, r1
 8000970:	4643      	mov	r3, r8
 8000972:	0034      	movs	r4, r6
 8000974:	e7a6      	b.n	80008c4 <__aeabi_fsub+0x270>
 8000976:	4653      	mov	r3, sl
 8000978:	4463      	add	r3, ip
 800097a:	e6f7      	b.n	800076c <__aeabi_fsub+0x118>
 800097c:	4663      	mov	r3, ip
 800097e:	4652      	mov	r2, sl
 8000980:	1a9b      	subs	r3, r3, r2
 8000982:	e6a4      	b.n	80006ce <__aeabi_fsub+0x7a>
 8000984:	4662      	mov	r2, ip
 8000986:	2a00      	cmp	r2, #0
 8000988:	d0d9      	beq.n	800093e <__aeabi_fsub+0x2ea>
 800098a:	4652      	mov	r2, sl
 800098c:	2a00      	cmp	r2, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fsub+0x33e>
 8000990:	e716      	b.n	80007c0 <__aeabi_fsub+0x16c>
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	03d2      	lsls	r2, r2, #15
 8000996:	4213      	tst	r3, r2
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0x348>
 800099a:	e711      	b.n	80007c0 <__aeabi_fsub+0x16c>
 800099c:	4640      	mov	r0, r8
 800099e:	4210      	tst	r0, r2
 80009a0:	d000      	beq.n	80009a4 <__aeabi_fsub+0x350>
 80009a2:	e70d      	b.n	80007c0 <__aeabi_fsub+0x16c>
 80009a4:	e70a      	b.n	80007bc <__aeabi_fsub+0x168>
 80009a6:	4652      	mov	r2, sl
 80009a8:	000d      	movs	r5, r1
 80009aa:	0034      	movs	r4, r6
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	e68e      	b.n	80006ce <__aeabi_fsub+0x7a>
 80009b0:	4653      	mov	r3, sl
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <__aeabi_fsub+0x374>
 80009b6:	000d      	movs	r5, r1
 80009b8:	4647      	mov	r7, r8
 80009ba:	e6b2      	b.n	8000722 <__aeabi_fsub+0xce>
 80009bc:	4643      	mov	r3, r8
 80009be:	0034      	movs	r4, r6
 80009c0:	e780      	b.n	80008c4 <__aeabi_fsub+0x270>
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_fsub+0x374>
 80009c6:	e779      	b.n	80008bc <__aeabi_fsub+0x268>
 80009c8:	2500      	movs	r5, #0
 80009ca:	2700      	movs	r7, #0
 80009cc:	e6a9      	b.n	8000722 <__aeabi_fsub+0xce>
 80009ce:	4647      	mov	r7, r8
 80009d0:	e6a7      	b.n	8000722 <__aeabi_fsub+0xce>
 80009d2:	4653      	mov	r3, sl
 80009d4:	0034      	movs	r4, r6
 80009d6:	4463      	add	r3, ip
 80009d8:	e6c8      	b.n	800076c <__aeabi_fsub+0x118>
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	7dffffff 	.word	0x7dffffff
 80009e0:	fbffffff 	.word	0xfbffffff

080009e4 <__aeabi_f2iz>:
 80009e4:	0241      	lsls	r1, r0, #9
 80009e6:	0042      	lsls	r2, r0, #1
 80009e8:	0fc3      	lsrs	r3, r0, #31
 80009ea:	0a49      	lsrs	r1, r1, #9
 80009ec:	2000      	movs	r0, #0
 80009ee:	0e12      	lsrs	r2, r2, #24
 80009f0:	2a7e      	cmp	r2, #126	; 0x7e
 80009f2:	d903      	bls.n	80009fc <__aeabi_f2iz+0x18>
 80009f4:	2a9d      	cmp	r2, #157	; 0x9d
 80009f6:	d902      	bls.n	80009fe <__aeabi_f2iz+0x1a>
 80009f8:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <__aeabi_f2iz+0x3c>)
 80009fa:	1898      	adds	r0, r3, r2
 80009fc:	4770      	bx	lr
 80009fe:	2080      	movs	r0, #128	; 0x80
 8000a00:	0400      	lsls	r0, r0, #16
 8000a02:	4301      	orrs	r1, r0
 8000a04:	2a95      	cmp	r2, #149	; 0x95
 8000a06:	dc07      	bgt.n	8000a18 <__aeabi_f2iz+0x34>
 8000a08:	2096      	movs	r0, #150	; 0x96
 8000a0a:	1a82      	subs	r2, r0, r2
 8000a0c:	40d1      	lsrs	r1, r2
 8000a0e:	4248      	negs	r0, r1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f3      	bne.n	80009fc <__aeabi_f2iz+0x18>
 8000a14:	0008      	movs	r0, r1
 8000a16:	e7f1      	b.n	80009fc <__aeabi_f2iz+0x18>
 8000a18:	3a96      	subs	r2, #150	; 0x96
 8000a1a:	4091      	lsls	r1, r2
 8000a1c:	e7f7      	b.n	8000a0e <__aeabi_f2iz+0x2a>
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	7fffffff 	.word	0x7fffffff

08000a24 <__aeabi_ddiv>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	4657      	mov	r7, sl
 8000a28:	464e      	mov	r6, r9
 8000a2a:	4645      	mov	r5, r8
 8000a2c:	46de      	mov	lr, fp
 8000a2e:	b5e0      	push	{r5, r6, r7, lr}
 8000a30:	4681      	mov	r9, r0
 8000a32:	0005      	movs	r5, r0
 8000a34:	030c      	lsls	r4, r1, #12
 8000a36:	0048      	lsls	r0, r1, #1
 8000a38:	4692      	mov	sl, r2
 8000a3a:	001f      	movs	r7, r3
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	0b24      	lsrs	r4, r4, #12
 8000a40:	0d40      	lsrs	r0, r0, #21
 8000a42:	0fce      	lsrs	r6, r1, #31
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d059      	beq.n	8000afc <__aeabi_ddiv+0xd8>
 8000a48:	4b87      	ldr	r3, [pc, #540]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_ddiv+0x2c>
 8000a4e:	e098      	b.n	8000b82 <__aeabi_ddiv+0x15e>
 8000a50:	0f6b      	lsrs	r3, r5, #29
 8000a52:	00e4      	lsls	r4, r4, #3
 8000a54:	431c      	orrs	r4, r3
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	041b      	lsls	r3, r3, #16
 8000a5a:	4323      	orrs	r3, r4
 8000a5c:	4698      	mov	r8, r3
 8000a5e:	4b83      	ldr	r3, [pc, #524]	; (8000c6c <__aeabi_ddiv+0x248>)
 8000a60:	00ed      	lsls	r5, r5, #3
 8000a62:	469b      	mov	fp, r3
 8000a64:	2300      	movs	r3, #0
 8000a66:	4699      	mov	r9, r3
 8000a68:	4483      	add	fp, r0
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	033c      	lsls	r4, r7, #12
 8000a6e:	007b      	lsls	r3, r7, #1
 8000a70:	4650      	mov	r0, sl
 8000a72:	0b24      	lsrs	r4, r4, #12
 8000a74:	0d5b      	lsrs	r3, r3, #21
 8000a76:	0fff      	lsrs	r7, r7, #31
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d067      	beq.n	8000b4c <__aeabi_ddiv+0x128>
 8000a7c:	4a7a      	ldr	r2, [pc, #488]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d018      	beq.n	8000ab4 <__aeabi_ddiv+0x90>
 8000a82:	497a      	ldr	r1, [pc, #488]	; (8000c6c <__aeabi_ddiv+0x248>)
 8000a84:	0f42      	lsrs	r2, r0, #29
 8000a86:	468c      	mov	ip, r1
 8000a88:	00e4      	lsls	r4, r4, #3
 8000a8a:	4659      	mov	r1, fp
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	2280      	movs	r2, #128	; 0x80
 8000a90:	4463      	add	r3, ip
 8000a92:	0412      	lsls	r2, r2, #16
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	4314      	orrs	r4, r2
 8000a98:	469b      	mov	fp, r3
 8000a9a:	00c2      	lsls	r2, r0, #3
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	0033      	movs	r3, r6
 8000aa0:	407b      	eors	r3, r7
 8000aa2:	469a      	mov	sl, r3
 8000aa4:	464b      	mov	r3, r9
 8000aa6:	2b0f      	cmp	r3, #15
 8000aa8:	d900      	bls.n	8000aac <__aeabi_ddiv+0x88>
 8000aaa:	e0ef      	b.n	8000c8c <__aeabi_ddiv+0x268>
 8000aac:	4970      	ldr	r1, [pc, #448]	; (8000c70 <__aeabi_ddiv+0x24c>)
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	58cb      	ldr	r3, [r1, r3]
 8000ab2:	469f      	mov	pc, r3
 8000ab4:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <__aeabi_ddiv+0x250>)
 8000ab6:	4652      	mov	r2, sl
 8000ab8:	469c      	mov	ip, r3
 8000aba:	4322      	orrs	r2, r4
 8000abc:	44e3      	add	fp, ip
 8000abe:	2a00      	cmp	r2, #0
 8000ac0:	d000      	beq.n	8000ac4 <__aeabi_ddiv+0xa0>
 8000ac2:	e095      	b.n	8000bf0 <__aeabi_ddiv+0x1cc>
 8000ac4:	4649      	mov	r1, r9
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	4689      	mov	r9, r1
 8000acc:	2400      	movs	r4, #0
 8000ace:	2002      	movs	r0, #2
 8000ad0:	e7e5      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	4652      	mov	r2, sl
 8000ada:	051b      	lsls	r3, r3, #20
 8000adc:	4323      	orrs	r3, r4
 8000ade:	07d2      	lsls	r2, r2, #31
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	0028      	movs	r0, r5
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	b005      	add	sp, #20
 8000ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8000aea:	46bb      	mov	fp, r7
 8000aec:	46b2      	mov	sl, r6
 8000aee:	46a9      	mov	r9, r5
 8000af0:	46a0      	mov	r8, r4
 8000af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af4:	2400      	movs	r4, #0
 8000af6:	2500      	movs	r5, #0
 8000af8:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000afa:	e7ed      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000afc:	464b      	mov	r3, r9
 8000afe:	4323      	orrs	r3, r4
 8000b00:	4698      	mov	r8, r3
 8000b02:	d100      	bne.n	8000b06 <__aeabi_ddiv+0xe2>
 8000b04:	e089      	b.n	8000c1a <__aeabi_ddiv+0x1f6>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_ddiv+0xe8>
 8000b0a:	e1e0      	b.n	8000ece <__aeabi_ddiv+0x4aa>
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f000 fdf5 	bl	80016fc <__clzsi2>
 8000b12:	0001      	movs	r1, r0
 8000b14:	0002      	movs	r2, r0
 8000b16:	390b      	subs	r1, #11
 8000b18:	231d      	movs	r3, #29
 8000b1a:	1a5b      	subs	r3, r3, r1
 8000b1c:	4649      	mov	r1, r9
 8000b1e:	0010      	movs	r0, r2
 8000b20:	40d9      	lsrs	r1, r3
 8000b22:	3808      	subs	r0, #8
 8000b24:	4084      	lsls	r4, r0
 8000b26:	000b      	movs	r3, r1
 8000b28:	464d      	mov	r5, r9
 8000b2a:	4323      	orrs	r3, r4
 8000b2c:	4698      	mov	r8, r3
 8000b2e:	4085      	lsls	r5, r0
 8000b30:	4851      	ldr	r0, [pc, #324]	; (8000c78 <__aeabi_ddiv+0x254>)
 8000b32:	033c      	lsls	r4, r7, #12
 8000b34:	1a83      	subs	r3, r0, r2
 8000b36:	469b      	mov	fp, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4699      	mov	r9, r3
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	007b      	lsls	r3, r7, #1
 8000b40:	4650      	mov	r0, sl
 8000b42:	0b24      	lsrs	r4, r4, #12
 8000b44:	0d5b      	lsrs	r3, r3, #21
 8000b46:	0fff      	lsrs	r7, r7, #31
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d197      	bne.n	8000a7c <__aeabi_ddiv+0x58>
 8000b4c:	4652      	mov	r2, sl
 8000b4e:	4322      	orrs	r2, r4
 8000b50:	d055      	beq.n	8000bfe <__aeabi_ddiv+0x1da>
 8000b52:	2c00      	cmp	r4, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_ddiv+0x134>
 8000b56:	e1ca      	b.n	8000eee <__aeabi_ddiv+0x4ca>
 8000b58:	0020      	movs	r0, r4
 8000b5a:	f000 fdcf 	bl	80016fc <__clzsi2>
 8000b5e:	0002      	movs	r2, r0
 8000b60:	3a0b      	subs	r2, #11
 8000b62:	231d      	movs	r3, #29
 8000b64:	0001      	movs	r1, r0
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	4652      	mov	r2, sl
 8000b6a:	3908      	subs	r1, #8
 8000b6c:	40da      	lsrs	r2, r3
 8000b6e:	408c      	lsls	r4, r1
 8000b70:	4314      	orrs	r4, r2
 8000b72:	4652      	mov	r2, sl
 8000b74:	408a      	lsls	r2, r1
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <__aeabi_ddiv+0x258>)
 8000b78:	4458      	add	r0, fp
 8000b7a:	469b      	mov	fp, r3
 8000b7c:	4483      	add	fp, r0
 8000b7e:	2000      	movs	r0, #0
 8000b80:	e78d      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000b82:	464b      	mov	r3, r9
 8000b84:	4323      	orrs	r3, r4
 8000b86:	4698      	mov	r8, r3
 8000b88:	d140      	bne.n	8000c0c <__aeabi_ddiv+0x1e8>
 8000b8a:	2308      	movs	r3, #8
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	3b06      	subs	r3, #6
 8000b90:	2500      	movs	r5, #0
 8000b92:	4683      	mov	fp, r0
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	e769      	b.n	8000a6c <__aeabi_ddiv+0x48>
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	9b00      	ldr	r3, [sp, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d0a9      	beq.n	8000af4 <__aeabi_ddiv+0xd0>
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_ddiv+0x182>
 8000ba4:	e211      	b.n	8000fca <__aeabi_ddiv+0x5a6>
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d093      	beq.n	8000ad2 <__aeabi_ddiv+0xae>
 8000baa:	4a35      	ldr	r2, [pc, #212]	; (8000c80 <__aeabi_ddiv+0x25c>)
 8000bac:	445a      	add	r2, fp
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	dc00      	bgt.n	8000bb4 <__aeabi_ddiv+0x190>
 8000bb2:	e13c      	b.n	8000e2e <__aeabi_ddiv+0x40a>
 8000bb4:	076b      	lsls	r3, r5, #29
 8000bb6:	d000      	beq.n	8000bba <__aeabi_ddiv+0x196>
 8000bb8:	e1a7      	b.n	8000f0a <__aeabi_ddiv+0x4e6>
 8000bba:	08ed      	lsrs	r5, r5, #3
 8000bbc:	4643      	mov	r3, r8
 8000bbe:	01db      	lsls	r3, r3, #7
 8000bc0:	d506      	bpl.n	8000bd0 <__aeabi_ddiv+0x1ac>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <__aeabi_ddiv+0x260>)
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	4690      	mov	r8, r2
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	445a      	add	r2, fp
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <__aeabi_ddiv+0x264>)
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	dc8e      	bgt.n	8000af4 <__aeabi_ddiv+0xd0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	0552      	lsls	r2, r2, #21
 8000bda:	0758      	lsls	r0, r3, #29
 8000bdc:	025c      	lsls	r4, r3, #9
 8000bde:	4305      	orrs	r5, r0
 8000be0:	0b24      	lsrs	r4, r4, #12
 8000be2:	0d53      	lsrs	r3, r2, #21
 8000be4:	e778      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000be6:	46ba      	mov	sl, r7
 8000be8:	46a0      	mov	r8, r4
 8000bea:	0015      	movs	r5, r2
 8000bec:	9000      	str	r0, [sp, #0]
 8000bee:	e7d4      	b.n	8000b9a <__aeabi_ddiv+0x176>
 8000bf0:	464a      	mov	r2, r9
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	4691      	mov	r9, r2
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	4652      	mov	r2, sl
 8000bfc:	e74f      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000bfe:	4649      	mov	r1, r9
 8000c00:	2301      	movs	r3, #1
 8000c02:	4319      	orrs	r1, r3
 8000c04:	4689      	mov	r9, r1
 8000c06:	2400      	movs	r4, #0
 8000c08:	2001      	movs	r0, #1
 8000c0a:	e748      	b.n	8000a9e <__aeabi_ddiv+0x7a>
 8000c0c:	230c      	movs	r3, #12
 8000c0e:	4699      	mov	r9, r3
 8000c10:	3b09      	subs	r3, #9
 8000c12:	46a0      	mov	r8, r4
 8000c14:	4683      	mov	fp, r0
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	e728      	b.n	8000a6c <__aeabi_ddiv+0x48>
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	4699      	mov	r9, r3
 8000c1e:	2300      	movs	r3, #0
 8000c20:	469b      	mov	fp, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	2500      	movs	r5, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	e720      	b.n	8000a6c <__aeabi_ddiv+0x48>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	2480      	movs	r4, #128	; 0x80
 8000c2e:	469a      	mov	sl, r3
 8000c30:	2500      	movs	r5, #0
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000c34:	0324      	lsls	r4, r4, #12
 8000c36:	e74f      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	4641      	mov	r1, r8
 8000c3c:	031b      	lsls	r3, r3, #12
 8000c3e:	4219      	tst	r1, r3
 8000c40:	d008      	beq.n	8000c54 <__aeabi_ddiv+0x230>
 8000c42:	421c      	tst	r4, r3
 8000c44:	d106      	bne.n	8000c54 <__aeabi_ddiv+0x230>
 8000c46:	431c      	orrs	r4, r3
 8000c48:	0324      	lsls	r4, r4, #12
 8000c4a:	46ba      	mov	sl, r7
 8000c4c:	0015      	movs	r5, r2
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000c50:	0b24      	lsrs	r4, r4, #12
 8000c52:	e741      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000c54:	2480      	movs	r4, #128	; 0x80
 8000c56:	4643      	mov	r3, r8
 8000c58:	0324      	lsls	r4, r4, #12
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	0324      	lsls	r4, r4, #12
 8000c5e:	46b2      	mov	sl, r6
 8000c60:	4b01      	ldr	r3, [pc, #4]	; (8000c68 <__aeabi_ddiv+0x244>)
 8000c62:	0b24      	lsrs	r4, r4, #12
 8000c64:	e738      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	000007ff 	.word	0x000007ff
 8000c6c:	fffffc01 	.word	0xfffffc01
 8000c70:	08007ba8 	.word	0x08007ba8
 8000c74:	fffff801 	.word	0xfffff801
 8000c78:	fffffc0d 	.word	0xfffffc0d
 8000c7c:	000003f3 	.word	0x000003f3
 8000c80:	000003ff 	.word	0x000003ff
 8000c84:	feffffff 	.word	0xfeffffff
 8000c88:	000007fe 	.word	0x000007fe
 8000c8c:	4544      	cmp	r4, r8
 8000c8e:	d200      	bcs.n	8000c92 <__aeabi_ddiv+0x26e>
 8000c90:	e116      	b.n	8000ec0 <__aeabi_ddiv+0x49c>
 8000c92:	d100      	bne.n	8000c96 <__aeabi_ddiv+0x272>
 8000c94:	e111      	b.n	8000eba <__aeabi_ddiv+0x496>
 8000c96:	2301      	movs	r3, #1
 8000c98:	425b      	negs	r3, r3
 8000c9a:	469c      	mov	ip, r3
 8000c9c:	002e      	movs	r6, r5
 8000c9e:	4640      	mov	r0, r8
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	44e3      	add	fp, ip
 8000ca4:	0223      	lsls	r3, r4, #8
 8000ca6:	0e14      	lsrs	r4, r2, #24
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	4699      	mov	r9, r3
 8000cae:	0423      	lsls	r3, r4, #16
 8000cb0:	0c1f      	lsrs	r7, r3, #16
 8000cb2:	0212      	lsls	r2, r2, #8
 8000cb4:	4649      	mov	r1, r9
 8000cb6:	9200      	str	r2, [sp, #0]
 8000cb8:	9701      	str	r7, [sp, #4]
 8000cba:	f7ff faa9 	bl	8000210 <__aeabi_uidivmod>
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	437a      	muls	r2, r7
 8000cc2:	040b      	lsls	r3, r1, #16
 8000cc4:	0c31      	lsrs	r1, r6, #16
 8000cc6:	4680      	mov	r8, r0
 8000cc8:	4319      	orrs	r1, r3
 8000cca:	428a      	cmp	r2, r1
 8000ccc:	d90b      	bls.n	8000ce6 <__aeabi_ddiv+0x2c2>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	469c      	mov	ip, r3
 8000cd4:	1909      	adds	r1, r1, r4
 8000cd6:	44e0      	add	r8, ip
 8000cd8:	428c      	cmp	r4, r1
 8000cda:	d804      	bhi.n	8000ce6 <__aeabi_ddiv+0x2c2>
 8000cdc:	428a      	cmp	r2, r1
 8000cde:	d902      	bls.n	8000ce6 <__aeabi_ddiv+0x2c2>
 8000ce0:	1e83      	subs	r3, r0, #2
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	1909      	adds	r1, r1, r4
 8000ce6:	1a88      	subs	r0, r1, r2
 8000ce8:	4649      	mov	r1, r9
 8000cea:	f7ff fa91 	bl	8000210 <__aeabi_uidivmod>
 8000cee:	0409      	lsls	r1, r1, #16
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	0431      	lsls	r1, r6, #16
 8000cf4:	4666      	mov	r6, ip
 8000cf6:	9a01      	ldr	r2, [sp, #4]
 8000cf8:	0c09      	lsrs	r1, r1, #16
 8000cfa:	4342      	muls	r2, r0
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	4331      	orrs	r1, r6
 8000d00:	428a      	cmp	r2, r1
 8000d02:	d904      	bls.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000d04:	1909      	adds	r1, r1, r4
 8000d06:	3b01      	subs	r3, #1
 8000d08:	428c      	cmp	r4, r1
 8000d0a:	d800      	bhi.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000d0c:	e111      	b.n	8000f32 <__aeabi_ddiv+0x50e>
 8000d0e:	1a89      	subs	r1, r1, r2
 8000d10:	4642      	mov	r2, r8
 8000d12:	9e00      	ldr	r6, [sp, #0]
 8000d14:	0412      	lsls	r2, r2, #16
 8000d16:	431a      	orrs	r2, r3
 8000d18:	0c33      	lsrs	r3, r6, #16
 8000d1a:	001f      	movs	r7, r3
 8000d1c:	0c10      	lsrs	r0, r2, #16
 8000d1e:	4690      	mov	r8, r2
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	0413      	lsls	r3, r2, #16
 8000d24:	0432      	lsls	r2, r6, #16
 8000d26:	0c16      	lsrs	r6, r2, #16
 8000d28:	0032      	movs	r2, r6
 8000d2a:	0c1b      	lsrs	r3, r3, #16
 8000d2c:	435a      	muls	r2, r3
 8000d2e:	9603      	str	r6, [sp, #12]
 8000d30:	437b      	muls	r3, r7
 8000d32:	4346      	muls	r6, r0
 8000d34:	4378      	muls	r0, r7
 8000d36:	0c17      	lsrs	r7, r2, #16
 8000d38:	46bc      	mov	ip, r7
 8000d3a:	199b      	adds	r3, r3, r6
 8000d3c:	4463      	add	r3, ip
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	d903      	bls.n	8000d4a <__aeabi_ddiv+0x326>
 8000d42:	2680      	movs	r6, #128	; 0x80
 8000d44:	0276      	lsls	r6, r6, #9
 8000d46:	46b4      	mov	ip, r6
 8000d48:	4460      	add	r0, ip
 8000d4a:	0c1e      	lsrs	r6, r3, #16
 8000d4c:	1830      	adds	r0, r6, r0
 8000d4e:	0416      	lsls	r6, r2, #16
 8000d50:	041b      	lsls	r3, r3, #16
 8000d52:	0c36      	lsrs	r6, r6, #16
 8000d54:	199e      	adds	r6, r3, r6
 8000d56:	4281      	cmp	r1, r0
 8000d58:	d200      	bcs.n	8000d5c <__aeabi_ddiv+0x338>
 8000d5a:	e09c      	b.n	8000e96 <__aeabi_ddiv+0x472>
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_ddiv+0x33c>
 8000d5e:	e097      	b.n	8000e90 <__aeabi_ddiv+0x46c>
 8000d60:	1bae      	subs	r6, r5, r6
 8000d62:	1a09      	subs	r1, r1, r0
 8000d64:	42b5      	cmp	r5, r6
 8000d66:	4180      	sbcs	r0, r0
 8000d68:	4240      	negs	r0, r0
 8000d6a:	1a08      	subs	r0, r1, r0
 8000d6c:	4284      	cmp	r4, r0
 8000d6e:	d100      	bne.n	8000d72 <__aeabi_ddiv+0x34e>
 8000d70:	e111      	b.n	8000f96 <__aeabi_ddiv+0x572>
 8000d72:	4649      	mov	r1, r9
 8000d74:	f7ff fa4c 	bl	8000210 <__aeabi_uidivmod>
 8000d78:	9a01      	ldr	r2, [sp, #4]
 8000d7a:	040b      	lsls	r3, r1, #16
 8000d7c:	4342      	muls	r2, r0
 8000d7e:	0c31      	lsrs	r1, r6, #16
 8000d80:	0005      	movs	r5, r0
 8000d82:	4319      	orrs	r1, r3
 8000d84:	428a      	cmp	r2, r1
 8000d86:	d907      	bls.n	8000d98 <__aeabi_ddiv+0x374>
 8000d88:	1909      	adds	r1, r1, r4
 8000d8a:	3d01      	subs	r5, #1
 8000d8c:	428c      	cmp	r4, r1
 8000d8e:	d803      	bhi.n	8000d98 <__aeabi_ddiv+0x374>
 8000d90:	428a      	cmp	r2, r1
 8000d92:	d901      	bls.n	8000d98 <__aeabi_ddiv+0x374>
 8000d94:	1e85      	subs	r5, r0, #2
 8000d96:	1909      	adds	r1, r1, r4
 8000d98:	1a88      	subs	r0, r1, r2
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	f7ff fa38 	bl	8000210 <__aeabi_uidivmod>
 8000da0:	0409      	lsls	r1, r1, #16
 8000da2:	468c      	mov	ip, r1
 8000da4:	0431      	lsls	r1, r6, #16
 8000da6:	4666      	mov	r6, ip
 8000da8:	9a01      	ldr	r2, [sp, #4]
 8000daa:	0c09      	lsrs	r1, r1, #16
 8000dac:	4342      	muls	r2, r0
 8000dae:	0003      	movs	r3, r0
 8000db0:	4331      	orrs	r1, r6
 8000db2:	428a      	cmp	r2, r1
 8000db4:	d907      	bls.n	8000dc6 <__aeabi_ddiv+0x3a2>
 8000db6:	1909      	adds	r1, r1, r4
 8000db8:	3b01      	subs	r3, #1
 8000dba:	428c      	cmp	r4, r1
 8000dbc:	d803      	bhi.n	8000dc6 <__aeabi_ddiv+0x3a2>
 8000dbe:	428a      	cmp	r2, r1
 8000dc0:	d901      	bls.n	8000dc6 <__aeabi_ddiv+0x3a2>
 8000dc2:	1e83      	subs	r3, r0, #2
 8000dc4:	1909      	adds	r1, r1, r4
 8000dc6:	9e03      	ldr	r6, [sp, #12]
 8000dc8:	1a89      	subs	r1, r1, r2
 8000dca:	0032      	movs	r2, r6
 8000dcc:	042d      	lsls	r5, r5, #16
 8000dce:	431d      	orrs	r5, r3
 8000dd0:	9f02      	ldr	r7, [sp, #8]
 8000dd2:	042b      	lsls	r3, r5, #16
 8000dd4:	0c1b      	lsrs	r3, r3, #16
 8000dd6:	435a      	muls	r2, r3
 8000dd8:	437b      	muls	r3, r7
 8000dda:	469c      	mov	ip, r3
 8000ddc:	0c28      	lsrs	r0, r5, #16
 8000dde:	4346      	muls	r6, r0
 8000de0:	0c13      	lsrs	r3, r2, #16
 8000de2:	44b4      	add	ip, r6
 8000de4:	4463      	add	r3, ip
 8000de6:	4378      	muls	r0, r7
 8000de8:	429e      	cmp	r6, r3
 8000dea:	d903      	bls.n	8000df4 <__aeabi_ddiv+0x3d0>
 8000dec:	2680      	movs	r6, #128	; 0x80
 8000dee:	0276      	lsls	r6, r6, #9
 8000df0:	46b4      	mov	ip, r6
 8000df2:	4460      	add	r0, ip
 8000df4:	0c1e      	lsrs	r6, r3, #16
 8000df6:	0412      	lsls	r2, r2, #16
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	0c12      	lsrs	r2, r2, #16
 8000dfc:	1830      	adds	r0, r6, r0
 8000dfe:	189b      	adds	r3, r3, r2
 8000e00:	4281      	cmp	r1, r0
 8000e02:	d306      	bcc.n	8000e12 <__aeabi_ddiv+0x3ee>
 8000e04:	d002      	beq.n	8000e0c <__aeabi_ddiv+0x3e8>
 8000e06:	2301      	movs	r3, #1
 8000e08:	431d      	orrs	r5, r3
 8000e0a:	e6ce      	b.n	8000baa <__aeabi_ddiv+0x186>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_ddiv+0x3ee>
 8000e10:	e6cb      	b.n	8000baa <__aeabi_ddiv+0x186>
 8000e12:	1861      	adds	r1, r4, r1
 8000e14:	1e6e      	subs	r6, r5, #1
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	d200      	bcs.n	8000e1c <__aeabi_ddiv+0x3f8>
 8000e1a:	e0a4      	b.n	8000f66 <__aeabi_ddiv+0x542>
 8000e1c:	4281      	cmp	r1, r0
 8000e1e:	d200      	bcs.n	8000e22 <__aeabi_ddiv+0x3fe>
 8000e20:	e0c9      	b.n	8000fb6 <__aeabi_ddiv+0x592>
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x402>
 8000e24:	e0d9      	b.n	8000fda <__aeabi_ddiv+0x5b6>
 8000e26:	0035      	movs	r5, r6
 8000e28:	e7ed      	b.n	8000e06 <__aeabi_ddiv+0x3e2>
 8000e2a:	2501      	movs	r5, #1
 8000e2c:	426d      	negs	r5, r5
 8000e2e:	2101      	movs	r1, #1
 8000e30:	1a89      	subs	r1, r1, r2
 8000e32:	2938      	cmp	r1, #56	; 0x38
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_ddiv+0x414>
 8000e36:	e64c      	b.n	8000ad2 <__aeabi_ddiv+0xae>
 8000e38:	291f      	cmp	r1, #31
 8000e3a:	dc00      	bgt.n	8000e3e <__aeabi_ddiv+0x41a>
 8000e3c:	e07f      	b.n	8000f3e <__aeabi_ddiv+0x51a>
 8000e3e:	231f      	movs	r3, #31
 8000e40:	425b      	negs	r3, r3
 8000e42:	1a9a      	subs	r2, r3, r2
 8000e44:	4643      	mov	r3, r8
 8000e46:	40d3      	lsrs	r3, r2
 8000e48:	2920      	cmp	r1, #32
 8000e4a:	d004      	beq.n	8000e56 <__aeabi_ddiv+0x432>
 8000e4c:	4644      	mov	r4, r8
 8000e4e:	4a65      	ldr	r2, [pc, #404]	; (8000fe4 <__aeabi_ddiv+0x5c0>)
 8000e50:	445a      	add	r2, fp
 8000e52:	4094      	lsls	r4, r2
 8000e54:	4325      	orrs	r5, r4
 8000e56:	1e6a      	subs	r2, r5, #1
 8000e58:	4195      	sbcs	r5, r2
 8000e5a:	2207      	movs	r2, #7
 8000e5c:	432b      	orrs	r3, r5
 8000e5e:	0015      	movs	r5, r2
 8000e60:	2400      	movs	r4, #0
 8000e62:	401d      	ands	r5, r3
 8000e64:	421a      	tst	r2, r3
 8000e66:	d100      	bne.n	8000e6a <__aeabi_ddiv+0x446>
 8000e68:	e0a1      	b.n	8000fae <__aeabi_ddiv+0x58a>
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	401a      	ands	r2, r3
 8000e70:	2a04      	cmp	r2, #4
 8000e72:	d100      	bne.n	8000e76 <__aeabi_ddiv+0x452>
 8000e74:	e098      	b.n	8000fa8 <__aeabi_ddiv+0x584>
 8000e76:	1d1a      	adds	r2, r3, #4
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	419b      	sbcs	r3, r3
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	18e4      	adds	r4, r4, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	0222      	lsls	r2, r4, #8
 8000e84:	d400      	bmi.n	8000e88 <__aeabi_ddiv+0x464>
 8000e86:	e08f      	b.n	8000fa8 <__aeabi_ddiv+0x584>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	2400      	movs	r4, #0
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	e623      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000e90:	42b5      	cmp	r5, r6
 8000e92:	d300      	bcc.n	8000e96 <__aeabi_ddiv+0x472>
 8000e94:	e764      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000e96:	4643      	mov	r3, r8
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	9b00      	ldr	r3, [sp, #0]
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	4465      	add	r5, ip
 8000ea0:	001f      	movs	r7, r3
 8000ea2:	429d      	cmp	r5, r3
 8000ea4:	419b      	sbcs	r3, r3
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	191b      	adds	r3, r3, r4
 8000eaa:	18c9      	adds	r1, r1, r3
 8000eac:	428c      	cmp	r4, r1
 8000eae:	d23a      	bcs.n	8000f26 <__aeabi_ddiv+0x502>
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	d863      	bhi.n	8000f7c <__aeabi_ddiv+0x558>
 8000eb4:	d060      	beq.n	8000f78 <__aeabi_ddiv+0x554>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e752      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000eba:	42aa      	cmp	r2, r5
 8000ebc:	d900      	bls.n	8000ec0 <__aeabi_ddiv+0x49c>
 8000ebe:	e6ea      	b.n	8000c96 <__aeabi_ddiv+0x272>
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	07de      	lsls	r6, r3, #31
 8000ec4:	0858      	lsrs	r0, r3, #1
 8000ec6:	086b      	lsrs	r3, r5, #1
 8000ec8:	431e      	orrs	r6, r3
 8000eca:	07ed      	lsls	r5, r5, #31
 8000ecc:	e6ea      	b.n	8000ca4 <__aeabi_ddiv+0x280>
 8000ece:	4648      	mov	r0, r9
 8000ed0:	f000 fc14 	bl	80016fc <__clzsi2>
 8000ed4:	0001      	movs	r1, r0
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	3115      	adds	r1, #21
 8000eda:	3220      	adds	r2, #32
 8000edc:	291c      	cmp	r1, #28
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_ddiv+0x4be>
 8000ee0:	e61a      	b.n	8000b18 <__aeabi_ddiv+0xf4>
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	3808      	subs	r0, #8
 8000ee6:	4083      	lsls	r3, r0
 8000ee8:	2500      	movs	r5, #0
 8000eea:	4698      	mov	r8, r3
 8000eec:	e620      	b.n	8000b30 <__aeabi_ddiv+0x10c>
 8000eee:	f000 fc05 	bl	80016fc <__clzsi2>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	3215      	adds	r2, #21
 8000ef8:	3020      	adds	r0, #32
 8000efa:	2a1c      	cmp	r2, #28
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_ddiv+0x4dc>
 8000efe:	e630      	b.n	8000b62 <__aeabi_ddiv+0x13e>
 8000f00:	4654      	mov	r4, sl
 8000f02:	3b08      	subs	r3, #8
 8000f04:	2200      	movs	r2, #0
 8000f06:	409c      	lsls	r4, r3
 8000f08:	e635      	b.n	8000b76 <__aeabi_ddiv+0x152>
 8000f0a:	230f      	movs	r3, #15
 8000f0c:	402b      	ands	r3, r5
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x4f0>
 8000f12:	e652      	b.n	8000bba <__aeabi_ddiv+0x196>
 8000f14:	2305      	movs	r3, #5
 8000f16:	425b      	negs	r3, r3
 8000f18:	42ab      	cmp	r3, r5
 8000f1a:	419b      	sbcs	r3, r3
 8000f1c:	3504      	adds	r5, #4
 8000f1e:	425b      	negs	r3, r3
 8000f20:	08ed      	lsrs	r5, r5, #3
 8000f22:	4498      	add	r8, r3
 8000f24:	e64a      	b.n	8000bbc <__aeabi_ddiv+0x198>
 8000f26:	428c      	cmp	r4, r1
 8000f28:	d1c5      	bne.n	8000eb6 <__aeabi_ddiv+0x492>
 8000f2a:	42af      	cmp	r7, r5
 8000f2c:	d9c0      	bls.n	8000eb0 <__aeabi_ddiv+0x48c>
 8000f2e:	4690      	mov	r8, r2
 8000f30:	e716      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000f32:	428a      	cmp	r2, r1
 8000f34:	d800      	bhi.n	8000f38 <__aeabi_ddiv+0x514>
 8000f36:	e6ea      	b.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000f38:	1e83      	subs	r3, r0, #2
 8000f3a:	1909      	adds	r1, r1, r4
 8000f3c:	e6e7      	b.n	8000d0e <__aeabi_ddiv+0x2ea>
 8000f3e:	4a2a      	ldr	r2, [pc, #168]	; (8000fe8 <__aeabi_ddiv+0x5c4>)
 8000f40:	0028      	movs	r0, r5
 8000f42:	445a      	add	r2, fp
 8000f44:	4643      	mov	r3, r8
 8000f46:	4095      	lsls	r5, r2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	40c8      	lsrs	r0, r1
 8000f4c:	1e6a      	subs	r2, r5, #1
 8000f4e:	4195      	sbcs	r5, r2
 8000f50:	4644      	mov	r4, r8
 8000f52:	4303      	orrs	r3, r0
 8000f54:	432b      	orrs	r3, r5
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	075a      	lsls	r2, r3, #29
 8000f5a:	d092      	beq.n	8000e82 <__aeabi_ddiv+0x45e>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	401a      	ands	r2, r3
 8000f60:	2a04      	cmp	r2, #4
 8000f62:	d188      	bne.n	8000e76 <__aeabi_ddiv+0x452>
 8000f64:	e78d      	b.n	8000e82 <__aeabi_ddiv+0x45e>
 8000f66:	0035      	movs	r5, r6
 8000f68:	4281      	cmp	r1, r0
 8000f6a:	d000      	beq.n	8000f6e <__aeabi_ddiv+0x54a>
 8000f6c:	e74b      	b.n	8000e06 <__aeabi_ddiv+0x3e2>
 8000f6e:	9a00      	ldr	r2, [sp, #0]
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x552>
 8000f74:	e747      	b.n	8000e06 <__aeabi_ddiv+0x3e2>
 8000f76:	e618      	b.n	8000baa <__aeabi_ddiv+0x186>
 8000f78:	42ae      	cmp	r6, r5
 8000f7a:	d99c      	bls.n	8000eb6 <__aeabi_ddiv+0x492>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	425b      	negs	r3, r3
 8000f80:	469c      	mov	ip, r3
 8000f82:	9b00      	ldr	r3, [sp, #0]
 8000f84:	44e0      	add	r8, ip
 8000f86:	469c      	mov	ip, r3
 8000f88:	4465      	add	r5, ip
 8000f8a:	429d      	cmp	r5, r3
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	425b      	negs	r3, r3
 8000f90:	191b      	adds	r3, r3, r4
 8000f92:	18c9      	adds	r1, r1, r3
 8000f94:	e6e4      	b.n	8000d60 <__aeabi_ddiv+0x33c>
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <__aeabi_ddiv+0x5c8>)
 8000f98:	445a      	add	r2, fp
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	dc00      	bgt.n	8000fa0 <__aeabi_ddiv+0x57c>
 8000f9e:	e744      	b.n	8000e2a <__aeabi_ddiv+0x406>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	4498      	add	r8, r3
 8000fa6:	e609      	b.n	8000bbc <__aeabi_ddiv+0x198>
 8000fa8:	0765      	lsls	r5, r4, #29
 8000faa:	0264      	lsls	r4, r4, #9
 8000fac:	0b24      	lsrs	r4, r4, #12
 8000fae:	08db      	lsrs	r3, r3, #3
 8000fb0:	431d      	orrs	r5, r3
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e590      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000fb6:	9e00      	ldr	r6, [sp, #0]
 8000fb8:	3d02      	subs	r5, #2
 8000fba:	0072      	lsls	r2, r6, #1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	41bf      	sbcs	r7, r7
 8000fc0:	427f      	negs	r7, r7
 8000fc2:	193c      	adds	r4, r7, r4
 8000fc4:	1909      	adds	r1, r1, r4
 8000fc6:	9200      	str	r2, [sp, #0]
 8000fc8:	e7ce      	b.n	8000f68 <__aeabi_ddiv+0x544>
 8000fca:	2480      	movs	r4, #128	; 0x80
 8000fcc:	4643      	mov	r3, r8
 8000fce:	0324      	lsls	r4, r4, #12
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	0324      	lsls	r4, r4, #12
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <__aeabi_ddiv+0x5cc>)
 8000fd6:	0b24      	lsrs	r4, r4, #12
 8000fd8:	e57e      	b.n	8000ad8 <__aeabi_ddiv+0xb4>
 8000fda:	9a00      	ldr	r2, [sp, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d3ea      	bcc.n	8000fb6 <__aeabi_ddiv+0x592>
 8000fe0:	0035      	movs	r5, r6
 8000fe2:	e7c4      	b.n	8000f6e <__aeabi_ddiv+0x54a>
 8000fe4:	0000043e 	.word	0x0000043e
 8000fe8:	0000041e 	.word	0x0000041e
 8000fec:	000003ff 	.word	0x000003ff
 8000ff0:	000007ff 	.word	0x000007ff

08000ff4 <__aeabi_dmul>:
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	4657      	mov	r7, sl
 8000ff8:	464e      	mov	r6, r9
 8000ffa:	4645      	mov	r5, r8
 8000ffc:	46de      	mov	lr, fp
 8000ffe:	b5e0      	push	{r5, r6, r7, lr}
 8001000:	4698      	mov	r8, r3
 8001002:	030c      	lsls	r4, r1, #12
 8001004:	004b      	lsls	r3, r1, #1
 8001006:	0006      	movs	r6, r0
 8001008:	4692      	mov	sl, r2
 800100a:	b087      	sub	sp, #28
 800100c:	0b24      	lsrs	r4, r4, #12
 800100e:	0d5b      	lsrs	r3, r3, #21
 8001010:	0fcf      	lsrs	r7, r1, #31
 8001012:	2b00      	cmp	r3, #0
 8001014:	d06c      	beq.n	80010f0 <__aeabi_dmul+0xfc>
 8001016:	4add      	ldr	r2, [pc, #884]	; (800138c <__aeabi_dmul+0x398>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d100      	bne.n	800101e <__aeabi_dmul+0x2a>
 800101c:	e086      	b.n	800112c <__aeabi_dmul+0x138>
 800101e:	0f42      	lsrs	r2, r0, #29
 8001020:	00e4      	lsls	r4, r4, #3
 8001022:	4314      	orrs	r4, r2
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	4314      	orrs	r4, r2
 800102a:	4ad9      	ldr	r2, [pc, #868]	; (8001390 <__aeabi_dmul+0x39c>)
 800102c:	00c5      	lsls	r5, r0, #3
 800102e:	4694      	mov	ip, r2
 8001030:	4463      	add	r3, ip
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2300      	movs	r3, #0
 8001036:	4699      	mov	r9, r3
 8001038:	469b      	mov	fp, r3
 800103a:	4643      	mov	r3, r8
 800103c:	4642      	mov	r2, r8
 800103e:	031e      	lsls	r6, r3, #12
 8001040:	0fd2      	lsrs	r2, r2, #31
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4650      	mov	r0, sl
 8001046:	4690      	mov	r8, r2
 8001048:	0b36      	lsrs	r6, r6, #12
 800104a:	0d5b      	lsrs	r3, r3, #21
 800104c:	d100      	bne.n	8001050 <__aeabi_dmul+0x5c>
 800104e:	e078      	b.n	8001142 <__aeabi_dmul+0x14e>
 8001050:	4ace      	ldr	r2, [pc, #824]	; (800138c <__aeabi_dmul+0x398>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d01d      	beq.n	8001092 <__aeabi_dmul+0x9e>
 8001056:	49ce      	ldr	r1, [pc, #824]	; (8001390 <__aeabi_dmul+0x39c>)
 8001058:	0f42      	lsrs	r2, r0, #29
 800105a:	468c      	mov	ip, r1
 800105c:	9900      	ldr	r1, [sp, #0]
 800105e:	4463      	add	r3, ip
 8001060:	00f6      	lsls	r6, r6, #3
 8001062:	468c      	mov	ip, r1
 8001064:	4316      	orrs	r6, r2
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	449c      	add	ip, r3
 800106a:	0412      	lsls	r2, r2, #16
 800106c:	4663      	mov	r3, ip
 800106e:	4316      	orrs	r6, r2
 8001070:	00c2      	lsls	r2, r0, #3
 8001072:	2000      	movs	r0, #0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	9900      	ldr	r1, [sp, #0]
 8001078:	4643      	mov	r3, r8
 800107a:	3101      	adds	r1, #1
 800107c:	468c      	mov	ip, r1
 800107e:	4649      	mov	r1, r9
 8001080:	407b      	eors	r3, r7
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	290f      	cmp	r1, #15
 8001086:	d900      	bls.n	800108a <__aeabi_dmul+0x96>
 8001088:	e07e      	b.n	8001188 <__aeabi_dmul+0x194>
 800108a:	4bc2      	ldr	r3, [pc, #776]	; (8001394 <__aeabi_dmul+0x3a0>)
 800108c:	0089      	lsls	r1, r1, #2
 800108e:	5859      	ldr	r1, [r3, r1]
 8001090:	468f      	mov	pc, r1
 8001092:	4652      	mov	r2, sl
 8001094:	9b00      	ldr	r3, [sp, #0]
 8001096:	4332      	orrs	r2, r6
 8001098:	d000      	beq.n	800109c <__aeabi_dmul+0xa8>
 800109a:	e156      	b.n	800134a <__aeabi_dmul+0x356>
 800109c:	49bb      	ldr	r1, [pc, #748]	; (800138c <__aeabi_dmul+0x398>)
 800109e:	2600      	movs	r6, #0
 80010a0:	468c      	mov	ip, r1
 80010a2:	4463      	add	r3, ip
 80010a4:	4649      	mov	r1, r9
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	4319      	orrs	r1, r3
 80010ac:	4689      	mov	r9, r1
 80010ae:	2002      	movs	r0, #2
 80010b0:	e7e1      	b.n	8001076 <__aeabi_dmul+0x82>
 80010b2:	4643      	mov	r3, r8
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	0034      	movs	r4, r6
 80010b8:	0015      	movs	r5, r2
 80010ba:	4683      	mov	fp, r0
 80010bc:	465b      	mov	r3, fp
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d05e      	beq.n	8001180 <__aeabi_dmul+0x18c>
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dmul+0xd4>
 80010c6:	e1f3      	b.n	80014b0 <__aeabi_dmul+0x4bc>
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d000      	beq.n	80010ce <__aeabi_dmul+0xda>
 80010cc:	e118      	b.n	8001300 <__aeabi_dmul+0x30c>
 80010ce:	2200      	movs	r2, #0
 80010d0:	2400      	movs	r4, #0
 80010d2:	2500      	movs	r5, #0
 80010d4:	9b01      	ldr	r3, [sp, #4]
 80010d6:	0512      	lsls	r2, r2, #20
 80010d8:	4322      	orrs	r2, r4
 80010da:	07db      	lsls	r3, r3, #31
 80010dc:	431a      	orrs	r2, r3
 80010de:	0028      	movs	r0, r5
 80010e0:	0011      	movs	r1, r2
 80010e2:	b007      	add	sp, #28
 80010e4:	bcf0      	pop	{r4, r5, r6, r7}
 80010e6:	46bb      	mov	fp, r7
 80010e8:	46b2      	mov	sl, r6
 80010ea:	46a9      	mov	r9, r5
 80010ec:	46a0      	mov	r8, r4
 80010ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f0:	0025      	movs	r5, r4
 80010f2:	4305      	orrs	r5, r0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_dmul+0x104>
 80010f6:	e141      	b.n	800137c <__aeabi_dmul+0x388>
 80010f8:	2c00      	cmp	r4, #0
 80010fa:	d100      	bne.n	80010fe <__aeabi_dmul+0x10a>
 80010fc:	e1ad      	b.n	800145a <__aeabi_dmul+0x466>
 80010fe:	0020      	movs	r0, r4
 8001100:	f000 fafc 	bl	80016fc <__clzsi2>
 8001104:	0001      	movs	r1, r0
 8001106:	0002      	movs	r2, r0
 8001108:	390b      	subs	r1, #11
 800110a:	231d      	movs	r3, #29
 800110c:	0010      	movs	r0, r2
 800110e:	1a5b      	subs	r3, r3, r1
 8001110:	0031      	movs	r1, r6
 8001112:	0035      	movs	r5, r6
 8001114:	3808      	subs	r0, #8
 8001116:	4084      	lsls	r4, r0
 8001118:	40d9      	lsrs	r1, r3
 800111a:	4085      	lsls	r5, r0
 800111c:	430c      	orrs	r4, r1
 800111e:	489e      	ldr	r0, [pc, #632]	; (8001398 <__aeabi_dmul+0x3a4>)
 8001120:	1a83      	subs	r3, r0, r2
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	4699      	mov	r9, r3
 8001128:	469b      	mov	fp, r3
 800112a:	e786      	b.n	800103a <__aeabi_dmul+0x46>
 800112c:	0005      	movs	r5, r0
 800112e:	4325      	orrs	r5, r4
 8001130:	d000      	beq.n	8001134 <__aeabi_dmul+0x140>
 8001132:	e11c      	b.n	800136e <__aeabi_dmul+0x37a>
 8001134:	2208      	movs	r2, #8
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2302      	movs	r3, #2
 800113a:	2400      	movs	r4, #0
 800113c:	4691      	mov	r9, r2
 800113e:	469b      	mov	fp, r3
 8001140:	e77b      	b.n	800103a <__aeabi_dmul+0x46>
 8001142:	4652      	mov	r2, sl
 8001144:	4332      	orrs	r2, r6
 8001146:	d100      	bne.n	800114a <__aeabi_dmul+0x156>
 8001148:	e10a      	b.n	8001360 <__aeabi_dmul+0x36c>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_dmul+0x15c>
 800114e:	e176      	b.n	800143e <__aeabi_dmul+0x44a>
 8001150:	0030      	movs	r0, r6
 8001152:	f000 fad3 	bl	80016fc <__clzsi2>
 8001156:	0002      	movs	r2, r0
 8001158:	3a0b      	subs	r2, #11
 800115a:	231d      	movs	r3, #29
 800115c:	0001      	movs	r1, r0
 800115e:	1a9b      	subs	r3, r3, r2
 8001160:	4652      	mov	r2, sl
 8001162:	3908      	subs	r1, #8
 8001164:	40da      	lsrs	r2, r3
 8001166:	408e      	lsls	r6, r1
 8001168:	4316      	orrs	r6, r2
 800116a:	4652      	mov	r2, sl
 800116c:	408a      	lsls	r2, r1
 800116e:	9b00      	ldr	r3, [sp, #0]
 8001170:	4989      	ldr	r1, [pc, #548]	; (8001398 <__aeabi_dmul+0x3a4>)
 8001172:	1a18      	subs	r0, r3, r0
 8001174:	0003      	movs	r3, r0
 8001176:	468c      	mov	ip, r1
 8001178:	4463      	add	r3, ip
 800117a:	2000      	movs	r0, #0
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	e77a      	b.n	8001076 <__aeabi_dmul+0x82>
 8001180:	2400      	movs	r4, #0
 8001182:	2500      	movs	r5, #0
 8001184:	4a81      	ldr	r2, [pc, #516]	; (800138c <__aeabi_dmul+0x398>)
 8001186:	e7a5      	b.n	80010d4 <__aeabi_dmul+0xe0>
 8001188:	0c2f      	lsrs	r7, r5, #16
 800118a:	042d      	lsls	r5, r5, #16
 800118c:	0c2d      	lsrs	r5, r5, #16
 800118e:	002b      	movs	r3, r5
 8001190:	0c11      	lsrs	r1, r2, #16
 8001192:	0412      	lsls	r2, r2, #16
 8001194:	0c12      	lsrs	r2, r2, #16
 8001196:	4353      	muls	r3, r2
 8001198:	4698      	mov	r8, r3
 800119a:	0013      	movs	r3, r2
 800119c:	0028      	movs	r0, r5
 800119e:	437b      	muls	r3, r7
 80011a0:	4699      	mov	r9, r3
 80011a2:	4348      	muls	r0, r1
 80011a4:	4448      	add	r0, r9
 80011a6:	4683      	mov	fp, r0
 80011a8:	4640      	mov	r0, r8
 80011aa:	000b      	movs	r3, r1
 80011ac:	0c00      	lsrs	r0, r0, #16
 80011ae:	4682      	mov	sl, r0
 80011b0:	4658      	mov	r0, fp
 80011b2:	437b      	muls	r3, r7
 80011b4:	4450      	add	r0, sl
 80011b6:	9302      	str	r3, [sp, #8]
 80011b8:	4581      	cmp	r9, r0
 80011ba:	d906      	bls.n	80011ca <__aeabi_dmul+0x1d6>
 80011bc:	469a      	mov	sl, r3
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	025b      	lsls	r3, r3, #9
 80011c2:	4699      	mov	r9, r3
 80011c4:	44ca      	add	sl, r9
 80011c6:	4653      	mov	r3, sl
 80011c8:	9302      	str	r3, [sp, #8]
 80011ca:	0c03      	lsrs	r3, r0, #16
 80011cc:	469b      	mov	fp, r3
 80011ce:	4643      	mov	r3, r8
 80011d0:	041b      	lsls	r3, r3, #16
 80011d2:	0400      	lsls	r0, r0, #16
 80011d4:	0c1b      	lsrs	r3, r3, #16
 80011d6:	4698      	mov	r8, r3
 80011d8:	0003      	movs	r3, r0
 80011da:	4443      	add	r3, r8
 80011dc:	9304      	str	r3, [sp, #16]
 80011de:	0c33      	lsrs	r3, r6, #16
 80011e0:	4699      	mov	r9, r3
 80011e2:	002b      	movs	r3, r5
 80011e4:	0436      	lsls	r6, r6, #16
 80011e6:	0c36      	lsrs	r6, r6, #16
 80011e8:	4373      	muls	r3, r6
 80011ea:	4698      	mov	r8, r3
 80011ec:	0033      	movs	r3, r6
 80011ee:	437b      	muls	r3, r7
 80011f0:	469a      	mov	sl, r3
 80011f2:	464b      	mov	r3, r9
 80011f4:	435d      	muls	r5, r3
 80011f6:	435f      	muls	r7, r3
 80011f8:	4643      	mov	r3, r8
 80011fa:	4455      	add	r5, sl
 80011fc:	0c18      	lsrs	r0, r3, #16
 80011fe:	1940      	adds	r0, r0, r5
 8001200:	4582      	cmp	sl, r0
 8001202:	d903      	bls.n	800120c <__aeabi_dmul+0x218>
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	025b      	lsls	r3, r3, #9
 8001208:	469a      	mov	sl, r3
 800120a:	4457      	add	r7, sl
 800120c:	0c05      	lsrs	r5, r0, #16
 800120e:	19eb      	adds	r3, r5, r7
 8001210:	9305      	str	r3, [sp, #20]
 8001212:	4643      	mov	r3, r8
 8001214:	041d      	lsls	r5, r3, #16
 8001216:	0c2d      	lsrs	r5, r5, #16
 8001218:	0400      	lsls	r0, r0, #16
 800121a:	1940      	adds	r0, r0, r5
 800121c:	0c25      	lsrs	r5, r4, #16
 800121e:	0424      	lsls	r4, r4, #16
 8001220:	0c24      	lsrs	r4, r4, #16
 8001222:	0027      	movs	r7, r4
 8001224:	4357      	muls	r7, r2
 8001226:	436a      	muls	r2, r5
 8001228:	4690      	mov	r8, r2
 800122a:	002a      	movs	r2, r5
 800122c:	0c3b      	lsrs	r3, r7, #16
 800122e:	469a      	mov	sl, r3
 8001230:	434a      	muls	r2, r1
 8001232:	4361      	muls	r1, r4
 8001234:	4441      	add	r1, r8
 8001236:	4451      	add	r1, sl
 8001238:	4483      	add	fp, r0
 800123a:	4588      	cmp	r8, r1
 800123c:	d903      	bls.n	8001246 <__aeabi_dmul+0x252>
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4698      	mov	r8, r3
 8001244:	4442      	add	r2, r8
 8001246:	043f      	lsls	r7, r7, #16
 8001248:	0c0b      	lsrs	r3, r1, #16
 800124a:	0c3f      	lsrs	r7, r7, #16
 800124c:	0409      	lsls	r1, r1, #16
 800124e:	19c9      	adds	r1, r1, r7
 8001250:	0027      	movs	r7, r4
 8001252:	4698      	mov	r8, r3
 8001254:	464b      	mov	r3, r9
 8001256:	4377      	muls	r7, r6
 8001258:	435c      	muls	r4, r3
 800125a:	436e      	muls	r6, r5
 800125c:	435d      	muls	r5, r3
 800125e:	0c3b      	lsrs	r3, r7, #16
 8001260:	4699      	mov	r9, r3
 8001262:	19a4      	adds	r4, r4, r6
 8001264:	444c      	add	r4, r9
 8001266:	4442      	add	r2, r8
 8001268:	9503      	str	r5, [sp, #12]
 800126a:	42a6      	cmp	r6, r4
 800126c:	d904      	bls.n	8001278 <__aeabi_dmul+0x284>
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	025b      	lsls	r3, r3, #9
 8001272:	4698      	mov	r8, r3
 8001274:	4445      	add	r5, r8
 8001276:	9503      	str	r5, [sp, #12]
 8001278:	9b02      	ldr	r3, [sp, #8]
 800127a:	043f      	lsls	r7, r7, #16
 800127c:	445b      	add	r3, fp
 800127e:	001e      	movs	r6, r3
 8001280:	4283      	cmp	r3, r0
 8001282:	4180      	sbcs	r0, r0
 8001284:	0423      	lsls	r3, r4, #16
 8001286:	4698      	mov	r8, r3
 8001288:	9b05      	ldr	r3, [sp, #20]
 800128a:	0c3f      	lsrs	r7, r7, #16
 800128c:	4447      	add	r7, r8
 800128e:	4698      	mov	r8, r3
 8001290:	1876      	adds	r6, r6, r1
 8001292:	428e      	cmp	r6, r1
 8001294:	4189      	sbcs	r1, r1
 8001296:	4447      	add	r7, r8
 8001298:	4240      	negs	r0, r0
 800129a:	183d      	adds	r5, r7, r0
 800129c:	46a8      	mov	r8, r5
 800129e:	4693      	mov	fp, r2
 80012a0:	4249      	negs	r1, r1
 80012a2:	468a      	mov	sl, r1
 80012a4:	44c3      	add	fp, r8
 80012a6:	429f      	cmp	r7, r3
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	4580      	cmp	r8, r0
 80012ac:	4180      	sbcs	r0, r0
 80012ae:	9b03      	ldr	r3, [sp, #12]
 80012b0:	44da      	add	sl, fp
 80012b2:	4698      	mov	r8, r3
 80012b4:	4653      	mov	r3, sl
 80012b6:	4240      	negs	r0, r0
 80012b8:	427f      	negs	r7, r7
 80012ba:	4307      	orrs	r7, r0
 80012bc:	0c24      	lsrs	r4, r4, #16
 80012be:	4593      	cmp	fp, r2
 80012c0:	4192      	sbcs	r2, r2
 80012c2:	458a      	cmp	sl, r1
 80012c4:	4189      	sbcs	r1, r1
 80012c6:	193f      	adds	r7, r7, r4
 80012c8:	0ddc      	lsrs	r4, r3, #23
 80012ca:	9b04      	ldr	r3, [sp, #16]
 80012cc:	0275      	lsls	r5, r6, #9
 80012ce:	431d      	orrs	r5, r3
 80012d0:	1e68      	subs	r0, r5, #1
 80012d2:	4185      	sbcs	r5, r0
 80012d4:	4653      	mov	r3, sl
 80012d6:	4252      	negs	r2, r2
 80012d8:	4249      	negs	r1, r1
 80012da:	430a      	orrs	r2, r1
 80012dc:	18bf      	adds	r7, r7, r2
 80012de:	4447      	add	r7, r8
 80012e0:	0df6      	lsrs	r6, r6, #23
 80012e2:	027f      	lsls	r7, r7, #9
 80012e4:	4335      	orrs	r5, r6
 80012e6:	025a      	lsls	r2, r3, #9
 80012e8:	433c      	orrs	r4, r7
 80012ea:	4315      	orrs	r5, r2
 80012ec:	01fb      	lsls	r3, r7, #7
 80012ee:	d400      	bmi.n	80012f2 <__aeabi_dmul+0x2fe>
 80012f0:	e0c1      	b.n	8001476 <__aeabi_dmul+0x482>
 80012f2:	2101      	movs	r1, #1
 80012f4:	086a      	lsrs	r2, r5, #1
 80012f6:	400d      	ands	r5, r1
 80012f8:	4315      	orrs	r5, r2
 80012fa:	07e2      	lsls	r2, r4, #31
 80012fc:	4315      	orrs	r5, r2
 80012fe:	0864      	lsrs	r4, r4, #1
 8001300:	4926      	ldr	r1, [pc, #152]	; (800139c <__aeabi_dmul+0x3a8>)
 8001302:	4461      	add	r1, ip
 8001304:	2900      	cmp	r1, #0
 8001306:	dd56      	ble.n	80013b6 <__aeabi_dmul+0x3c2>
 8001308:	076b      	lsls	r3, r5, #29
 800130a:	d009      	beq.n	8001320 <__aeabi_dmul+0x32c>
 800130c:	220f      	movs	r2, #15
 800130e:	402a      	ands	r2, r5
 8001310:	2a04      	cmp	r2, #4
 8001312:	d005      	beq.n	8001320 <__aeabi_dmul+0x32c>
 8001314:	1d2a      	adds	r2, r5, #4
 8001316:	42aa      	cmp	r2, r5
 8001318:	41ad      	sbcs	r5, r5
 800131a:	426d      	negs	r5, r5
 800131c:	1964      	adds	r4, r4, r5
 800131e:	0015      	movs	r5, r2
 8001320:	01e3      	lsls	r3, r4, #7
 8001322:	d504      	bpl.n	800132e <__aeabi_dmul+0x33a>
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <__aeabi_dmul+0x3ac>)
 8001328:	00c9      	lsls	r1, r1, #3
 800132a:	4014      	ands	r4, r2
 800132c:	4461      	add	r1, ip
 800132e:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <__aeabi_dmul+0x3b0>)
 8001330:	4291      	cmp	r1, r2
 8001332:	dd00      	ble.n	8001336 <__aeabi_dmul+0x342>
 8001334:	e724      	b.n	8001180 <__aeabi_dmul+0x18c>
 8001336:	0762      	lsls	r2, r4, #29
 8001338:	08ed      	lsrs	r5, r5, #3
 800133a:	0264      	lsls	r4, r4, #9
 800133c:	0549      	lsls	r1, r1, #21
 800133e:	4315      	orrs	r5, r2
 8001340:	0b24      	lsrs	r4, r4, #12
 8001342:	0d4a      	lsrs	r2, r1, #21
 8001344:	e6c6      	b.n	80010d4 <__aeabi_dmul+0xe0>
 8001346:	9701      	str	r7, [sp, #4]
 8001348:	e6b8      	b.n	80010bc <__aeabi_dmul+0xc8>
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <__aeabi_dmul+0x398>)
 800134c:	2003      	movs	r0, #3
 800134e:	4694      	mov	ip, r2
 8001350:	4463      	add	r3, ip
 8001352:	464a      	mov	r2, r9
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2303      	movs	r3, #3
 8001358:	431a      	orrs	r2, r3
 800135a:	4691      	mov	r9, r2
 800135c:	4652      	mov	r2, sl
 800135e:	e68a      	b.n	8001076 <__aeabi_dmul+0x82>
 8001360:	4649      	mov	r1, r9
 8001362:	2301      	movs	r3, #1
 8001364:	4319      	orrs	r1, r3
 8001366:	4689      	mov	r9, r1
 8001368:	2600      	movs	r6, #0
 800136a:	2001      	movs	r0, #1
 800136c:	e683      	b.n	8001076 <__aeabi_dmul+0x82>
 800136e:	220c      	movs	r2, #12
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	2303      	movs	r3, #3
 8001374:	0005      	movs	r5, r0
 8001376:	4691      	mov	r9, r2
 8001378:	469b      	mov	fp, r3
 800137a:	e65e      	b.n	800103a <__aeabi_dmul+0x46>
 800137c:	2304      	movs	r3, #4
 800137e:	4699      	mov	r9, r3
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	2400      	movs	r4, #0
 8001388:	469b      	mov	fp, r3
 800138a:	e656      	b.n	800103a <__aeabi_dmul+0x46>
 800138c:	000007ff 	.word	0x000007ff
 8001390:	fffffc01 	.word	0xfffffc01
 8001394:	08007be8 	.word	0x08007be8
 8001398:	fffffc0d 	.word	0xfffffc0d
 800139c:	000003ff 	.word	0x000003ff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	000007fe 	.word	0x000007fe
 80013a8:	2300      	movs	r3, #0
 80013aa:	2480      	movs	r4, #128	; 0x80
 80013ac:	2500      	movs	r5, #0
 80013ae:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <__aeabi_dmul+0x4cc>)
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	0324      	lsls	r4, r4, #12
 80013b4:	e68e      	b.n	80010d4 <__aeabi_dmul+0xe0>
 80013b6:	2001      	movs	r0, #1
 80013b8:	1a40      	subs	r0, r0, r1
 80013ba:	2838      	cmp	r0, #56	; 0x38
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dmul+0x3cc>
 80013be:	e686      	b.n	80010ce <__aeabi_dmul+0xda>
 80013c0:	281f      	cmp	r0, #31
 80013c2:	dd5b      	ble.n	800147c <__aeabi_dmul+0x488>
 80013c4:	221f      	movs	r2, #31
 80013c6:	0023      	movs	r3, r4
 80013c8:	4252      	negs	r2, r2
 80013ca:	1a51      	subs	r1, r2, r1
 80013cc:	40cb      	lsrs	r3, r1
 80013ce:	0019      	movs	r1, r3
 80013d0:	2820      	cmp	r0, #32
 80013d2:	d003      	beq.n	80013dc <__aeabi_dmul+0x3e8>
 80013d4:	4a3b      	ldr	r2, [pc, #236]	; (80014c4 <__aeabi_dmul+0x4d0>)
 80013d6:	4462      	add	r2, ip
 80013d8:	4094      	lsls	r4, r2
 80013da:	4325      	orrs	r5, r4
 80013dc:	1e6a      	subs	r2, r5, #1
 80013de:	4195      	sbcs	r5, r2
 80013e0:	002a      	movs	r2, r5
 80013e2:	430a      	orrs	r2, r1
 80013e4:	2107      	movs	r1, #7
 80013e6:	000d      	movs	r5, r1
 80013e8:	2400      	movs	r4, #0
 80013ea:	4015      	ands	r5, r2
 80013ec:	4211      	tst	r1, r2
 80013ee:	d05b      	beq.n	80014a8 <__aeabi_dmul+0x4b4>
 80013f0:	210f      	movs	r1, #15
 80013f2:	2400      	movs	r4, #0
 80013f4:	4011      	ands	r1, r2
 80013f6:	2904      	cmp	r1, #4
 80013f8:	d053      	beq.n	80014a2 <__aeabi_dmul+0x4ae>
 80013fa:	1d11      	adds	r1, r2, #4
 80013fc:	4291      	cmp	r1, r2
 80013fe:	4192      	sbcs	r2, r2
 8001400:	4252      	negs	r2, r2
 8001402:	18a4      	adds	r4, r4, r2
 8001404:	000a      	movs	r2, r1
 8001406:	0223      	lsls	r3, r4, #8
 8001408:	d54b      	bpl.n	80014a2 <__aeabi_dmul+0x4ae>
 800140a:	2201      	movs	r2, #1
 800140c:	2400      	movs	r4, #0
 800140e:	2500      	movs	r5, #0
 8001410:	e660      	b.n	80010d4 <__aeabi_dmul+0xe0>
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	031b      	lsls	r3, r3, #12
 8001416:	421c      	tst	r4, r3
 8001418:	d009      	beq.n	800142e <__aeabi_dmul+0x43a>
 800141a:	421e      	tst	r6, r3
 800141c:	d107      	bne.n	800142e <__aeabi_dmul+0x43a>
 800141e:	4333      	orrs	r3, r6
 8001420:	031c      	lsls	r4, r3, #12
 8001422:	4643      	mov	r3, r8
 8001424:	0015      	movs	r5, r2
 8001426:	0b24      	lsrs	r4, r4, #12
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <__aeabi_dmul+0x4cc>)
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	e652      	b.n	80010d4 <__aeabi_dmul+0xe0>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	0312      	lsls	r2, r2, #12
 8001432:	4314      	orrs	r4, r2
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <__aeabi_dmul+0x4cc>)
 8001438:	0b24      	lsrs	r4, r4, #12
 800143a:	9701      	str	r7, [sp, #4]
 800143c:	e64a      	b.n	80010d4 <__aeabi_dmul+0xe0>
 800143e:	f000 f95d 	bl	80016fc <__clzsi2>
 8001442:	0003      	movs	r3, r0
 8001444:	001a      	movs	r2, r3
 8001446:	3215      	adds	r2, #21
 8001448:	3020      	adds	r0, #32
 800144a:	2a1c      	cmp	r2, #28
 800144c:	dc00      	bgt.n	8001450 <__aeabi_dmul+0x45c>
 800144e:	e684      	b.n	800115a <__aeabi_dmul+0x166>
 8001450:	4656      	mov	r6, sl
 8001452:	3b08      	subs	r3, #8
 8001454:	2200      	movs	r2, #0
 8001456:	409e      	lsls	r6, r3
 8001458:	e689      	b.n	800116e <__aeabi_dmul+0x17a>
 800145a:	f000 f94f 	bl	80016fc <__clzsi2>
 800145e:	0001      	movs	r1, r0
 8001460:	0002      	movs	r2, r0
 8001462:	3115      	adds	r1, #21
 8001464:	3220      	adds	r2, #32
 8001466:	291c      	cmp	r1, #28
 8001468:	dc00      	bgt.n	800146c <__aeabi_dmul+0x478>
 800146a:	e64e      	b.n	800110a <__aeabi_dmul+0x116>
 800146c:	0034      	movs	r4, r6
 800146e:	3808      	subs	r0, #8
 8001470:	2500      	movs	r5, #0
 8001472:	4084      	lsls	r4, r0
 8001474:	e653      	b.n	800111e <__aeabi_dmul+0x12a>
 8001476:	9b00      	ldr	r3, [sp, #0]
 8001478:	469c      	mov	ip, r3
 800147a:	e741      	b.n	8001300 <__aeabi_dmul+0x30c>
 800147c:	4912      	ldr	r1, [pc, #72]	; (80014c8 <__aeabi_dmul+0x4d4>)
 800147e:	0022      	movs	r2, r4
 8001480:	4461      	add	r1, ip
 8001482:	002e      	movs	r6, r5
 8001484:	408d      	lsls	r5, r1
 8001486:	408a      	lsls	r2, r1
 8001488:	40c6      	lsrs	r6, r0
 800148a:	1e69      	subs	r1, r5, #1
 800148c:	418d      	sbcs	r5, r1
 800148e:	4332      	orrs	r2, r6
 8001490:	432a      	orrs	r2, r5
 8001492:	40c4      	lsrs	r4, r0
 8001494:	0753      	lsls	r3, r2, #29
 8001496:	d0b6      	beq.n	8001406 <__aeabi_dmul+0x412>
 8001498:	210f      	movs	r1, #15
 800149a:	4011      	ands	r1, r2
 800149c:	2904      	cmp	r1, #4
 800149e:	d1ac      	bne.n	80013fa <__aeabi_dmul+0x406>
 80014a0:	e7b1      	b.n	8001406 <__aeabi_dmul+0x412>
 80014a2:	0765      	lsls	r5, r4, #29
 80014a4:	0264      	lsls	r4, r4, #9
 80014a6:	0b24      	lsrs	r4, r4, #12
 80014a8:	08d2      	lsrs	r2, r2, #3
 80014aa:	4315      	orrs	r5, r2
 80014ac:	2200      	movs	r2, #0
 80014ae:	e611      	b.n	80010d4 <__aeabi_dmul+0xe0>
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0312      	lsls	r2, r2, #12
 80014b4:	4314      	orrs	r4, r2
 80014b6:	0324      	lsls	r4, r4, #12
 80014b8:	4a01      	ldr	r2, [pc, #4]	; (80014c0 <__aeabi_dmul+0x4cc>)
 80014ba:	0b24      	lsrs	r4, r4, #12
 80014bc:	e60a      	b.n	80010d4 <__aeabi_dmul+0xe0>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	000007ff 	.word	0x000007ff
 80014c4:	0000043e 	.word	0x0000043e
 80014c8:	0000041e 	.word	0x0000041e

080014cc <__aeabi_i2d>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d016      	beq.n	8001500 <__aeabi_i2d+0x34>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f000 f90e 	bl	80016fc <__clzsi2>
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <__aeabi_i2d+0x5c>)
 80014e2:	1a12      	subs	r2, r2, r0
 80014e4:	280a      	cmp	r0, #10
 80014e6:	dc16      	bgt.n	8001516 <__aeabi_i2d+0x4a>
 80014e8:	0003      	movs	r3, r0
 80014ea:	002e      	movs	r6, r5
 80014ec:	3315      	adds	r3, #21
 80014ee:	409e      	lsls	r6, r3
 80014f0:	230b      	movs	r3, #11
 80014f2:	1a18      	subs	r0, r3, r0
 80014f4:	40c5      	lsrs	r5, r0
 80014f6:	0553      	lsls	r3, r2, #21
 80014f8:	032d      	lsls	r5, r5, #12
 80014fa:	0b2d      	lsrs	r5, r5, #12
 80014fc:	0d5b      	lsrs	r3, r3, #21
 80014fe:	e003      	b.n	8001508 <__aeabi_i2d+0x3c>
 8001500:	2400      	movs	r4, #0
 8001502:	2300      	movs	r3, #0
 8001504:	2500      	movs	r5, #0
 8001506:	2600      	movs	r6, #0
 8001508:	051b      	lsls	r3, r3, #20
 800150a:	432b      	orrs	r3, r5
 800150c:	07e4      	lsls	r4, r4, #31
 800150e:	4323      	orrs	r3, r4
 8001510:	0030      	movs	r0, r6
 8001512:	0019      	movs	r1, r3
 8001514:	bd70      	pop	{r4, r5, r6, pc}
 8001516:	380b      	subs	r0, #11
 8001518:	4085      	lsls	r5, r0
 800151a:	0553      	lsls	r3, r2, #21
 800151c:	032d      	lsls	r5, r5, #12
 800151e:	2600      	movs	r6, #0
 8001520:	0b2d      	lsrs	r5, r5, #12
 8001522:	0d5b      	lsrs	r3, r3, #21
 8001524:	e7f0      	b.n	8001508 <__aeabi_i2d+0x3c>
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	0000041e 	.word	0x0000041e

0800152c <__aeabi_ui2d>:
 800152c:	b510      	push	{r4, lr}
 800152e:	1e04      	subs	r4, r0, #0
 8001530:	d010      	beq.n	8001554 <__aeabi_ui2d+0x28>
 8001532:	f000 f8e3 	bl	80016fc <__clzsi2>
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <__aeabi_ui2d+0x48>)
 8001538:	1a1b      	subs	r3, r3, r0
 800153a:	280a      	cmp	r0, #10
 800153c:	dc11      	bgt.n	8001562 <__aeabi_ui2d+0x36>
 800153e:	220b      	movs	r2, #11
 8001540:	0021      	movs	r1, r4
 8001542:	1a12      	subs	r2, r2, r0
 8001544:	40d1      	lsrs	r1, r2
 8001546:	3015      	adds	r0, #21
 8001548:	030a      	lsls	r2, r1, #12
 800154a:	055b      	lsls	r3, r3, #21
 800154c:	4084      	lsls	r4, r0
 800154e:	0b12      	lsrs	r2, r2, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	e001      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	051b      	lsls	r3, r3, #20
 800155a:	4313      	orrs	r3, r2
 800155c:	0020      	movs	r0, r4
 800155e:	0019      	movs	r1, r3
 8001560:	bd10      	pop	{r4, pc}
 8001562:	0022      	movs	r2, r4
 8001564:	380b      	subs	r0, #11
 8001566:	4082      	lsls	r2, r0
 8001568:	055b      	lsls	r3, r3, #21
 800156a:	0312      	lsls	r2, r2, #12
 800156c:	2400      	movs	r4, #0
 800156e:	0b12      	lsrs	r2, r2, #12
 8001570:	0d5b      	lsrs	r3, r3, #21
 8001572:	e7f1      	b.n	8001558 <__aeabi_ui2d+0x2c>
 8001574:	0000041e 	.word	0x0000041e

08001578 <__aeabi_d2f>:
 8001578:	0002      	movs	r2, r0
 800157a:	004b      	lsls	r3, r1, #1
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	0308      	lsls	r0, r1, #12
 8001580:	0d5b      	lsrs	r3, r3, #21
 8001582:	4e3d      	ldr	r6, [pc, #244]	; (8001678 <__aeabi_d2f+0x100>)
 8001584:	0fcc      	lsrs	r4, r1, #31
 8001586:	0a40      	lsrs	r0, r0, #9
 8001588:	0f51      	lsrs	r1, r2, #29
 800158a:	1c5f      	adds	r7, r3, #1
 800158c:	4308      	orrs	r0, r1
 800158e:	00d5      	lsls	r5, r2, #3
 8001590:	4237      	tst	r7, r6
 8001592:	d00a      	beq.n	80015aa <__aeabi_d2f+0x32>
 8001594:	4939      	ldr	r1, [pc, #228]	; (800167c <__aeabi_d2f+0x104>)
 8001596:	185e      	adds	r6, r3, r1
 8001598:	2efe      	cmp	r6, #254	; 0xfe
 800159a:	dd16      	ble.n	80015ca <__aeabi_d2f+0x52>
 800159c:	23ff      	movs	r3, #255	; 0xff
 800159e:	2100      	movs	r1, #0
 80015a0:	05db      	lsls	r3, r3, #23
 80015a2:	430b      	orrs	r3, r1
 80015a4:	07e0      	lsls	r0, r4, #31
 80015a6:	4318      	orrs	r0, r3
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <__aeabi_d2f+0x44>
 80015ae:	4328      	orrs	r0, r5
 80015b0:	d027      	beq.n	8001602 <__aeabi_d2f+0x8a>
 80015b2:	2105      	movs	r1, #5
 80015b4:	0189      	lsls	r1, r1, #6
 80015b6:	0a49      	lsrs	r1, r1, #9
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e7f1      	b.n	80015a0 <__aeabi_d2f+0x28>
 80015bc:	4305      	orrs	r5, r0
 80015be:	d0ed      	beq.n	800159c <__aeabi_d2f+0x24>
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	03c9      	lsls	r1, r1, #15
 80015c4:	23ff      	movs	r3, #255	; 0xff
 80015c6:	4301      	orrs	r1, r0
 80015c8:	e7ea      	b.n	80015a0 <__aeabi_d2f+0x28>
 80015ca:	2e00      	cmp	r6, #0
 80015cc:	dd1c      	ble.n	8001608 <__aeabi_d2f+0x90>
 80015ce:	0192      	lsls	r2, r2, #6
 80015d0:	0011      	movs	r1, r2
 80015d2:	1e4a      	subs	r2, r1, #1
 80015d4:	4191      	sbcs	r1, r2
 80015d6:	00c0      	lsls	r0, r0, #3
 80015d8:	0f6d      	lsrs	r5, r5, #29
 80015da:	4301      	orrs	r1, r0
 80015dc:	4329      	orrs	r1, r5
 80015de:	074b      	lsls	r3, r1, #29
 80015e0:	d048      	beq.n	8001674 <__aeabi_d2f+0xfc>
 80015e2:	230f      	movs	r3, #15
 80015e4:	400b      	ands	r3, r1
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d000      	beq.n	80015ec <__aeabi_d2f+0x74>
 80015ea:	3104      	adds	r1, #4
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	04db      	lsls	r3, r3, #19
 80015f0:	400b      	ands	r3, r1
 80015f2:	d03f      	beq.n	8001674 <__aeabi_d2f+0xfc>
 80015f4:	1c72      	adds	r2, r6, #1
 80015f6:	2efe      	cmp	r6, #254	; 0xfe
 80015f8:	d0d0      	beq.n	800159c <__aeabi_d2f+0x24>
 80015fa:	0189      	lsls	r1, r1, #6
 80015fc:	0a49      	lsrs	r1, r1, #9
 80015fe:	b2d3      	uxtb	r3, r2
 8001600:	e7ce      	b.n	80015a0 <__aeabi_d2f+0x28>
 8001602:	2300      	movs	r3, #0
 8001604:	2100      	movs	r1, #0
 8001606:	e7cb      	b.n	80015a0 <__aeabi_d2f+0x28>
 8001608:	0032      	movs	r2, r6
 800160a:	3217      	adds	r2, #23
 800160c:	db22      	blt.n	8001654 <__aeabi_d2f+0xdc>
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	221e      	movs	r2, #30
 8001612:	0409      	lsls	r1, r1, #16
 8001614:	4308      	orrs	r0, r1
 8001616:	1b92      	subs	r2, r2, r6
 8001618:	2a1f      	cmp	r2, #31
 800161a:	dd1d      	ble.n	8001658 <__aeabi_d2f+0xe0>
 800161c:	2102      	movs	r1, #2
 800161e:	4249      	negs	r1, r1
 8001620:	1b8e      	subs	r6, r1, r6
 8001622:	0001      	movs	r1, r0
 8001624:	40f1      	lsrs	r1, r6
 8001626:	000e      	movs	r6, r1
 8001628:	2a20      	cmp	r2, #32
 800162a:	d004      	beq.n	8001636 <__aeabi_d2f+0xbe>
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <__aeabi_d2f+0x108>)
 800162e:	4694      	mov	ip, r2
 8001630:	4463      	add	r3, ip
 8001632:	4098      	lsls	r0, r3
 8001634:	4305      	orrs	r5, r0
 8001636:	0029      	movs	r1, r5
 8001638:	1e4d      	subs	r5, r1, #1
 800163a:	41a9      	sbcs	r1, r5
 800163c:	4331      	orrs	r1, r6
 800163e:	2600      	movs	r6, #0
 8001640:	074b      	lsls	r3, r1, #29
 8001642:	d1ce      	bne.n	80015e2 <__aeabi_d2f+0x6a>
 8001644:	2080      	movs	r0, #128	; 0x80
 8001646:	000b      	movs	r3, r1
 8001648:	04c0      	lsls	r0, r0, #19
 800164a:	2201      	movs	r2, #1
 800164c:	4003      	ands	r3, r0
 800164e:	4201      	tst	r1, r0
 8001650:	d1d3      	bne.n	80015fa <__aeabi_d2f+0x82>
 8001652:	e7af      	b.n	80015b4 <__aeabi_d2f+0x3c>
 8001654:	2300      	movs	r3, #0
 8001656:	e7ac      	b.n	80015b2 <__aeabi_d2f+0x3a>
 8001658:	490a      	ldr	r1, [pc, #40]	; (8001684 <__aeabi_d2f+0x10c>)
 800165a:	468c      	mov	ip, r1
 800165c:	0029      	movs	r1, r5
 800165e:	4463      	add	r3, ip
 8001660:	40d1      	lsrs	r1, r2
 8001662:	409d      	lsls	r5, r3
 8001664:	000a      	movs	r2, r1
 8001666:	0029      	movs	r1, r5
 8001668:	4098      	lsls	r0, r3
 800166a:	1e4d      	subs	r5, r1, #1
 800166c:	41a9      	sbcs	r1, r5
 800166e:	4301      	orrs	r1, r0
 8001670:	4311      	orrs	r1, r2
 8001672:	e7e4      	b.n	800163e <__aeabi_d2f+0xc6>
 8001674:	0033      	movs	r3, r6
 8001676:	e79d      	b.n	80015b4 <__aeabi_d2f+0x3c>
 8001678:	000007fe 	.word	0x000007fe
 800167c:	fffffc80 	.word	0xfffffc80
 8001680:	fffffca2 	.word	0xfffffca2
 8001684:	fffffc82 	.word	0xfffffc82

08001688 <__aeabi_cfrcmple>:
 8001688:	4684      	mov	ip, r0
 800168a:	1c08      	adds	r0, r1, #0
 800168c:	4661      	mov	r1, ip
 800168e:	e7ff      	b.n	8001690 <__aeabi_cfcmpeq>

08001690 <__aeabi_cfcmpeq>:
 8001690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001692:	f000 f8c5 	bl	8001820 <__lesf2>
 8001696:	2800      	cmp	r0, #0
 8001698:	d401      	bmi.n	800169e <__aeabi_cfcmpeq+0xe>
 800169a:	2100      	movs	r1, #0
 800169c:	42c8      	cmn	r0, r1
 800169e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080016a0 <__aeabi_fcmpeq>:
 80016a0:	b510      	push	{r4, lr}
 80016a2:	f000 f849 	bl	8001738 <__eqsf2>
 80016a6:	4240      	negs	r0, r0
 80016a8:	3001      	adds	r0, #1
 80016aa:	bd10      	pop	{r4, pc}

080016ac <__aeabi_fcmplt>:
 80016ac:	b510      	push	{r4, lr}
 80016ae:	f000 f8b7 	bl	8001820 <__lesf2>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	db01      	blt.n	80016ba <__aeabi_fcmplt+0xe>
 80016b6:	2000      	movs	r0, #0
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	2001      	movs	r0, #1
 80016bc:	bd10      	pop	{r4, pc}
 80016be:	46c0      	nop			; (mov r8, r8)

080016c0 <__aeabi_fcmple>:
 80016c0:	b510      	push	{r4, lr}
 80016c2:	f000 f8ad 	bl	8001820 <__lesf2>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	dd01      	ble.n	80016ce <__aeabi_fcmple+0xe>
 80016ca:	2000      	movs	r0, #0
 80016cc:	bd10      	pop	{r4, pc}
 80016ce:	2001      	movs	r0, #1
 80016d0:	bd10      	pop	{r4, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)

080016d4 <__aeabi_fcmpgt>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	f000 f857 	bl	8001788 <__gesf2>
 80016da:	2800      	cmp	r0, #0
 80016dc:	dc01      	bgt.n	80016e2 <__aeabi_fcmpgt+0xe>
 80016de:	2000      	movs	r0, #0
 80016e0:	bd10      	pop	{r4, pc}
 80016e2:	2001      	movs	r0, #1
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)

080016e8 <__aeabi_fcmpge>:
 80016e8:	b510      	push	{r4, lr}
 80016ea:	f000 f84d 	bl	8001788 <__gesf2>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	da01      	bge.n	80016f6 <__aeabi_fcmpge+0xe>
 80016f2:	2000      	movs	r0, #0
 80016f4:	bd10      	pop	{r4, pc}
 80016f6:	2001      	movs	r0, #1
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)

080016fc <__clzsi2>:
 80016fc:	211c      	movs	r1, #28
 80016fe:	2301      	movs	r3, #1
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	4298      	cmp	r0, r3
 8001704:	d301      	bcc.n	800170a <__clzsi2+0xe>
 8001706:	0c00      	lsrs	r0, r0, #16
 8001708:	3910      	subs	r1, #16
 800170a:	0a1b      	lsrs	r3, r3, #8
 800170c:	4298      	cmp	r0, r3
 800170e:	d301      	bcc.n	8001714 <__clzsi2+0x18>
 8001710:	0a00      	lsrs	r0, r0, #8
 8001712:	3908      	subs	r1, #8
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	4298      	cmp	r0, r3
 8001718:	d301      	bcc.n	800171e <__clzsi2+0x22>
 800171a:	0900      	lsrs	r0, r0, #4
 800171c:	3904      	subs	r1, #4
 800171e:	a202      	add	r2, pc, #8	; (adr r2, 8001728 <__clzsi2+0x2c>)
 8001720:	5c10      	ldrb	r0, [r2, r0]
 8001722:	1840      	adds	r0, r0, r1
 8001724:	4770      	bx	lr
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	02020304 	.word	0x02020304
 800172c:	01010101 	.word	0x01010101
	...

08001738 <__eqsf2>:
 8001738:	b570      	push	{r4, r5, r6, lr}
 800173a:	0042      	lsls	r2, r0, #1
 800173c:	024e      	lsls	r6, r1, #9
 800173e:	004c      	lsls	r4, r1, #1
 8001740:	0245      	lsls	r5, r0, #9
 8001742:	0a6d      	lsrs	r5, r5, #9
 8001744:	0e12      	lsrs	r2, r2, #24
 8001746:	0fc3      	lsrs	r3, r0, #31
 8001748:	0a76      	lsrs	r6, r6, #9
 800174a:	0e24      	lsrs	r4, r4, #24
 800174c:	0fc9      	lsrs	r1, r1, #31
 800174e:	2aff      	cmp	r2, #255	; 0xff
 8001750:	d00f      	beq.n	8001772 <__eqsf2+0x3a>
 8001752:	2cff      	cmp	r4, #255	; 0xff
 8001754:	d011      	beq.n	800177a <__eqsf2+0x42>
 8001756:	2001      	movs	r0, #1
 8001758:	42a2      	cmp	r2, r4
 800175a:	d000      	beq.n	800175e <__eqsf2+0x26>
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	42b5      	cmp	r5, r6
 8001760:	d1fc      	bne.n	800175c <__eqsf2+0x24>
 8001762:	428b      	cmp	r3, r1
 8001764:	d00d      	beq.n	8001782 <__eqsf2+0x4a>
 8001766:	2a00      	cmp	r2, #0
 8001768:	d1f8      	bne.n	800175c <__eqsf2+0x24>
 800176a:	0028      	movs	r0, r5
 800176c:	1e45      	subs	r5, r0, #1
 800176e:	41a8      	sbcs	r0, r5
 8001770:	e7f4      	b.n	800175c <__eqsf2+0x24>
 8001772:	2001      	movs	r0, #1
 8001774:	2d00      	cmp	r5, #0
 8001776:	d1f1      	bne.n	800175c <__eqsf2+0x24>
 8001778:	e7eb      	b.n	8001752 <__eqsf2+0x1a>
 800177a:	2001      	movs	r0, #1
 800177c:	2e00      	cmp	r6, #0
 800177e:	d1ed      	bne.n	800175c <__eqsf2+0x24>
 8001780:	e7e9      	b.n	8001756 <__eqsf2+0x1e>
 8001782:	2000      	movs	r0, #0
 8001784:	e7ea      	b.n	800175c <__eqsf2+0x24>
 8001786:	46c0      	nop			; (mov r8, r8)

08001788 <__gesf2>:
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	0042      	lsls	r2, r0, #1
 800178c:	0246      	lsls	r6, r0, #9
 800178e:	024d      	lsls	r5, r1, #9
 8001790:	004c      	lsls	r4, r1, #1
 8001792:	0fc3      	lsrs	r3, r0, #31
 8001794:	0a76      	lsrs	r6, r6, #9
 8001796:	0e12      	lsrs	r2, r2, #24
 8001798:	0a6d      	lsrs	r5, r5, #9
 800179a:	0e24      	lsrs	r4, r4, #24
 800179c:	0fc8      	lsrs	r0, r1, #31
 800179e:	2aff      	cmp	r2, #255	; 0xff
 80017a0:	d01f      	beq.n	80017e2 <__gesf2+0x5a>
 80017a2:	2cff      	cmp	r4, #255	; 0xff
 80017a4:	d010      	beq.n	80017c8 <__gesf2+0x40>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d11f      	bne.n	80017ea <__gesf2+0x62>
 80017aa:	4271      	negs	r1, r6
 80017ac:	4171      	adcs	r1, r6
 80017ae:	2c00      	cmp	r4, #0
 80017b0:	d101      	bne.n	80017b6 <__gesf2+0x2e>
 80017b2:	2d00      	cmp	r5, #0
 80017b4:	d01e      	beq.n	80017f4 <__gesf2+0x6c>
 80017b6:	2900      	cmp	r1, #0
 80017b8:	d10e      	bne.n	80017d8 <__gesf2+0x50>
 80017ba:	4283      	cmp	r3, r0
 80017bc:	d01e      	beq.n	80017fc <__gesf2+0x74>
 80017be:	2102      	movs	r1, #2
 80017c0:	1e58      	subs	r0, r3, #1
 80017c2:	4008      	ands	r0, r1
 80017c4:	3801      	subs	r0, #1
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	2d00      	cmp	r5, #0
 80017ca:	d126      	bne.n	800181a <__gesf2+0x92>
 80017cc:	2a00      	cmp	r2, #0
 80017ce:	d1f4      	bne.n	80017ba <__gesf2+0x32>
 80017d0:	4271      	negs	r1, r6
 80017d2:	4171      	adcs	r1, r6
 80017d4:	2900      	cmp	r1, #0
 80017d6:	d0f0      	beq.n	80017ba <__gesf2+0x32>
 80017d8:	2800      	cmp	r0, #0
 80017da:	d1f4      	bne.n	80017c6 <__gesf2+0x3e>
 80017dc:	2001      	movs	r0, #1
 80017de:	4240      	negs	r0, r0
 80017e0:	e7f1      	b.n	80017c6 <__gesf2+0x3e>
 80017e2:	2e00      	cmp	r6, #0
 80017e4:	d119      	bne.n	800181a <__gesf2+0x92>
 80017e6:	2cff      	cmp	r4, #255	; 0xff
 80017e8:	d0ee      	beq.n	80017c8 <__gesf2+0x40>
 80017ea:	2c00      	cmp	r4, #0
 80017ec:	d1e5      	bne.n	80017ba <__gesf2+0x32>
 80017ee:	2d00      	cmp	r5, #0
 80017f0:	d1e3      	bne.n	80017ba <__gesf2+0x32>
 80017f2:	e7e4      	b.n	80017be <__gesf2+0x36>
 80017f4:	2000      	movs	r0, #0
 80017f6:	2e00      	cmp	r6, #0
 80017f8:	d0e5      	beq.n	80017c6 <__gesf2+0x3e>
 80017fa:	e7e0      	b.n	80017be <__gesf2+0x36>
 80017fc:	42a2      	cmp	r2, r4
 80017fe:	dc05      	bgt.n	800180c <__gesf2+0x84>
 8001800:	dbea      	blt.n	80017d8 <__gesf2+0x50>
 8001802:	42ae      	cmp	r6, r5
 8001804:	d802      	bhi.n	800180c <__gesf2+0x84>
 8001806:	d3e7      	bcc.n	80017d8 <__gesf2+0x50>
 8001808:	2000      	movs	r0, #0
 800180a:	e7dc      	b.n	80017c6 <__gesf2+0x3e>
 800180c:	4241      	negs	r1, r0
 800180e:	4141      	adcs	r1, r0
 8001810:	4248      	negs	r0, r1
 8001812:	2102      	movs	r1, #2
 8001814:	4008      	ands	r0, r1
 8001816:	3801      	subs	r0, #1
 8001818:	e7d5      	b.n	80017c6 <__gesf2+0x3e>
 800181a:	2002      	movs	r0, #2
 800181c:	4240      	negs	r0, r0
 800181e:	e7d2      	b.n	80017c6 <__gesf2+0x3e>

08001820 <__lesf2>:
 8001820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001822:	0042      	lsls	r2, r0, #1
 8001824:	0246      	lsls	r6, r0, #9
 8001826:	024d      	lsls	r5, r1, #9
 8001828:	004c      	lsls	r4, r1, #1
 800182a:	0fc3      	lsrs	r3, r0, #31
 800182c:	0a76      	lsrs	r6, r6, #9
 800182e:	0e12      	lsrs	r2, r2, #24
 8001830:	0a6d      	lsrs	r5, r5, #9
 8001832:	0e24      	lsrs	r4, r4, #24
 8001834:	0fc8      	lsrs	r0, r1, #31
 8001836:	2aff      	cmp	r2, #255	; 0xff
 8001838:	d00d      	beq.n	8001856 <__lesf2+0x36>
 800183a:	2cff      	cmp	r4, #255	; 0xff
 800183c:	d00f      	beq.n	800185e <__lesf2+0x3e>
 800183e:	2a00      	cmp	r2, #0
 8001840:	d123      	bne.n	800188a <__lesf2+0x6a>
 8001842:	4271      	negs	r1, r6
 8001844:	4171      	adcs	r1, r6
 8001846:	2c00      	cmp	r4, #0
 8001848:	d10f      	bne.n	800186a <__lesf2+0x4a>
 800184a:	2d00      	cmp	r5, #0
 800184c:	d10d      	bne.n	800186a <__lesf2+0x4a>
 800184e:	2000      	movs	r0, #0
 8001850:	2e00      	cmp	r6, #0
 8001852:	d014      	beq.n	800187e <__lesf2+0x5e>
 8001854:	e00d      	b.n	8001872 <__lesf2+0x52>
 8001856:	2e00      	cmp	r6, #0
 8001858:	d110      	bne.n	800187c <__lesf2+0x5c>
 800185a:	2cff      	cmp	r4, #255	; 0xff
 800185c:	d115      	bne.n	800188a <__lesf2+0x6a>
 800185e:	2d00      	cmp	r5, #0
 8001860:	d10c      	bne.n	800187c <__lesf2+0x5c>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d103      	bne.n	800186e <__lesf2+0x4e>
 8001866:	4271      	negs	r1, r6
 8001868:	4171      	adcs	r1, r6
 800186a:	2900      	cmp	r1, #0
 800186c:	d108      	bne.n	8001880 <__lesf2+0x60>
 800186e:	4283      	cmp	r3, r0
 8001870:	d010      	beq.n	8001894 <__lesf2+0x74>
 8001872:	2102      	movs	r1, #2
 8001874:	1e58      	subs	r0, r3, #1
 8001876:	4008      	ands	r0, r1
 8001878:	3801      	subs	r0, #1
 800187a:	e000      	b.n	800187e <__lesf2+0x5e>
 800187c:	2002      	movs	r0, #2
 800187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001880:	2800      	cmp	r0, #0
 8001882:	d1fc      	bne.n	800187e <__lesf2+0x5e>
 8001884:	2001      	movs	r0, #1
 8001886:	4240      	negs	r0, r0
 8001888:	e7f9      	b.n	800187e <__lesf2+0x5e>
 800188a:	2c00      	cmp	r4, #0
 800188c:	d1ef      	bne.n	800186e <__lesf2+0x4e>
 800188e:	2d00      	cmp	r5, #0
 8001890:	d1ed      	bne.n	800186e <__lesf2+0x4e>
 8001892:	e7ee      	b.n	8001872 <__lesf2+0x52>
 8001894:	42a2      	cmp	r2, r4
 8001896:	dc05      	bgt.n	80018a4 <__lesf2+0x84>
 8001898:	dbf2      	blt.n	8001880 <__lesf2+0x60>
 800189a:	42ae      	cmp	r6, r5
 800189c:	d802      	bhi.n	80018a4 <__lesf2+0x84>
 800189e:	d3ef      	bcc.n	8001880 <__lesf2+0x60>
 80018a0:	2000      	movs	r0, #0
 80018a2:	e7ec      	b.n	800187e <__lesf2+0x5e>
 80018a4:	4241      	negs	r1, r0
 80018a6:	4141      	adcs	r1, r0
 80018a8:	4248      	negs	r0, r1
 80018aa:	2102      	movs	r1, #2
 80018ac:	4008      	ands	r0, r1
 80018ae:	3801      	subs	r0, #1
 80018b0:	e7e5      	b.n	800187e <__lesf2+0x5e>
 80018b2:	46c0      	nop			; (mov r8, r8)

080018b4 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b08f      	sub	sp, #60	; 0x3c
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80018bc:	200c      	movs	r0, #12
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	22b2      	movs	r2, #178	; 0xb2
 80018c2:	32ff      	adds	r2, #255	; 0xff
 80018c4:	621a      	str	r2, [r3, #32]
	new_LoRa.spredingFactor        = SF_7      ;
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	2224      	movs	r2, #36	; 0x24
 80018ca:	2107      	movs	r1, #7
 80018cc:	5499      	strb	r1, [r3, r2]
	new_LoRa.bandWidth			   = BW_125KHz ;
 80018ce:	183b      	adds	r3, r7, r0
 80018d0:	2225      	movs	r2, #37	; 0x25
 80018d2:	2107      	movs	r1, #7
 80018d4:	5499      	strb	r1, [r3, r2]
	new_LoRa.crcRate               = CR_4_5    ;
 80018d6:	183b      	adds	r3, r7, r0
 80018d8:	2226      	movs	r2, #38	; 0x26
 80018da:	2101      	movs	r1, #1
 80018dc:	5499      	strb	r1, [r3, r2]
	new_LoRa.power				   = POWER_20db;
 80018de:	183b      	adds	r3, r7, r0
 80018e0:	222a      	movs	r2, #42	; 0x2a
 80018e2:	21ff      	movs	r1, #255	; 0xff
 80018e4:	5499      	strb	r1, [r3, r2]
	new_LoRa.overCurrentProtection = 100       ;
 80018e6:	183b      	adds	r3, r7, r0
 80018e8:	222b      	movs	r2, #43	; 0x2b
 80018ea:	2164      	movs	r1, #100	; 0x64
 80018ec:	5499      	strb	r1, [r3, r2]
	new_LoRa.preamble			   = 8         ;
 80018ee:	0001      	movs	r1, r0
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2208      	movs	r2, #8
 80018f4:	851a      	strh	r2, [r3, #40]	; 0x28

	return new_LoRa;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	187a      	adds	r2, r7, r1
 80018fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018fc:	c313      	stmia	r3!, {r0, r1, r4}
 80018fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001900:	c313      	stmia	r3!, {r0, r1, r4}
 8001902:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001904:	c313      	stmia	r3!, {r0, r1, r4}
 8001906:	ca03      	ldmia	r2!, {r0, r1}
 8001908:	c303      	stmia	r3!, {r0, r1}
}
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	46bd      	mov	sp, r7
 800190e:	b00f      	add	sp, #60	; 0x3c
 8001910:	bd90      	pop	{r4, r7, pc}

08001912 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001912:	b5b0      	push	{r4, r5, r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 800191c:	250e      	movs	r5, #14
 800191e:	197c      	adds	r4, r7, r5
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2101      	movs	r1, #1
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f9e8 	bl	8001cfa <LoRa_read>
 800192a:	0003      	movs	r3, r0
 800192c:	7023      	strb	r3, [r4, #0]
	data = read;
 800192e:	200f      	movs	r0, #15
 8001930:	183b      	adds	r3, r7, r0
 8001932:	0029      	movs	r1, r5
 8001934:	187a      	adds	r2, r7, r1
 8001936:	7812      	ldrb	r2, [r2, #0]
 8001938:	701a      	strb	r2, [r3, #0]

	if(mode == SLEEP_MODE){
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <LoRa_gotoMode+0x42>
		data = (read & 0xF8) | 0x00;
 8001940:	183b      	adds	r3, r7, r0
 8001942:	187a      	adds	r2, r7, r1
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	2107      	movs	r1, #7
 8001948:	438a      	bics	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = SLEEP_MODE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
 8001952:	e04e      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == STNBY_MODE){
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d110      	bne.n	800197c <LoRa_gotoMode+0x6a>
		data = (read & 0xF8) | 0x01;
 800195a:	230e      	movs	r3, #14
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	b25b      	sxtb	r3, r3
 8001962:	2207      	movs	r2, #7
 8001964:	4393      	bics	r3, r2
 8001966:	b25b      	sxtb	r3, r3
 8001968:	2201      	movs	r2, #1
 800196a:	4313      	orrs	r3, r2
 800196c:	b25a      	sxtb	r2, r3
 800196e:	230f      	movs	r3, #15
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = STNBY_MODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	61da      	str	r2, [r3, #28]
 800197a:	e03a      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == TRANSMIT_MODE){
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d110      	bne.n	80019a4 <LoRa_gotoMode+0x92>
		data = (read & 0xF8) | 0x03;
 8001982:	230e      	movs	r3, #14
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	2207      	movs	r2, #7
 800198c:	4393      	bics	r3, r2
 800198e:	b25b      	sxtb	r3, r3
 8001990:	2203      	movs	r2, #3
 8001992:	4313      	orrs	r3, r2
 8001994:	b25a      	sxtb	r2, r3
 8001996:	230f      	movs	r3, #15
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = TRANSMIT_MODE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	61da      	str	r2, [r3, #28]
 80019a2:	e026      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == RXCONTIN_MODE){
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d110      	bne.n	80019cc <LoRa_gotoMode+0xba>
		data = (read & 0xF8) | 0x05;
 80019aa:	230e      	movs	r3, #14
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	2207      	movs	r2, #7
 80019b4:	4393      	bics	r3, r2
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	2205      	movs	r2, #5
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	230f      	movs	r3, #15
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXCONTIN_MODE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2205      	movs	r2, #5
 80019c8:	61da      	str	r2, [r3, #28]
 80019ca:	e012      	b.n	80019f2 <LoRa_gotoMode+0xe0>
	}else if (mode == RXSINGLE_MODE){
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d10f      	bne.n	80019f2 <LoRa_gotoMode+0xe0>
		data = (read & 0xF8) | 0x06;
 80019d2:	230e      	movs	r3, #14
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	2207      	movs	r2, #7
 80019dc:	4393      	bics	r3, r2
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	2206      	movs	r2, #6
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b25a      	sxtb	r2, r3
 80019e6:	230f      	movs	r3, #15
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	701a      	strb	r2, [r3, #0]
		_LoRa->current_mode = RXSINGLE_MODE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2206      	movs	r2, #6
 80019f0:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 80019f2:	230f      	movs	r3, #15
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	781a      	ldrb	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2101      	movs	r1, #1
 80019fc:	0018      	movs	r0, r3
 80019fe:	f000 f99a 	bl	8001d36 <LoRa_write>
	//HAL_Delay(10);
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b004      	add	sp, #16
 8001a08:	bdb0      	pop	{r4, r5, r7, pc}

08001a0a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001a0a:	b590      	push	{r4, r7, lr}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	0019      	movs	r1, r3
 8001a26:	f002 ffd7 	bl	80049d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6998      	ldr	r0, [r3, #24]
 8001a2e:	23fa      	movs	r3, #250	; 0xfa
 8001a30:	00dc      	lsls	r4, r3, #3
 8001a32:	1dbb      	adds	r3, r7, #6
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	68b9      	ldr	r1, [r7, #8]
 8001a38:	0023      	movs	r3, r4
 8001a3a:	f004 f84d 	bl	8005ad8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f004 fcbd 	bl	80063c4 <HAL_SPI_GetState>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d1f7      	bne.n	8001a40 <LoRa_readReg+0x36>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6998      	ldr	r0, [r3, #24]
 8001a54:	23fa      	movs	r3, #250	; 0xfa
 8001a56:	00dc      	lsls	r4, r3, #3
 8001a58:	2320      	movs	r3, #32
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	881a      	ldrh	r2, [r3, #0]
 8001a5e:	6839      	ldr	r1, [r7, #0]
 8001a60:	0023      	movs	r3, r4
 8001a62:	f004 f991 	bl	8005d88 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001a66:	46c0      	nop			; (mov r8, r8)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f004 fca9 	bl	80063c4 <HAL_SPI_GetState>
 8001a72:	0003      	movs	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d1f7      	bne.n	8001a68 <LoRa_readReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	889b      	ldrh	r3, [r3, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	0019      	movs	r1, r3
 8001a84:	f002 ffa8 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8001a88:	46c0      	nop			; (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b005      	add	sp, #20
 8001a8e:	bd90      	pop	{r4, r7, pc}

08001a90 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	889b      	ldrh	r3, [r3, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0019      	movs	r1, r3
 8001aac:	f002 ff94 	bl	80049d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6998      	ldr	r0, [r3, #24]
 8001ab4:	23fa      	movs	r3, #250	; 0xfa
 8001ab6:	00dc      	lsls	r4, r3, #3
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	0023      	movs	r3, r4
 8001ac0:	f004 f80a 	bl	8005ad8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f004 fc7a 	bl	80063c4 <HAL_SPI_GetState>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d1f7      	bne.n	8001ac6 <LoRa_writeReg+0x36>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6998      	ldr	r0, [r3, #24]
 8001ada:	23fa      	movs	r3, #250	; 0xfa
 8001adc:	00dc      	lsls	r4, r3, #3
 8001ade:	2320      	movs	r3, #32
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	6839      	ldr	r1, [r7, #0]
 8001ae6:	0023      	movs	r3, r4
 8001ae8:	f003 fff6 	bl	8005ad8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f004 fc66 	bl	80063c4 <HAL_SPI_GetState>
 8001af8:	0003      	movs	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d1f7      	bne.n	8001aee <LoRa_writeReg+0x5e>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	889b      	ldrh	r3, [r3, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	0019      	movs	r1, r3
 8001b0a:	f002 ff65 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b005      	add	sp, #20
 8001b14:	bd90      	pop	{r4, r7, pc}

08001b16 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	04db      	lsls	r3, r3, #19
 8001b24:	115b      	asrs	r3, r3, #5
 8001b26:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	0c1a      	lsrs	r2, r3, #16
 8001b2c:	240b      	movs	r4, #11
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2106      	movs	r1, #6
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 f8fb 	bl	8001d36 <LoRa_write>
	HAL_Delay(5);
 8001b40:	2005      	movs	r0, #5
 8001b42:	f001 fd57 	bl	80035f4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0a1a      	lsrs	r2, r3, #8
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrMid, data);
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2107      	movs	r1, #7
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 f8ed 	bl	8001d36 <LoRa_write>
	HAL_Delay(5);
 8001b5c:	2005      	movs	r0, #5
 8001b5e:	f001 fd49 	bl	80035f4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	781a      	ldrb	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2108      	movs	r1, #8
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 f8e0 	bl	8001d36 <LoRa_write>
	HAL_Delay(5);
 8001b76:	2005      	movs	r0, #5
 8001b78:	f001 fd3c 	bl	80035f4 <HAL_Delay>
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b005      	add	sp, #20
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	dd01      	ble.n	8001b98 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001b94:	230c      	movs	r3, #12
 8001b96:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	dc01      	bgt.n	8001ba2 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001ba2:	250f      	movs	r5, #15
 8001ba4:	197c      	adds	r4, r7, r5
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	211e      	movs	r1, #30
 8001baa:	0018      	movs	r0, r3
 8001bac:	f000 f8a5 	bl	8001cfa <LoRa_read>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	7023      	strb	r3, [r4, #0]
	HAL_Delay(10);
 8001bb4:	200a      	movs	r0, #10
 8001bb6:	f001 fd1d 	bl	80035f4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	197b      	adds	r3, r7, r5
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	4013      	ands	r3, r2
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	200e      	movs	r0, #14
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	188a      	adds	r2, r1, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781a      	ldrb	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	211e      	movs	r1, #30
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f000 f8aa 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001be2:	200a      	movs	r0, #10
 8001be4:	f001 fd06 	bl	80035f4 <HAL_Delay>
}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bdb0      	pop	{r4, r5, r7, pc}

08001bf0 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	1cfb      	adds	r3, r7, #3
 8001bfc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001bfe:	1cfb      	adds	r3, r7, #3
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2109      	movs	r1, #9
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f895 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f001 fcf1 	bl	80035f4 <HAL_Delay>
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	000a      	movs	r2, r1
 8001c24:	1cfb      	adds	r3, r7, #3
 8001c26:	701a      	strb	r2, [r3, #0]
	uint8_t	OcpTrim = 0;
 8001c28:	230f      	movs	r3, #15
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	701a      	strb	r2, [r3, #0]

	if(current<45)
 8001c30:	1cfb      	adds	r3, r7, #3
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b2c      	cmp	r3, #44	; 0x2c
 8001c36:	d802      	bhi.n	8001c3e <LoRa_setOCP+0x24>
		current = 45;
 8001c38:	1cfb      	adds	r3, r7, #3
 8001c3a:	222d      	movs	r2, #45	; 0x2d
 8001c3c:	701a      	strb	r2, [r3, #0]
	if(current>240)
 8001c3e:	1cfb      	adds	r3, r7, #3
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2bf0      	cmp	r3, #240	; 0xf0
 8001c44:	d902      	bls.n	8001c4c <LoRa_setOCP+0x32>
		current = 240;
 8001c46:	1cfb      	adds	r3, r7, #3
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	701a      	strb	r2, [r3, #0]

	if(current <= 120)
 8001c4c:	1cfb      	adds	r3, r7, #3
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b78      	cmp	r3, #120	; 0x78
 8001c52:	d80c      	bhi.n	8001c6e <LoRa_setOCP+0x54>
		OcpTrim = (current - 45)/5;
 8001c54:	1cfb      	adds	r3, r7, #3
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3b2d      	subs	r3, #45	; 0x2d
 8001c5a:	2105      	movs	r1, #5
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7fe fadb 	bl	8000218 <__divsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	001a      	movs	r2, r3
 8001c66:	230f      	movs	r3, #15
 8001c68:	18fb      	adds	r3, r7, r3
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e00f      	b.n	8001c8e <LoRa_setOCP+0x74>
	else if(current <= 240)
 8001c6e:	1cfb      	adds	r3, r7, #3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2bf0      	cmp	r3, #240	; 0xf0
 8001c74:	d80b      	bhi.n	8001c8e <LoRa_setOCP+0x74>
		OcpTrim = (current + 30)/10;
 8001c76:	1cfb      	adds	r3, r7, #3
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	331e      	adds	r3, #30
 8001c7c:	210a      	movs	r1, #10
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7fe faca 	bl	8000218 <__divsi3>
 8001c84:	0003      	movs	r3, r0
 8001c86:	001a      	movs	r2, r3
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	701a      	strb	r2, [r3, #0]

	OcpTrim = OcpTrim + (1 << 5);
 8001c8e:	210f      	movs	r1, #15
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	187a      	adds	r2, r7, r1
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	3220      	adds	r2, #32
 8001c98:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	210b      	movs	r1, #11
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f000 f847 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001ca8:	200a      	movs	r0, #10
 8001caa:	f001 fca3 	bl	80035f4 <HAL_Delay>
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8001cb6:	b5b0      	push	{r4, r5, r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001cbe:	250f      	movs	r5, #15
 8001cc0:	197c      	adds	r4, r7, r5
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	211e      	movs	r1, #30
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f817 	bl	8001cfa <LoRa_read>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	7023      	strb	r3, [r4, #0]

	data = read | 0x07;
 8001cd0:	200e      	movs	r0, #14
 8001cd2:	183b      	adds	r3, r7, r0
 8001cd4:	197a      	adds	r2, r7, r5
 8001cd6:	7812      	ldrb	r2, [r2, #0]
 8001cd8:	2107      	movs	r1, #7
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8001cde:	183b      	adds	r3, r7, r0
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	211e      	movs	r1, #30
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f825 	bl	8001d36 <LoRa_write>
	HAL_Delay(10);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f001 fc81 	bl	80035f4 <HAL_Delay>
}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b004      	add	sp, #16
 8001cf8:	bdb0      	pop	{r4, r5, r7, pc}

08001cfa <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8001cfa:	b590      	push	{r4, r7, lr}
 8001cfc:	b087      	sub	sp, #28
 8001cfe:	af02      	add	r7, sp, #8
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	000a      	movs	r2, r1
 8001d04:	1cfb      	adds	r3, r7, #3
 8001d06:	701a      	strb	r2, [r3, #0]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001d08:	1cfb      	adds	r3, r7, #3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	227f      	movs	r2, #127	; 0x7f
 8001d0e:	4013      	ands	r3, r2
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	210e      	movs	r1, #14
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	701a      	strb	r2, [r3, #0]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001d18:	240f      	movs	r4, #15
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	1879      	adds	r1, r7, r1
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f7ff fe70 	bl	8001a0a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	781b      	ldrb	r3, [r3, #0]
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b005      	add	sp, #20
 8001d34:	bd90      	pop	{r4, r7, pc}

08001d36 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af02      	add	r7, sp, #8
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	0008      	movs	r0, r1
 8001d40:	0011      	movs	r1, r2
 8001d42:	1cfb      	adds	r3, r7, #3
 8001d44:	1c02      	adds	r2, r0, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	1c0a      	adds	r2, r1, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001d4e:	1cfb      	adds	r3, r7, #3
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	4252      	negs	r2, r2
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	210e      	movs	r1, #14
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
	data = value;
 8001d60:	200f      	movs	r0, #15
 8001d62:	183b      	adds	r3, r7, r0
 8001d64:	1cba      	adds	r2, r7, #2
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	701a      	strb	r2, [r3, #0]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	1879      	adds	r1, r7, r1
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	9200      	str	r2, [sp, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f7ff fe8b 	bl	8001a90 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b004      	add	sp, #16
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001d82:	b590      	push	{r4, r7, lr}
 8001d84:	b087      	sub	sp, #28
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	0008      	movs	r0, r1
 8001d8c:	607a      	str	r2, [r7, #4]
 8001d8e:	0019      	movs	r1, r3
 8001d90:	240b      	movs	r4, #11
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	1c02      	adds	r2, r0, #0
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	230a      	movs	r3, #10
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	1c0a      	adds	r2, r1, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	addr = address | 0x80;
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2280      	movs	r2, #128	; 0x80
 8001da6:	4252      	negs	r2, r2
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	2417      	movs	r4, #23
 8001dae:	193b      	adds	r3, r7, r4
 8001db0:	701a      	strb	r2, [r3, #0]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	889b      	ldrh	r3, [r3, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	f002 fe0b 	bl	80049d8 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6998      	ldr	r0, [r3, #24]
 8001dc6:	23fa      	movs	r3, #250	; 0xfa
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	1939      	adds	r1, r7, r4
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f003 fe83 	bl	8005ad8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f004 faf3 	bl	80063c4 <HAL_SPI_GetState>
 8001dde:	0003      	movs	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d1f7      	bne.n	8001dd4 <LoRa_BurstWrite+0x52>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6998      	ldr	r0, [r3, #24]
 8001de8:	230a      	movs	r3, #10
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	23fa      	movs	r3, #250	; 0xfa
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	f003 fe6f 	bl	8005ad8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f004 fadf 	bl	80063c4 <HAL_SPI_GetState>
 8001e06:	0003      	movs	r3, r0
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d1f7      	bne.n	8001dfc <LoRa_BurstWrite+0x7a>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	889b      	ldrh	r3, [r3, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	0019      	movs	r1, r3
 8001e18:	f002 fdde 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b007      	add	sp, #28
 8001e22:	bd90      	pop	{r4, r7, pc}

08001e24 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

	return 1;
 8001e2c:	2301      	movs	r3, #1
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b002      	add	sp, #8
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001e36:	b5b0      	push	{r4, r5, r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	0019      	movs	r1, r3
 8001e42:	1dfb      	adds	r3, r7, #7
 8001e44:	701a      	strb	r2, [r3, #0]
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	1c0a      	adds	r2, r1, #0
 8001e4a:	801a      	strh	r2, [r3, #0]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2101      	movs	r1, #1
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7ff fd5b 	bl	8001912 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001e5c:	2513      	movs	r5, #19
 8001e5e:	197c      	adds	r4, r7, r5
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	210e      	movs	r1, #14
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff ff48 	bl	8001cfa <LoRa_read>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001e6e:	197b      	adds	r3, r7, r5
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	210d      	movs	r1, #13
 8001e76:	0018      	movs	r0, r3
 8001e78:	f7ff ff5d 	bl	8001d36 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2122      	movs	r1, #34	; 0x22
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff ff56 	bl	8001d36 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8001e8a:	1dfb      	adds	r3, r7, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	68f8      	ldr	r0, [r7, #12]
 8001e92:	2100      	movs	r1, #0
 8001e94:	f7ff ff75 	bl	8001d82 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2103      	movs	r1, #3
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7ff fd38 	bl	8001912 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001ea2:	2513      	movs	r5, #19
 8001ea4:	197c      	adds	r4, r7, r5
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2112      	movs	r1, #18
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7ff ff25 	bl	8001cfa <LoRa_read>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	7023      	strb	r3, [r4, #0]
		if((read & 0x08)!=0){
 8001eb4:	197b      	adds	r3, r7, r5
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d00d      	beq.n	8001eda <LoRa_transmit+0xa4>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	22ff      	movs	r2, #255	; 0xff
 8001ec2:	2112      	movs	r1, #18
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff36 	bl	8001d36 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0011      	movs	r1, r2
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff fd1e 	bl	8001912 <LoRa_gotoMode>
			return 1;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e014      	b.n	8001f04 <LoRa_transmit+0xce>
		}
		else{
			if(--timeout==0){
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	1d3a      	adds	r2, r7, #4
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	3a01      	subs	r2, #1
 8001ee2:	801a      	strh	r2, [r3, #0]
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <LoRa_transmit+0xc6>
				LoRa_gotoMode(_LoRa, mode);
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f7ff fd0d 	bl	8001912 <LoRa_gotoMode>
				return 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e003      	b.n	8001f04 <LoRa_transmit+0xce>
			}
		}
		HAL_Delay(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f001 fb79 	bl	80035f4 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001f02:	e7ce      	b.n	8001ea2 <LoRa_transmit+0x6c>
	}

}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b006      	add	sp, #24
 8001f0a:	bdb0      	pop	{r4, r5, r7, pc}

08001f0c <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2105      	movs	r1, #5
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fcfa 	bl	8001912 <LoRa_gotoMode>
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f28:	b089      	sub	sp, #36	; 0x24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	1dfb      	adds	r3, r7, #7
 8001f32:	701a      	strb	r2, [r3, #0]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8001f34:	231f      	movs	r3, #31
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]

	for(int i=0; i<length; i++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	e007      	b.n	8001f52 <LoRa_receive+0x2c>
		data[i]=0;
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	1dfb      	adds	r3, r7, #7
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbf2      	blt.n	8001f42 <LoRa_receive+0x1c>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2101      	movs	r1, #1
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7ff fcd6 	bl	8001912 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8001f66:	2513      	movs	r5, #19
 8001f68:	197c      	adds	r4, r7, r5
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2112      	movs	r1, #18
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f7ff fec3 	bl	8001cfa <LoRa_read>
 8001f74:	0003      	movs	r3, r0
 8001f76:	7023      	strb	r3, [r4, #0]
	if((read & 0x40) != 0){
 8001f78:	197b      	adds	r3, r7, r5
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d03f      	beq.n	8002002 <LoRa_receive+0xdc>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	2112      	movs	r1, #18
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fed4 	bl	8001d36 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8001f8e:	2612      	movs	r6, #18
 8001f90:	19bc      	adds	r4, r7, r6
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2113      	movs	r1, #19
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff feaf 	bl	8001cfa <LoRa_read>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	7023      	strb	r3, [r4, #0]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8001fa0:	197c      	adds	r4, r7, r5
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2110      	movs	r1, #16
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fea7 	bl	8001cfa <LoRa_read>
 8001fac:	0003      	movs	r3, r0
 8001fae:	7023      	strb	r3, [r4, #0]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001fb0:	197b      	adds	r3, r7, r5
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	210d      	movs	r1, #13
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff febc 	bl	8001d36 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	18fa      	adds	r2, r7, r3
 8001fc2:	19bb      	adds	r3, r7, r6
 8001fc4:	1df9      	adds	r1, r7, #7
 8001fc6:	780c      	ldrb	r4, [r1, #0]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2d8      	uxtb	r0, r3
 8001fcc:	b2e1      	uxtb	r1, r4
 8001fce:	4288      	cmp	r0, r1
 8001fd0:	d900      	bls.n	8001fd4 <LoRa_receive+0xae>
 8001fd2:	1c23      	adds	r3, r4, #0
 8001fd4:	7013      	strb	r3, [r2, #0]
		for(int i=0; i<min; i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
 8001fda:	e00c      	b.n	8001ff6 <LoRa_receive+0xd0>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	18d4      	adds	r4, r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7ff fe87 	bl	8001cfa <LoRa_read>
 8001fec:	0003      	movs	r3, r0
 8001fee:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	231f      	movs	r3, #31
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dbec      	blt.n	8001fdc <LoRa_receive+0xb6>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2105      	movs	r1, #5
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff fc83 	bl	8001912 <LoRa_gotoMode>
    return min;
 800200c:	231f      	movs	r3, #31
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	781b      	ldrb	r3, [r3, #0]
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b009      	add	sp, #36	; 0x24
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800201a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fefd 	bl	8001e24 <LoRa_isvalid>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d100      	bne.n	8002030 <LoRa_init+0x16>
 800202e:	e0b3      	b.n	8002198 <LoRa_init+0x17e>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2100      	movs	r1, #0
 8002034:	0018      	movs	r0, r3
 8002036:	f7ff fc6c 	bl	8001912 <LoRa_gotoMode>
			HAL_Delay(10);
 800203a:	200a      	movs	r0, #10
 800203c:	f001 fada 	bl	80035f4 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8002040:	260f      	movs	r6, #15
 8002042:	19bc      	adds	r4, r7, r6
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2101      	movs	r1, #1
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff fe56 	bl	8001cfa <LoRa_read>
 800204e:	0003      	movs	r3, r0
 8002050:	7023      	strb	r3, [r4, #0]
			HAL_Delay(10);
 8002052:	200a      	movs	r0, #10
 8002054:	f001 face 	bl	80035f4 <HAL_Delay>
			data = read | 0x80;
 8002058:	250e      	movs	r5, #14
 800205a:	197b      	adds	r3, r7, r5
 800205c:	0034      	movs	r4, r6
 800205e:	193a      	adds	r2, r7, r4
 8002060:	7812      	ldrb	r2, [r2, #0]
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	4249      	negs	r1, r1
 8002066:	430a      	orrs	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegOpMode, data);
 800206a:	197b      	adds	r3, r7, r5
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2101      	movs	r1, #1
 8002072:	0018      	movs	r0, r3
 8002074:	f7ff fe5f 	bl	8001d36 <LoRa_write>
			HAL_Delay(100);
 8002078:	2064      	movs	r0, #100	; 0x64
 800207a:	f001 fabb 	bl	80035f4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	0011      	movs	r1, r2
 8002086:	0018      	movs	r0, r3
 8002088:	f7ff fd45 	bl	8001b16 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	222a      	movs	r2, #42	; 0x2a
 8002090:	5c9a      	ldrb	r2, [r3, r2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0011      	movs	r1, r2
 8002096:	0018      	movs	r0, r3
 8002098:	f7ff fdaa 	bl	8001bf0 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	222b      	movs	r2, #43	; 0x2b
 80020a0:	5c9a      	ldrb	r2, [r3, r2]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff fdb7 	bl	8001c1a <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2223      	movs	r2, #35	; 0x23
 80020b0:	210c      	movs	r1, #12
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7ff fe3f 	bl	8001d36 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff fdfb 	bl	8001cb6 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	5c9b      	ldrb	r3, [r3, r2]
 80020c6:	001a      	movs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	f7ff fd59 	bl	8001b84 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	211f      	movs	r1, #31
 80020d8:	0018      	movs	r0, r3
 80020da:	f7ff fe2c 	bl	8001d36 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80020de:	197b      	adds	r3, r7, r5
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2225      	movs	r2, #37	; 0x25
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	b2d9      	uxtb	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2226      	movs	r2, #38	; 0x26
 80020f2:	5c9b      	ldrb	r3, [r3, r2]
 80020f4:	18db      	adds	r3, r3, r3
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	197b      	adds	r3, r7, r5
 80020fa:	188a      	adds	r2, r1, r2
 80020fc:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegModemConfig1, data);
 80020fe:	197b      	adds	r3, r7, r5
 8002100:	781a      	ldrb	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	211d      	movs	r1, #29
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff fe15 	bl	8001d36 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	b29b      	uxth	r3, r3
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2120      	movs	r1, #32
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fe0b 	bl	8001d36 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	b2da      	uxtb	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2121      	movs	r1, #33	; 0x21
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff fe03 	bl	8001d36 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8002130:	0026      	movs	r6, r4
 8002132:	193c      	adds	r4, r7, r4
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	0018      	movs	r0, r3
 800213a:	f7ff fdde 	bl	8001cfa <LoRa_read>
 800213e:	0003      	movs	r3, r0
 8002140:	7023      	strb	r3, [r4, #0]
			data = read | 0x3F;
 8002142:	197b      	adds	r3, r7, r5
 8002144:	0034      	movs	r4, r6
 8002146:	193a      	adds	r2, r7, r4
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	213f      	movs	r1, #63	; 0x3f
 800214c:	430a      	orrs	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8002150:	197b      	adds	r3, r7, r5
 8002152:	781a      	ldrb	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	0018      	movs	r0, r3
 800215a:	f7ff fdec 	bl	8001d36 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2101      	movs	r1, #1
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff fbd5 	bl	8001912 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800216e:	200a      	movs	r0, #10
 8002170:	f001 fa40 	bl	80035f4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8002174:	0025      	movs	r5, r4
 8002176:	193c      	adds	r4, r7, r4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2142      	movs	r1, #66	; 0x42
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff fdbc 	bl	8001cfa <LoRa_read>
 8002182:	0003      	movs	r3, r0
 8002184:	7023      	strb	r3, [r4, #0]
			if(read == 0x12)
 8002186:	197b      	adds	r3, r7, r5
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b12      	cmp	r3, #18
 800218c:	d101      	bne.n	8002192 <LoRa_init+0x178>
				return LORA_OK;
 800218e:	23c8      	movs	r3, #200	; 0xc8
 8002190:	e004      	b.n	800219c <LoRa_init+0x182>
			else
				return LORA_NOT_FOUND;
 8002192:	23ca      	movs	r3, #202	; 0xca
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	e001      	b.n	800219c <LoRa_init+0x182>
	}
	else {
		return LORA_UNAVAILABLE;
 8002198:	23f8      	movs	r3, #248	; 0xf8
 800219a:	33ff      	adds	r3, #255	; 0xff
	}
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b005      	add	sp, #20
 80021a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

	flagui = 1;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x18>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	20000030 	.word	0x20000030

080021c0 <PWM_Set_DC>:

void PWM_Set_DC(TIM_HandleTypeDef *timer, uint32_t channel, uint8_t dc){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	1dfb      	adds	r3, r7, #7
 80021cc:	701a      	strb	r2, [r3, #0]
	uint32_t arr, ccrx;

	arr = __HAL_TIM_GET_AUTORELOAD(timer);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	617b      	str	r3, [r7, #20]
	if (dc <= 100){
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d835      	bhi.n	800224a <PWM_Set_DC+0x8a>
		ccrx = arr*dc/100;
 80021de:	1dfb      	adds	r3, r7, #7
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4353      	muls	r3, r2
 80021e6:	2164      	movs	r1, #100	; 0x64
 80021e8:	0018      	movs	r0, r3
 80021ea:	f7fd ff8b 	bl	8000104 <__udivsi3>
 80021ee:	0003      	movs	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]

		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d104      	bne.n	8002202 <PWM_Set_DC+0x42>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002200:	e023      	b.n	800224a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b04      	cmp	r3, #4
 8002206:	d104      	bne.n	8002212 <PWM_Set_DC+0x52>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002210:	e01b      	b.n	800224a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d104      	bne.n	8002222 <PWM_Set_DC+0x62>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002220:	e013      	b.n	800224a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d104      	bne.n	8002232 <PWM_Set_DC+0x72>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002230:	e00b      	b.n	800224a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b10      	cmp	r3, #16
 8002236:	d104      	bne.n	8002242 <PWM_Set_DC+0x82>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002240:	e003      	b.n	800224a <PWM_Set_DC+0x8a>
		__HAL_TIM_SET_COMPARE(timer, channel, ccrx);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b006      	add	sp, #24
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <calcTensao>:



float calcTensao(uint16_t num){
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	0002      	movs	r2, r0
 800225c:	1dbb      	adds	r3, r7, #6
 800225e:	801a      	strh	r2, [r3, #0]
	float temp = (3.3 * (num / 4095.0));
 8002260:	1dbb      	adds	r3, r7, #6
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	0018      	movs	r0, r3
 8002266:	f7ff f931 	bl	80014cc <__aeabi_i2d>
 800226a:	2200      	movs	r2, #0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <calcTensao+0x48>)
 800226e:	f7fe fbd9 	bl	8000a24 <__aeabi_ddiv>
 8002272:	0002      	movs	r2, r0
 8002274:	000b      	movs	r3, r1
 8002276:	0010      	movs	r0, r2
 8002278:	0019      	movs	r1, r3
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <calcTensao+0x4c>)
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <calcTensao+0x50>)
 800227e:	f7fe feb9 	bl	8000ff4 <__aeabi_dmul>
 8002282:	0002      	movs	r2, r0
 8002284:	000b      	movs	r3, r1
 8002286:	0010      	movs	r0, r2
 8002288:	0019      	movs	r1, r3
 800228a:	f7ff f975 	bl	8001578 <__aeabi_d2f>
 800228e:	1c03      	adds	r3, r0, #0
 8002290:	60fb      	str	r3, [r7, #12]
	return temp;
 8002292:	68fb      	ldr	r3, [r7, #12]
}
 8002294:	1c18      	adds	r0, r3, #0
 8002296:	46bd      	mov	sp, r7
 8002298:	b004      	add	sp, #16
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40affe00 	.word	0x40affe00
 80022a0:	66666666 	.word	0x66666666
 80022a4:	400a6666 	.word	0x400a6666

080022a8 <converter_dados>:

void converter_dados(uint32_t num){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

	if(flag == 1){
 80022b0:	4bc6      	ldr	r3, [pc, #792]	; (80025cc <converter_dados+0x324>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d000      	beq.n	80022ba <converter_dados+0x12>
 80022b8:	e39a      	b.n	80029f0 <converter_dados+0x748>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d900      	bls.n	80022c2 <converter_dados+0x1a>
 80022c0:	e399      	b.n	80029f6 <converter_dados+0x74e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	4bc2      	ldr	r3, [pc, #776]	; (80025d0 <converter_dados+0x328>)
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	469f      	mov	pc, r3

		switch(num){

			case 1:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	48c0      	ldr	r0, [pc, #768]	; (80025d4 <converter_dados+0x32c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	0019      	movs	r1, r3
 80022d8:	f002 fb7e 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	48bd      	ldr	r0, [pc, #756]	; (80025d8 <converter_dados+0x330>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	0019      	movs	r1, r3
 80022e6:	f002 fb77 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80022ea:	200a      	movs	r0, #10
 80022ec:	f001 f982 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	48b8      	ldr	r0, [pc, #736]	; (80025d8 <converter_dados+0x330>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	0019      	movs	r1, r3
 80022fa:	f002 fb6d 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	015b      	lsls	r3, r3, #5
 8002302:	48b5      	ldr	r0, [pc, #724]	; (80025d8 <converter_dados+0x330>)
 8002304:	2201      	movs	r2, #1
 8002306:	0019      	movs	r1, r3
 8002308:	f002 fb66 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(2000);
 800230c:	23fa      	movs	r3, #250	; 0xfa
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	0018      	movs	r0, r3
 8002312:	f001 f96f 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	48af      	ldr	r0, [pc, #700]	; (80025d8 <converter_dados+0x330>)
 800231c:	2200      	movs	r2, #0
 800231e:	0019      	movs	r1, r3
 8002320:	f002 fb5a 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	015b      	lsls	r3, r3, #5
 8002328:	48ab      	ldr	r0, [pc, #684]	; (80025d8 <converter_dados+0x330>)
 800232a:	2200      	movs	r2, #0
 800232c:	0019      	movs	r1, r3
 800232e:	f002 fb53 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 8002332:	4baa      	ldr	r3, [pc, #680]	; (80025dc <converter_dados+0x334>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
				break;
 8002338:	e35d      	b.n	80029f6 <converter_dados+0x74e>

			case 2:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	48a5      	ldr	r0, [pc, #660]	; (80025d4 <converter_dados+0x32c>)
 8002340:	2201      	movs	r2, #1
 8002342:	0019      	movs	r1, r3
 8002344:	f002 fb48 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	48a2      	ldr	r0, [pc, #648]	; (80025d8 <converter_dados+0x330>)
 800234e:	2201      	movs	r2, #1
 8002350:	0019      	movs	r1, r3
 8002352:	f002 fb41 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002356:	200a      	movs	r0, #10
 8002358:	f001 f94c 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	489d      	ldr	r0, [pc, #628]	; (80025d8 <converter_dados+0x330>)
 8002362:	2200      	movs	r2, #0
 8002364:	0019      	movs	r1, r3
 8002366:	f002 fb37 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	015b      	lsls	r3, r3, #5
 800236e:	489a      	ldr	r0, [pc, #616]	; (80025d8 <converter_dados+0x330>)
 8002370:	2200      	movs	r2, #0
 8002372:	0019      	movs	r1, r3
 8002374:	f002 fb30 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(2000);
 8002378:	23fa      	movs	r3, #250	; 0xfa
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	0018      	movs	r0, r3
 800237e:	f001 f939 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4893      	ldr	r0, [pc, #588]	; (80025d4 <converter_dados+0x32c>)
 8002388:	2200      	movs	r2, #0
 800238a:	0019      	movs	r1, r3
 800238c:	f002 fb24 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4890      	ldr	r0, [pc, #576]	; (80025d8 <converter_dados+0x330>)
 8002396:	2200      	movs	r2, #0
 8002398:	0019      	movs	r1, r3
 800239a:	f002 fb1d 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 800239e:	4b8f      	ldr	r3, [pc, #572]	; (80025dc <converter_dados+0x334>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
				break;
 80023a4:	e327      	b.n	80029f6 <converter_dados+0x74e>

			case 3:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	488a      	ldr	r0, [pc, #552]	; (80025d4 <converter_dados+0x32c>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	0019      	movs	r1, r3
 80023b0:	f002 fb12 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4887      	ldr	r0, [pc, #540]	; (80025d8 <converter_dados+0x330>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	0019      	movs	r1, r3
 80023be:	f002 fb0b 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80023c2:	200a      	movs	r0, #10
 80023c4:	f001 f916 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	4882      	ldr	r0, [pc, #520]	; (80025d8 <converter_dados+0x330>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	0019      	movs	r1, r3
 80023d2:	f002 fb01 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	015b      	lsls	r3, r3, #5
 80023da:	487f      	ldr	r0, [pc, #508]	; (80025d8 <converter_dados+0x330>)
 80023dc:	2200      	movs	r2, #0
 80023de:	0019      	movs	r1, r3
 80023e0:	f002 fafa 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(5000);
 80023e4:	4b7e      	ldr	r3, [pc, #504]	; (80025e0 <converter_dados+0x338>)
 80023e6:	0018      	movs	r0, r3
 80023e8:	f001 f904 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4878      	ldr	r0, [pc, #480]	; (80025d4 <converter_dados+0x32c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	0019      	movs	r1, r3
 80023f6:	f002 faef 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	4876      	ldr	r0, [pc, #472]	; (80025d8 <converter_dados+0x330>)
 8002400:	2200      	movs	r2, #0
 8002402:	0019      	movs	r1, r3
 8002404:	f002 fae8 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 8002408:	4b74      	ldr	r3, [pc, #464]	; (80025dc <converter_dados+0x334>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
				break;
 800240e:	e2f2      	b.n	80029f6 <converter_dados+0x74e>

			case 4:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	486f      	ldr	r0, [pc, #444]	; (80025d4 <converter_dados+0x32c>)
 8002416:	2200      	movs	r2, #0
 8002418:	0019      	movs	r1, r3
 800241a:	f002 fadd 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	486d      	ldr	r0, [pc, #436]	; (80025d8 <converter_dados+0x330>)
 8002424:	2200      	movs	r2, #0
 8002426:	0019      	movs	r1, r3
 8002428:	f002 fad6 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 800242c:	200a      	movs	r0, #10
 800242e:	f001 f8e1 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4868      	ldr	r0, [pc, #416]	; (80025d8 <converter_dados+0x330>)
 8002438:	2201      	movs	r2, #1
 800243a:	0019      	movs	r1, r3
 800243c:	f002 facc 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	015b      	lsls	r3, r3, #5
 8002444:	4864      	ldr	r0, [pc, #400]	; (80025d8 <converter_dados+0x330>)
 8002446:	2201      	movs	r2, #1
 8002448:	0019      	movs	r1, r3
 800244a:	f002 fac5 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(5000);
 800244e:	4b64      	ldr	r3, [pc, #400]	; (80025e0 <converter_dados+0x338>)
 8002450:	0018      	movs	r0, r3
 8002452:	f001 f8cf 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	485f      	ldr	r0, [pc, #380]	; (80025d8 <converter_dados+0x330>)
 800245c:	2200      	movs	r2, #0
 800245e:	0019      	movs	r1, r3
 8002460:	f002 faba 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	485b      	ldr	r0, [pc, #364]	; (80025d8 <converter_dados+0x330>)
 800246a:	2200      	movs	r2, #0
 800246c:	0019      	movs	r1, r3
 800246e:	f002 fab3 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 8002472:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <converter_dados+0x334>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
				break;
 8002478:	e2bd      	b.n	80029f6 <converter_dados+0x74e>

			case 5:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4855      	ldr	r0, [pc, #340]	; (80025d4 <converter_dados+0x32c>)
 8002480:	2200      	movs	r2, #0
 8002482:	0019      	movs	r1, r3
 8002484:	f002 faa8 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4852      	ldr	r0, [pc, #328]	; (80025d8 <converter_dados+0x330>)
 800248e:	2200      	movs	r2, #0
 8002490:	0019      	movs	r1, r3
 8002492:	f002 faa1 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002496:	200a      	movs	r0, #10
 8002498:	f001 f8ac 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	484d      	ldr	r0, [pc, #308]	; (80025d8 <converter_dados+0x330>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	0019      	movs	r1, r3
 80024a6:	f002 fa97 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	015b      	lsls	r3, r3, #5
 80024ae:	484a      	ldr	r0, [pc, #296]	; (80025d8 <converter_dados+0x330>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	0019      	movs	r1, r3
 80024b4:	f002 fa90 	bl	80049d8 <HAL_GPIO_WritePin>

				break;
 80024b8:	e29d      	b.n	80029f6 <converter_dados+0x74e>

			case 6:
				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4846      	ldr	r0, [pc, #280]	; (80025d8 <converter_dados+0x330>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	0019      	movs	r1, r3
 80024c4:	f002 fa88 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	4842      	ldr	r0, [pc, #264]	; (80025d8 <converter_dados+0x330>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	0019      	movs	r1, r3
 80024d2:	f002 fa81 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80024d6:	200a      	movs	r0, #10
 80024d8:	f001 f88c 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	483c      	ldr	r0, [pc, #240]	; (80025d4 <converter_dados+0x32c>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	0019      	movs	r1, r3
 80024e6:	f002 fa77 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	483a      	ldr	r0, [pc, #232]	; (80025d8 <converter_dados+0x330>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	0019      	movs	r1, r3
 80024f4:	f002 fa70 	bl	80049d8 <HAL_GPIO_WritePin>
				break;
 80024f8:	e27d      	b.n	80029f6 <converter_dados+0x74e>

			case 7:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4835      	ldr	r0, [pc, #212]	; (80025d4 <converter_dados+0x32c>)
 8002500:	2200      	movs	r2, #0
 8002502:	0019      	movs	r1, r3
 8002504:	f002 fa68 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	4832      	ldr	r0, [pc, #200]	; (80025d8 <converter_dados+0x330>)
 800250e:	2200      	movs	r2, #0
 8002510:	0019      	movs	r1, r3
 8002512:	f002 fa61 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002516:	200a      	movs	r0, #10
 8002518:	f001 f86c 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	482d      	ldr	r0, [pc, #180]	; (80025d8 <converter_dados+0x330>)
 8002522:	2201      	movs	r2, #1
 8002524:	0019      	movs	r1, r3
 8002526:	f002 fa57 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	482a      	ldr	r0, [pc, #168]	; (80025d8 <converter_dados+0x330>)
 8002530:	2201      	movs	r2, #1
 8002532:	0019      	movs	r1, r3
 8002534:	f002 fa50 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(300);
 8002538:	2396      	movs	r3, #150	; 0x96
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	0018      	movs	r0, r3
 800253e:	f001 f859 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4824      	ldr	r0, [pc, #144]	; (80025d8 <converter_dados+0x330>)
 8002548:	2200      	movs	r2, #0
 800254a:	0019      	movs	r1, r3
 800254c:	f002 fa44 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	4820      	ldr	r0, [pc, #128]	; (80025d8 <converter_dados+0x330>)
 8002556:	2200      	movs	r2, #0
 8002558:	0019      	movs	r1, r3
 800255a:	f002 fa3d 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	481c      	ldr	r0, [pc, #112]	; (80025d4 <converter_dados+0x32c>)
 8002564:	2201      	movs	r2, #1
 8002566:	0019      	movs	r1, r3
 8002568:	f002 fa36 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	4819      	ldr	r0, [pc, #100]	; (80025d8 <converter_dados+0x330>)
 8002572:	2201      	movs	r2, #1
 8002574:	0019      	movs	r1, r3
 8002576:	f002 fa2f 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 800257a:	200a      	movs	r0, #10
 800257c:	f001 f83a 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4814      	ldr	r0, [pc, #80]	; (80025d8 <converter_dados+0x330>)
 8002586:	2200      	movs	r2, #0
 8002588:	0019      	movs	r1, r3
 800258a:	f002 fa25 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	015b      	lsls	r3, r3, #5
 8002592:	4811      	ldr	r0, [pc, #68]	; (80025d8 <converter_dados+0x330>)
 8002594:	2200      	movs	r2, #0
 8002596:	0019      	movs	r1, r3
 8002598:	f002 fa1e 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(300);
 800259c:	2396      	movs	r3, #150	; 0x96
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	0018      	movs	r0, r3
 80025a2:	f001 f827 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	480a      	ldr	r0, [pc, #40]	; (80025d4 <converter_dados+0x32c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	0019      	movs	r1, r3
 80025b0:	f002 fa12 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	4807      	ldr	r0, [pc, #28]	; (80025d8 <converter_dados+0x330>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	0019      	movs	r1, r3
 80025be:	f002 fa0b 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <converter_dados+0x334>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]



				break;
 80025c8:	e215      	b.n	80029f6 <converter_dados+0x74e>
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	2000002f 	.word	0x2000002f
 80025d0:	08007c28 	.word	0x08007c28
 80025d4:	50000400 	.word	0x50000400
 80025d8:	50000800 	.word	0x50000800
 80025dc:	2000028c 	.word	0x2000028c
 80025e0:	00001388 	.word	0x00001388

			case 8:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	48f3      	ldr	r0, [pc, #972]	; (80029b8 <converter_dados+0x710>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	0019      	movs	r1, r3
 80025ee:	f002 f9f3 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	48f1      	ldr	r0, [pc, #964]	; (80029bc <converter_dados+0x714>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	0019      	movs	r1, r3
 80025fc:	f002 f9ec 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002600:	200a      	movs	r0, #10
 8002602:	f000 fff7 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	48ec      	ldr	r0, [pc, #944]	; (80029bc <converter_dados+0x714>)
 800260c:	2201      	movs	r2, #1
 800260e:	0019      	movs	r1, r3
 8002610:	f002 f9e2 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	015b      	lsls	r3, r3, #5
 8002618:	48e8      	ldr	r0, [pc, #928]	; (80029bc <converter_dados+0x714>)
 800261a:	2201      	movs	r2, #1
 800261c:	0019      	movs	r1, r3
 800261e:	f002 f9db 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(600);
 8002622:	2396      	movs	r3, #150	; 0x96
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	0018      	movs	r0, r3
 8002628:	f000 ffe4 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	48e2      	ldr	r0, [pc, #904]	; (80029bc <converter_dados+0x714>)
 8002632:	2200      	movs	r2, #0
 8002634:	0019      	movs	r1, r3
 8002636:	f002 f9cf 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	015b      	lsls	r3, r3, #5
 800263e:	48df      	ldr	r0, [pc, #892]	; (80029bc <converter_dados+0x714>)
 8002640:	2200      	movs	r2, #0
 8002642:	0019      	movs	r1, r3
 8002644:	f002 f9c8 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	48da      	ldr	r0, [pc, #872]	; (80029b8 <converter_dados+0x710>)
 800264e:	2201      	movs	r2, #1
 8002650:	0019      	movs	r1, r3
 8002652:	f002 f9c1 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	48d8      	ldr	r0, [pc, #864]	; (80029bc <converter_dados+0x714>)
 800265c:	2201      	movs	r2, #1
 800265e:	0019      	movs	r1, r3
 8002660:	f002 f9ba 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002664:	200a      	movs	r0, #10
 8002666:	f000 ffc5 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	48d3      	ldr	r0, [pc, #844]	; (80029bc <converter_dados+0x714>)
 8002670:	2200      	movs	r2, #0
 8002672:	0019      	movs	r1, r3
 8002674:	f002 f9b0 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	015b      	lsls	r3, r3, #5
 800267c:	48cf      	ldr	r0, [pc, #828]	; (80029bc <converter_dados+0x714>)
 800267e:	2200      	movs	r2, #0
 8002680:	0019      	movs	r1, r3
 8002682:	f002 f9a9 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(600);
 8002686:	2396      	movs	r3, #150	; 0x96
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	0018      	movs	r0, r3
 800268c:	f000 ffb2 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	48c8      	ldr	r0, [pc, #800]	; (80029b8 <converter_dados+0x710>)
 8002696:	2200      	movs	r2, #0
 8002698:	0019      	movs	r1, r3
 800269a:	f002 f99d 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	48c6      	ldr	r0, [pc, #792]	; (80029bc <converter_dados+0x714>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	0019      	movs	r1, r3
 80026a8:	f002 f996 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 80026ac:	4bc4      	ldr	r3, [pc, #784]	; (80029c0 <converter_dados+0x718>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

				break;
 80026b2:	e1a0      	b.n	80029f6 <converter_dados+0x74e>

			case 9:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	48bf      	ldr	r0, [pc, #764]	; (80029b8 <converter_dados+0x710>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	0019      	movs	r1, r3
 80026be:	f002 f98b 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	48bd      	ldr	r0, [pc, #756]	; (80029bc <converter_dados+0x714>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	0019      	movs	r1, r3
 80026cc:	f002 f984 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80026d0:	200a      	movs	r0, #10
 80026d2:	f000 ff8f 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	48b8      	ldr	r0, [pc, #736]	; (80029bc <converter_dados+0x714>)
 80026dc:	2201      	movs	r2, #1
 80026de:	0019      	movs	r1, r3
 80026e0:	f002 f97a 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	48b4      	ldr	r0, [pc, #720]	; (80029bc <converter_dados+0x714>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	0019      	movs	r1, r3
 80026ee:	f002 f973 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(100);
 80026f2:	2064      	movs	r0, #100	; 0x64
 80026f4:	f000 ff7e 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	48af      	ldr	r0, [pc, #700]	; (80029bc <converter_dados+0x714>)
 80026fe:	2200      	movs	r2, #0
 8002700:	0019      	movs	r1, r3
 8002702:	f002 f969 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	48ac      	ldr	r0, [pc, #688]	; (80029bc <converter_dados+0x714>)
 800270c:	2200      	movs	r2, #0
 800270e:	0019      	movs	r1, r3
 8002710:	f002 f962 	bl	80049d8 <HAL_GPIO_WritePin>

				break;
 8002714:	e16f      	b.n	80029f6 <converter_dados+0x74e>

			case 10:
				if(flag == 1 && cont > 1){
 8002716:	4bab      	ldr	r3, [pc, #684]	; (80029c4 <converter_dados+0x71c>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d000      	beq.n	8002720 <converter_dados+0x478>
 800271e:	e169      	b.n	80029f4 <converter_dados+0x74c>
 8002720:	4ba9      	ldr	r3, [pc, #676]	; (80029c8 <converter_dados+0x720>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d800      	bhi.n	800272a <converter_dados+0x482>
 8002728:	e164      	b.n	80029f4 <converter_dados+0x74c>
					flag = 0;
 800272a:	4ba6      	ldr	r3, [pc, #664]	; (80029c4 <converter_dados+0x71c>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
					cont = 0;
 8002730:	4ba5      	ldr	r3, [pc, #660]	; (80029c8 <converter_dados+0x720>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	48a0      	ldr	r0, [pc, #640]	; (80029bc <converter_dados+0x714>)
 800273c:	2200      	movs	r2, #0
 800273e:	0019      	movs	r1, r3
 8002740:	f002 f94a 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	015b      	lsls	r3, r3, #5
 8002748:	489c      	ldr	r0, [pc, #624]	; (80029bc <converter_dados+0x714>)
 800274a:	2200      	movs	r2, #0
 800274c:	0019      	movs	r1, r3
 800274e:	f002 f943 	bl	80049d8 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4898      	ldr	r0, [pc, #608]	; (80029b8 <converter_dados+0x710>)
 8002758:	2200      	movs	r2, #0
 800275a:	0019      	movs	r1, r3
 800275c:	f002 f93c 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4895      	ldr	r0, [pc, #596]	; (80029bc <converter_dados+0x714>)
 8002766:	2200      	movs	r2, #0
 8002768:	0019      	movs	r1, r3
 800276a:	f002 f935 	bl	80049d8 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 0);
 800276e:	4b93      	ldr	r3, [pc, #588]	; (80029bc <converter_dados+0x714>)
 8002770:	2200      	movs	r2, #0
 8002772:	2120      	movs	r1, #32
 8002774:	0018      	movs	r0, r3
 8002776:	f002 f92f 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 1);
 800277a:	4b90      	ldr	r3, [pc, #576]	; (80029bc <converter_dados+0x714>)
 800277c:	2201      	movs	r2, #1
 800277e:	2110      	movs	r1, #16
 8002780:	0018      	movs	r0, r3
 8002782:	f002 f929 	bl	80049d8 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8002786:	4b8d      	ldr	r3, [pc, #564]	; (80029bc <converter_dados+0x714>)
 8002788:	2201      	movs	r2, #1
 800278a:	2108      	movs	r1, #8
 800278c:	0018      	movs	r0, r3
 800278e:	f002 f923 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_Delay(100);
 8002792:	2064      	movs	r0, #100	; 0x64
 8002794:	f000 ff2e 	bl	80035f4 <HAL_Delay>
					HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8002798:	4b88      	ldr	r3, [pc, #544]	; (80029bc <converter_dados+0x714>)
 800279a:	2200      	movs	r2, #0
 800279c:	2108      	movs	r1, #8
 800279e:	0018      	movs	r0, r3
 80027a0:	f002 f91a 	bl	80049d8 <HAL_GPIO_WritePin>
				}
				break;
 80027a4:	e126      	b.n	80029f4 <converter_dados+0x74c>

			 case 11:
				contador2++;
 80027a6:	4b89      	ldr	r3, [pc, #548]	; (80029cc <converter_dados+0x724>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4b87      	ldr	r3, [pc, #540]	; (80029cc <converter_dados+0x724>)
 80027b0:	701a      	strb	r2, [r3, #0]
				HAL_Delay(10);
 80027b2:	200a      	movs	r0, #10
 80027b4:	f000 ff1e 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	487e      	ldr	r0, [pc, #504]	; (80029b8 <converter_dados+0x710>)
 80027be:	2201      	movs	r2, #1
 80027c0:	0019      	movs	r1, r3
 80027c2:	f002 f909 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	487c      	ldr	r0, [pc, #496]	; (80029bc <converter_dados+0x714>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	0019      	movs	r1, r3
 80027d0:	f002 f902 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80027d4:	200a      	movs	r0, #10
 80027d6:	f000 ff0d 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4877      	ldr	r0, [pc, #476]	; (80029bc <converter_dados+0x714>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	0019      	movs	r1, r3
 80027e4:	f002 f8f8 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	015b      	lsls	r3, r3, #5
 80027ec:	4873      	ldr	r0, [pc, #460]	; (80029bc <converter_dados+0x714>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	0019      	movs	r1, r3
 80027f2:	f002 f8f1 	bl	80049d8 <HAL_GPIO_WritePin>

				if(contador2 > 1){
 80027f6:	4b75      	ldr	r3, [pc, #468]	; (80029cc <converter_dados+0x724>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d910      	bls.n	8002820 <converter_dados+0x578>
					HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	486d      	ldr	r0, [pc, #436]	; (80029b8 <converter_dados+0x710>)
 8002804:	2200      	movs	r2, #0
 8002806:	0019      	movs	r1, r3
 8002808:	f002 f8e6 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	486a      	ldr	r0, [pc, #424]	; (80029bc <converter_dados+0x714>)
 8002812:	2200      	movs	r2, #0
 8002814:	0019      	movs	r1, r3
 8002816:	f002 f8df 	bl	80049d8 <HAL_GPIO_WritePin>

					contador2 = 0;
 800281a:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <converter_dados+0x724>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
				}

				lora_data = 0;
 8002820:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <converter_dados+0x718>)
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
				break;
 8002826:	e0e6      	b.n	80029f6 <converter_dados+0x74e>

			 case 12:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4862      	ldr	r0, [pc, #392]	; (80029b8 <converter_dados+0x710>)
 800282e:	2200      	movs	r2, #0
 8002830:	0019      	movs	r1, r3
 8002832:	f002 f8d1 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4860      	ldr	r0, [pc, #384]	; (80029bc <converter_dados+0x714>)
 800283c:	2200      	movs	r2, #0
 800283e:	0019      	movs	r1, r3
 8002840:	f002 f8ca 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 8002844:	200a      	movs	r0, #10
 8002846:	f000 fed5 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	485b      	ldr	r0, [pc, #364]	; (80029bc <converter_dados+0x714>)
 8002850:	2201      	movs	r2, #1
 8002852:	0019      	movs	r1, r3
 8002854:	f002 f8c0 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	015b      	lsls	r3, r3, #5
 800285c:	4857      	ldr	r0, [pc, #348]	; (80029bc <converter_dados+0x714>)
 800285e:	2201      	movs	r2, #1
 8002860:	0019      	movs	r1, r3
 8002862:	f002 f8b9 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(300);
 8002866:	2396      	movs	r3, #150	; 0x96
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	0018      	movs	r0, r3
 800286c:	f000 fec2 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4851      	ldr	r0, [pc, #324]	; (80029bc <converter_dados+0x714>)
 8002876:	2200      	movs	r2, #0
 8002878:	0019      	movs	r1, r3
 800287a:	f002 f8ad 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	484e      	ldr	r0, [pc, #312]	; (80029bc <converter_dados+0x714>)
 8002884:	2200      	movs	r2, #0
 8002886:	0019      	movs	r1, r3
 8002888:	f002 f8a6 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 800288c:	4b4c      	ldr	r3, [pc, #304]	; (80029c0 <converter_dados+0x718>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
				break;
 8002892:	e0b0      	b.n	80029f6 <converter_dados+0x74e>

			 case 13:
				contador++;
 8002894:	4b4e      	ldr	r3, [pc, #312]	; (80029d0 <converter_dados+0x728>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	3301      	adds	r3, #1
 800289a:	b2da      	uxtb	r2, r3
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <converter_dados+0x728>)
 800289e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4844      	ldr	r0, [pc, #272]	; (80029b8 <converter_dados+0x710>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	0019      	movs	r1, r3
 80028aa:	f002 f895 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4842      	ldr	r0, [pc, #264]	; (80029bc <converter_dados+0x714>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	0019      	movs	r1, r3
 80028b8:	f002 f88e 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 80028bc:	200a      	movs	r0, #10
 80028be:	f000 fe99 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 1);
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	483d      	ldr	r0, [pc, #244]	; (80029bc <converter_dados+0x714>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	0019      	movs	r1, r3
 80028cc:	f002 f884 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 1);
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	015b      	lsls	r3, r3, #5
 80028d4:	4839      	ldr	r0, [pc, #228]	; (80029bc <converter_dados+0x714>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	0019      	movs	r1, r3
 80028da:	f002 f87d 	bl	80049d8 <HAL_GPIO_WritePin>

				if(contador > 1){
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <converter_dados+0x728>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d910      	bls.n	8002908 <converter_dados+0x660>
					 HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4834      	ldr	r0, [pc, #208]	; (80029bc <converter_dados+0x714>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	0019      	movs	r1, r3
 80028f0:	f002 f872 	bl	80049d8 <HAL_GPIO_WritePin>
					 HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	015b      	lsls	r3, r3, #5
 80028f8:	4830      	ldr	r0, [pc, #192]	; (80029bc <converter_dados+0x714>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	0019      	movs	r1, r3
 80028fe:	f002 f86b 	bl	80049d8 <HAL_GPIO_WritePin>

					 contador = 0;
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <converter_dados+0x728>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
				}

				lora_data = 0;
 8002908:	4b2d      	ldr	r3, [pc, #180]	; (80029c0 <converter_dados+0x718>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]
				break;
 800290e:	e072      	b.n	80029f6 <converter_dados+0x74e>

			 case 14:
				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 1);
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4828      	ldr	r0, [pc, #160]	; (80029b8 <converter_dados+0x710>)
 8002916:	2201      	movs	r2, #1
 8002918:	0019      	movs	r1, r3
 800291a:	f002 f85d 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 1);
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4826      	ldr	r0, [pc, #152]	; (80029bc <converter_dados+0x714>)
 8002924:	2201      	movs	r2, #1
 8002926:	0019      	movs	r1, r3
 8002928:	f002 f856 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(10);
 800292c:	200a      	movs	r0, #10
 800292e:	f000 fe61 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4821      	ldr	r0, [pc, #132]	; (80029bc <converter_dados+0x714>)
 8002938:	2200      	movs	r2, #0
 800293a:	0019      	movs	r1, r3
 800293c:	f002 f84c 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	015b      	lsls	r3, r3, #5
 8002944:	481d      	ldr	r0, [pc, #116]	; (80029bc <converter_dados+0x714>)
 8002946:	2200      	movs	r2, #0
 8002948:	0019      	movs	r1, r3
 800294a:	f002 f845 	bl	80049d8 <HAL_GPIO_WritePin>

				HAL_Delay(300);
 800294e:	2396      	movs	r3, #150	; 0x96
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fe4e 	bl	80035f4 <HAL_Delay>

				HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4816      	ldr	r0, [pc, #88]	; (80029b8 <converter_dados+0x710>)
 800295e:	2200      	movs	r2, #0
 8002960:	0019      	movs	r1, r3
 8002962:	f002 f839 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	4814      	ldr	r0, [pc, #80]	; (80029bc <converter_dados+0x714>)
 800296c:	2200      	movs	r2, #0
 800296e:	0019      	movs	r1, r3
 8002970:	f002 f832 	bl	80049d8 <HAL_GPIO_WritePin>

				lora_data = 0;
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <converter_dados+0x718>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
				break;
 800297a:	e03c      	b.n	80029f6 <converter_dados+0x74e>

			 case 15:
					HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, 0);
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <converter_dados+0x710>)
 8002982:	2200      	movs	r2, #0
 8002984:	0019      	movs	r1, r3
 8002986:	f002 f827 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEI_GPIO_Port, LEI_Pin, 0);
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	480b      	ldr	r0, [pc, #44]	; (80029bc <converter_dados+0x714>)
 8002990:	2200      	movs	r2, #0
 8002992:	0019      	movs	r1, r3
 8002994:	f002 f820 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LES_GPIO_Port, LES_Pin, 0);
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4807      	ldr	r0, [pc, #28]	; (80029bc <converter_dados+0x714>)
 800299e:	2200      	movs	r2, #0
 80029a0:	0019      	movs	r1, r3
 80029a2:	f002 f819 	bl	80049d8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LDI_GPIO_Port, LDI_Pin, 0);
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	015b      	lsls	r3, r3, #5
 80029aa:	4804      	ldr	r0, [pc, #16]	; (80029bc <converter_dados+0x714>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	0019      	movs	r1, r3
 80029b0:	f002 f812 	bl	80049d8 <HAL_GPIO_WritePin>

				break;
 80029b4:	e01f      	b.n	80029f6 <converter_dados+0x74e>
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	50000400 	.word	0x50000400
 80029bc:	50000800 	.word	0x50000800
 80029c0:	2000028c 	.word	0x2000028c
 80029c4:	2000002f 	.word	0x2000002f
 80029c8:	2000002e 	.word	0x2000002e
 80029cc:	2000002d 	.word	0x2000002d
 80029d0:	2000002c 	.word	0x2000002c

			 case 16:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <converter_dados+0x758>)
 80029d6:	221e      	movs	r2, #30
 80029d8:	2100      	movs	r1, #0
 80029da:	0018      	movs	r0, r3
 80029dc:	f7ff fbf0 	bl	80021c0 <PWM_Set_DC>
				break;
 80029e0:	e009      	b.n	80029f6 <converter_dados+0x74e>

			 case 17:
				PWM_Set_DC(&htim2, TIM_CHANNEL_1, 30);
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <converter_dados+0x758>)
 80029e4:	221e      	movs	r2, #30
 80029e6:	2100      	movs	r1, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff fbe9 	bl	80021c0 <PWM_Set_DC>
				break;
 80029ee:	e002      	b.n	80029f6 <converter_dados+0x74e>


		}
	}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	e000      	b.n	80029f6 <converter_dados+0x74e>
				break;
 80029f4:	46c0      	nop			; (mov r8, r8)
}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	20000240 	.word	0x20000240

08002a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b091      	sub	sp, #68	; 0x44
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a0a:	f000 fd6d 	bl	80034e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a0e:	f000 f94d 	bl	8002cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a12:	f000 fadf 	bl	8002fd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002a16:	f000 fa51 	bl	8002ebc <MX_TIM2_Init>
  MX_ADC1_Init();
 8002a1a:	f000 f9a5 	bl	8002d68 <MX_ADC1_Init>
  MX_SPI1_Init();
 8002a1e:	f000 fa0f 	bl	8002e40 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  myLoRa = newLoRa();
 8002a22:	4c8c      	ldr	r4, [pc, #560]	; (8002c54 <main+0x250>)
 8002a24:	003b      	movs	r3, r7
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7fe ff44 	bl	80018b4 <newLoRa>
 8002a2c:	003a      	movs	r2, r7
 8002a2e:	0023      	movs	r3, r4
 8002a30:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a32:	c313      	stmia	r3!, {r0, r1, r4}
 8002a34:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a36:	c313      	stmia	r3!, {r0, r1, r4}
 8002a38:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a3a:	c313      	stmia	r3!, {r0, r1, r4}
 8002a3c:	ca03      	ldmia	r2!, {r0, r1}
 8002a3e:	c303      	stmia	r3!, {r0, r1}

    	myLoRa.hSPIx                 = &hspi1;
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <main+0x250>)
 8002a42:	4a85      	ldr	r2, [pc, #532]	; (8002c58 <main+0x254>)
 8002a44:	619a      	str	r2, [r3, #24]
    	myLoRa.CS_port               = NSS_GPIO_Port;
 8002a46:	4b83      	ldr	r3, [pc, #524]	; (8002c54 <main+0x250>)
 8002a48:	22a0      	movs	r2, #160	; 0xa0
 8002a4a:	05d2      	lsls	r2, r2, #23
 8002a4c:	601a      	str	r2, [r3, #0]
    	myLoRa.CS_pin                = NSS_Pin;
 8002a4e:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <main+0x250>)
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	809a      	strh	r2, [r3, #4]


    	myLoRa.frequency             = 433;							  // default = 433 MHz
 8002a54:	4b7f      	ldr	r3, [pc, #508]	; (8002c54 <main+0x250>)
 8002a56:	22b2      	movs	r2, #178	; 0xb2
 8002a58:	32ff      	adds	r2, #255	; 0xff
 8002a5a:	621a      	str	r2, [r3, #32]
    	myLoRa.spredingFactor        = SF_7;							// default = SF_7
 8002a5c:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <main+0x250>)
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	2107      	movs	r1, #7
 8002a62:	5499      	strb	r1, [r3, r2]
    	myLoRa.bandWidth			       = BW_125KHz;				  // default = BW_125KHz
 8002a64:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <main+0x250>)
 8002a66:	2225      	movs	r2, #37	; 0x25
 8002a68:	2107      	movs	r1, #7
 8002a6a:	5499      	strb	r1, [r3, r2]
    	myLoRa.crcRate				       = CR_4_5;						// default = CR_4_5
 8002a6c:	4b79      	ldr	r3, [pc, #484]	; (8002c54 <main+0x250>)
 8002a6e:	2226      	movs	r2, #38	; 0x26
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
    	myLoRa.power					       = POWER_20db;				// default = 20db
 8002a74:	4b77      	ldr	r3, [pc, #476]	; (8002c54 <main+0x250>)
 8002a76:	222a      	movs	r2, #42	; 0x2a
 8002a78:	21ff      	movs	r1, #255	; 0xff
 8002a7a:	5499      	strb	r1, [r3, r2]
    	myLoRa.overCurrentProtection = 120; 							// default = 100 mA
 8002a7c:	4b75      	ldr	r3, [pc, #468]	; (8002c54 <main+0x250>)
 8002a7e:	222b      	movs	r2, #43	; 0x2b
 8002a80:	2178      	movs	r1, #120	; 0x78
 8002a82:	5499      	strb	r1, [r3, r2]
    	myLoRa.preamble				       = 10;		  					// default = 8;
 8002a84:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <main+0x250>)
 8002a86:	220a      	movs	r2, #10
 8002a88:	851a      	strh	r2, [r3, #40]	; 0x28


    	teste=LoRa_init(&myLoRa);
 8002a8a:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <main+0x250>)
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f7ff fac4 	bl	800201a <LoRa_init>
 8002a92:	0003      	movs	r3, r0
 8002a94:	001a      	movs	r2, r3
 8002a96:	4b71      	ldr	r3, [pc, #452]	; (8002c5c <main+0x258>)
 8002a98:	801a      	strh	r2, [r3, #0]

    	LoRa_startReceiving(&myLoRa);
 8002a9a:	4b6e      	ldr	r3, [pc, #440]	; (8002c54 <main+0x250>)
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff fa35 	bl	8001f0c <LoRa_startReceiving>


  HAL_TIM_Base_Start_IT(&htim2);
 8002aa2:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <main+0x25c>)
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f003 fec5 	bl	8006834 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <main+0x25c>)
 8002aac:	2100      	movs	r1, #0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f003 ff82 	bl	80069b8 <HAL_TIM_PWM_Start>

  PWM_Set_DC(&htim2, TIM_CHANNEL_1, 0);
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <main+0x25c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff fb80 	bl	80021c0 <PWM_Set_DC>

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ac0:	2330      	movs	r3, #48	; 0x30
 8002ac2:	18fb      	adds	r3, r7, r3
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	230c      	movs	r3, #12
 8002ac8:	001a      	movs	r2, r3
 8002aca:	2100      	movs	r1, #0
 8002acc:	f005 f838 	bl	8007b40 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002ad0:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <main+0x260>)
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f001 fcb4 	bl	8004440 <HAL_ADCEx_Calibration_Start>

  while (1)
  {

	  if(received_data[0] != 0){
 8002ad8:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <main+0x264>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02b      	beq.n	8002b38 <main+0x134>
		  lora_data = received_data[0];
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <main+0x264>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <main+0x268>)
 8002ae6:	601a      	str	r2, [r3, #0]

		  if(lora_data == 10 ){
 8002ae8:	4b60      	ldr	r3, [pc, #384]	; (8002c6c <main+0x268>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b0a      	cmp	r3, #10
 8002aee:	d123      	bne.n	8002b38 <main+0x134>
			  flag = 1;
 8002af0:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <main+0x26c>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, 0);
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <main+0x270>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	2110      	movs	r1, #16
 8002afc:	0018      	movs	r0, r3
 8002afe:	f001 ff6b 	bl	80049d8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(Vermelho_GPIO_Port, Vermelho_Pin, 1);
 8002b02:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <main+0x270>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	2120      	movs	r1, #32
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f001 ff65 	bl	80049d8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8002b0e:	4b59      	ldr	r3, [pc, #356]	; (8002c74 <main+0x270>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	2108      	movs	r1, #8
 8002b14:	0018      	movs	r0, r3
 8002b16:	f001 ff5f 	bl	80049d8 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	f000 fd6a 	bl	80035f4 <HAL_Delay>
			  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8002b20:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <main+0x270>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	2108      	movs	r1, #8
 8002b26:	0018      	movs	r0, r3
 8002b28:	f001 ff56 	bl	80049d8 <HAL_GPIO_WritePin>
			  cont ++;
 8002b2c:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <main+0x274>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <main+0x274>)
 8002b36:	701a      	strb	r2, [r3, #0]

		  }
  	  }
	  HAL_Delay(150);
 8002b38:	2096      	movs	r0, #150	; 0x96
 8002b3a:	f000 fd5b 	bl	80035f4 <HAL_Delay>
	  packet_size = LoRa_receive(&myLoRa, received_data, 1);
 8002b3e:	494a      	ldr	r1, [pc, #296]	; (8002c68 <main+0x264>)
 8002b40:	4b44      	ldr	r3, [pc, #272]	; (8002c54 <main+0x250>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff f9ee 	bl	8001f26 <LoRa_receive>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <main+0x278>)
 8002b50:	601a      	str	r2, [r3, #0]



	  sConfig.Channel = ADC_CHANNEL_9;
 8002b52:	2130      	movs	r1, #48	; 0x30
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	4a4a      	ldr	r2, [pc, #296]	; (8002c80 <main+0x27c>)
 8002b58:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002b5a:	187a      	adds	r2, r7, r1
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <main+0x260>)
 8002b5e:	0011      	movs	r1, r2
 8002b60:	0018      	movs	r0, r3
 8002b62:	f001 f98d 	bl	8003e80 <HAL_ADC_ConfigChannel>

	  e_analogica = 0;
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <main+0x280>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 250; i++){
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b70:	e015      	b.n	8002b9e <main+0x19a>

		  HAL_ADC_Start(&hadc1);
 8002b72:	4b3c      	ldr	r3, [pc, #240]	; (8002c64 <main+0x260>)
 8002b74:	0018      	movs	r0, r3
 8002b76:	f001 f895 	bl	8003ca4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <main+0x260>)
 8002b7c:	2164      	movs	r1, #100	; 0x64
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f001 f8de 	bl	8003d40 <HAL_ADC_PollForConversion>
		  e_analogica += HAL_ADC_GetValue(&hadc1);
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <main+0x260>)
 8002b86:	0018      	movs	r0, r3
 8002b88:	f001 f96e 	bl	8003e68 <HAL_ADC_GetValue>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <main+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	18d2      	adds	r2, r2, r3
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <main+0x280>)
 8002b96:	601a      	str	r2, [r3, #0]
	  for(int i = 0; i < 250; i++){
 8002b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba0:	2bf9      	cmp	r3, #249	; 0xf9
 8002ba2:	dde6      	ble.n	8002b72 <main+0x16e>

	  }

	  e_analogica /= 250;
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <main+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	21fa      	movs	r1, #250	; 0xfa
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7fd faaa 	bl	8000104 <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <main+0x280>)
 8002bb6:	601a      	str	r2, [r3, #0]
	  ADmax = e_analogica;
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <main+0x280>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <main+0x284>)
 8002bbe:	601a      	str	r2, [r3, #0]

	  tensao = calcTensao(e_analogica);
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <main+0x280>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff fb44 	bl	8002254 <calcTensao>
 8002bcc:	1c02      	adds	r2, r0, #0
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <main+0x288>)
 8002bd0:	601a      	str	r2, [r3, #0]


	  corrente = (0.027 * e_analogica) / 3500.0;
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <main+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7fe fca8 	bl	800152c <__aeabi_ui2d>
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <main+0x28c>)
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <main+0x290>)
 8002be0:	f7fe fa08 	bl	8000ff4 <__aeabi_dmul>
 8002be4:	0002      	movs	r2, r0
 8002be6:	000b      	movs	r3, r1
 8002be8:	0010      	movs	r0, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	2200      	movs	r2, #0
 8002bee:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <main+0x294>)
 8002bf0:	f7fd ff18 	bl	8000a24 <__aeabi_ddiv>
 8002bf4:	0002      	movs	r2, r0
 8002bf6:	000b      	movs	r3, r1
 8002bf8:	0010      	movs	r0, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	f7fe fcbc 	bl	8001578 <__aeabi_d2f>
 8002c00:	1c02      	adds	r2, r0, #0
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <main+0x298>)
 8002c04:	601a      	str	r2, [r3, #0]
	  corrente *= 1000;
 8002c06:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <main+0x298>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4925      	ldr	r1, [pc, #148]	; (8002ca0 <main+0x29c>)
 8002c0c:	1c18      	adds	r0, r3, #0
 8002c0e:	f7fd fc07 	bl	8000420 <__aeabi_fmul>
 8002c12:	1c03      	adds	r3, r0, #0
 8002c14:	1c1a      	adds	r2, r3, #0
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <main+0x298>)
 8002c18:	601a      	str	r2, [r3, #0]

	  currente = corrente;
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <main+0x298>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1c18      	adds	r0, r3, #0
 8002c20:	f7fd fbe6 	bl	80003f0 <__aeabi_f2uiz>
 8002c24:	0002      	movs	r2, r0
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <main+0x2a0>)
 8002c28:	601a      	str	r2, [r3, #0]


	  converter_dados(lora_data);
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <main+0x268>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7ff fb3a 	bl	80022a8 <converter_dados>



	  if(flagui==1){
 8002c34:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <main+0x2a4>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d000      	beq.n	8002c3e <main+0x23a>
 8002c3c:	e74c      	b.n	8002ad8 <main+0xd4>
		  LoRa_transmit(&myLoRa, &currente, 1, 100);
 8002c3e:	4919      	ldr	r1, [pc, #100]	; (8002ca4 <main+0x2a0>)
 8002c40:	4804      	ldr	r0, [pc, #16]	; (8002c54 <main+0x250>)
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	2201      	movs	r2, #1
 8002c46:	f7ff f8f6 	bl	8001e36 <LoRa_transmit>
		  flagui=0;
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <main+0x2a4>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
	  if(received_data[0] != 0){
 8002c50:	e742      	b.n	8002ad8 <main+0xd4>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	20000290 	.word	0x20000290
 8002c58:	200001dc 	.word	0x200001dc
 8002c5c:	20000154 	.word	0x20000154
 8002c60:	20000240 	.word	0x20000240
 8002c64:	20000040 	.word	0x20000040
 8002c68:	200000a4 	.word	0x200000a4
 8002c6c:	2000028c 	.word	0x2000028c
 8002c70:	2000002f 	.word	0x2000002f
 8002c74:	50000800 	.word	0x50000800
 8002c78:	2000002e 	.word	0x2000002e
 8002c7c:	20000028 	.word	0x20000028
 8002c80:	24000200 	.word	0x24000200
 8002c84:	20000038 	.word	0x20000038
 8002c88:	20000158 	.word	0x20000158
 8002c8c:	2000003c 	.word	0x2000003c
 8002c90:	53f7ced9 	.word	0x53f7ced9
 8002c94:	3f9ba5e3 	.word	0x3f9ba5e3
 8002c98:	40ab5800 	.word	0x40ab5800
 8002c9c:	200000d0 	.word	0x200000d0
 8002ca0:	447a0000 	.word	0x447a0000
 8002ca4:	20000034 	.word	0x20000034
 8002ca8:	20000030 	.word	0x20000030

08002cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b095      	sub	sp, #84	; 0x54
 8002cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cb2:	2414      	movs	r4, #20
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	233c      	movs	r3, #60	; 0x3c
 8002cba:	001a      	movs	r2, r3
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f004 ff3f 	bl	8007b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	2310      	movs	r3, #16
 8002cc8:	001a      	movs	r2, r3
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f004 ff38 	bl	8007b40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f001 fedb 	bl	8004a90 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cda:	193b      	adds	r3, r7, r4
 8002cdc:	2202      	movs	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ce0:	193b      	adds	r3, r7, r4
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	0052      	lsls	r2, r2, #1
 8002ce6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ce8:	0021      	movs	r1, r4
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cf0:	187b      	adds	r3, r7, r1
 8002cf2:	2240      	movs	r2, #64	; 0x40
 8002cf4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cfc:	187b      	adds	r3, r7, r1
 8002cfe:	2202      	movs	r2, #2
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002d02:	187b      	adds	r3, r7, r1
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002d08:	187b      	adds	r3, r7, r1
 8002d0a:	2208      	movs	r2, #8
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d0e:	187b      	adds	r3, r7, r1
 8002d10:	2280      	movs	r2, #128	; 0x80
 8002d12:	0292      	lsls	r2, r2, #10
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	0492      	lsls	r2, r2, #18
 8002d1c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	0592      	lsls	r2, r2, #22
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d26:	187b      	adds	r3, r7, r1
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 fef1 	bl	8004b10 <HAL_RCC_OscConfig>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d001      	beq.n	8002d36 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002d32:	f000 fa25 	bl	8003180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2207      	movs	r2, #7
 8002d3a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2202      	movs	r2, #2
 8002d40:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d4e:	1d3b      	adds	r3, r7, #4
 8002d50:	2102      	movs	r1, #2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f002 fa42 	bl	80051dc <HAL_RCC_ClockConfig>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d001      	beq.n	8002d60 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002d5c:	f000 fa10 	bl	8003180 <Error_Handler>
  }
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b015      	add	sp, #84	; 0x54
 8002d66:	bd90      	pop	{r4, r7, pc}

08002d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	0018      	movs	r0, r3
 8002d72:	230c      	movs	r3, #12
 8002d74:	001a      	movs	r2, r3
 8002d76:	2100      	movs	r1, #0
 8002d78:	f004 fee2 	bl	8007b40 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <MX_ADC1_Init+0xd0>)
 8002d80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d82:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	05d2      	lsls	r2, r2, #23
 8002d88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d90:	4b28      	ldr	r3, [pc, #160]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002d9e:	2204      	movs	r2, #4
 8002da0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dba:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dd0:	222c      	movs	r2, #44	; 0x2c
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002dd6:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8002ddc:	4b15      	ldr	r3, [pc, #84]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dde:	2206      	movs	r2, #6
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002de4:	2206      	movs	r2, #6
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002dea:	223c      	movs	r2, #60	; 0x3c
 8002dec:	2100      	movs	r1, #0
 8002dee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002df6:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 fd75 	bl	80038e8 <HAL_ADC_Init>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d001      	beq.n	8002e06 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002e02:	f000 f9bd 	bl	8003180 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002e06:	1d3b      	adds	r3, r7, #4
 8002e08:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <MX_ADC1_Init+0xd4>)
 8002e0a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e0c:	1d3b      	adds	r3, r7, #4
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e18:	1d3a      	adds	r2, r7, #4
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_ADC1_Init+0xcc>)
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f001 f82e 	bl	8003e80 <HAL_ADC_ConfigChannel>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002e28:	f000 f9aa 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e2c:	46c0      	nop			; (mov r8, r8)
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000040 	.word	0x20000040
 8002e38:	40012400 	.word	0x40012400
 8002e3c:	24000200 	.word	0x24000200

08002e40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002e44:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <MX_SPI1_Init+0x78>)
 8002e48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e4c:	2282      	movs	r2, #130	; 0x82
 8002e4e:	0052      	lsls	r2, r2, #1
 8002e50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e5a:	22e0      	movs	r2, #224	; 0xe0
 8002e5c:	00d2      	lsls	r2, r2, #3
 8002e5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e6c:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	0092      	lsls	r2, r2, #2
 8002e72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e76:	2230      	movs	r2, #48	; 0x30
 8002e78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e8e:	2207      	movs	r2, #7
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002e9a:	2208      	movs	r2, #8
 8002e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <MX_SPI1_Init+0x74>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f002 fd61 	bl	8005968 <HAL_SPI_Init>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002eaa:	f000 f969 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	200001dc 	.word	0x200001dc
 8002eb8:	40013000 	.word	0x40013000

08002ebc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec2:	2328      	movs	r3, #40	; 0x28
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	2310      	movs	r3, #16
 8002eca:	001a      	movs	r2, r3
 8002ecc:	2100      	movs	r1, #0
 8002ece:	f004 fe37 	bl	8007b40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed2:	231c      	movs	r3, #28
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	230c      	movs	r3, #12
 8002eda:	001a      	movs	r2, r3
 8002edc:	2100      	movs	r1, #0
 8002ede:	f004 fe2f 	bl	8007b40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ee2:	003b      	movs	r3, r7
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	231c      	movs	r3, #28
 8002ee8:	001a      	movs	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	f004 fe28 	bl	8007b40 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ef0:	4b35      	ldr	r3, [pc, #212]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	05d2      	lsls	r2, r2, #23
 8002ef6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8002ef8:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002efa:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <MX_TIM2_Init+0x110>)
 8002efc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002efe:	4b32      	ldr	r3, [pc, #200]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002f04:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f06:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <MX_TIM2_Init+0x114>)
 8002f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f10:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f16:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f18:	0018      	movs	r0, r3
 8002f1a:	f003 fc33 	bl	8006784 <HAL_TIM_Base_Init>
 8002f1e:	1e03      	subs	r3, r0, #0
 8002f20:	d001      	beq.n	8002f26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002f22:	f000 f92d 	bl	8003180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f26:	2128      	movs	r1, #40	; 0x28
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	0152      	lsls	r2, r2, #5
 8002f2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f30:	187a      	adds	r2, r7, r1
 8002f32:	4b25      	ldr	r3, [pc, #148]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f34:	0011      	movs	r1, r2
 8002f36:	0018      	movs	r0, r3
 8002f38:	f004 f856 	bl	8006fe8 <HAL_TIM_ConfigClockSource>
 8002f3c:	1e03      	subs	r3, r0, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002f40:	f000 f91e 	bl	8003180 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f44:	4b20      	ldr	r3, [pc, #128]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f003 fcd6 	bl	80068f8 <HAL_TIM_PWM_Init>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002f50:	f000 f916 	bl	8003180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f54:	211c      	movs	r1, #28
 8002f56:	187b      	adds	r3, r7, r1
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5c:	187b      	adds	r3, r7, r1
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f62:	187a      	adds	r2, r7, r1
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f66:	0011      	movs	r1, r2
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f004 fd37 	bl	80079dc <HAL_TIMEx_MasterConfigSynchronization>
 8002f6e:	1e03      	subs	r3, r0, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8002f72:	f000 f905 	bl	8003180 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f76:	003b      	movs	r3, r7
 8002f78:	2260      	movs	r2, #96	; 0x60
 8002f7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002f7c:	003b      	movs	r3, r7
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f82:	003b      	movs	r3, r7
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f88:	003b      	movs	r3, r7
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f8e:	0039      	movs	r1, r7
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	0018      	movs	r0, r3
 8002f96:	f003 ff31 	bl	8006dfc <HAL_TIM_PWM_ConfigChannel>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002f9e:	f000 f8ef 	bl	8003180 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fa2:	0039      	movs	r1, r7
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f003 ff27 	bl	8006dfc <HAL_TIM_PWM_ConfigChannel>
 8002fae:	1e03      	subs	r3, r0, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8002fb2:	f000 f8e5 	bl	8003180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fb6:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <MX_TIM2_Init+0x10c>)
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f9d9 	bl	8003370 <HAL_TIM_MspPostInit>

}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b00e      	add	sp, #56	; 0x38
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20000240 	.word	0x20000240
 8002fcc:	0000f9ff 	.word	0x0000f9ff
 8002fd0:	000003e7 	.word	0x000003e7

08002fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b089      	sub	sp, #36	; 0x24
 8002fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	240c      	movs	r4, #12
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	0018      	movs	r0, r3
 8002fe0:	2314      	movs	r3, #20
 8002fe2:	001a      	movs	r2, r3
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	f004 fdab 	bl	8007b40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	4b61      	ldr	r3, [pc, #388]	; (8003170 <MX_GPIO_Init+0x19c>)
 8002fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fee:	4b60      	ldr	r3, [pc, #384]	; (8003170 <MX_GPIO_Init+0x19c>)
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ff6:	4b5e      	ldr	r3, [pc, #376]	; (8003170 <MX_GPIO_Init+0x19c>)
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b5b      	ldr	r3, [pc, #364]	; (8003170 <MX_GPIO_Init+0x19c>)
 8003004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003006:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <MX_GPIO_Init+0x19c>)
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	635a      	str	r2, [r3, #52]	; 0x34
 800300e:	4b58      	ldr	r3, [pc, #352]	; (8003170 <MX_GPIO_Init+0x19c>)
 8003010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003012:	2201      	movs	r2, #1
 8003014:	4013      	ands	r3, r2
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	4b55      	ldr	r3, [pc, #340]	; (8003170 <MX_GPIO_Init+0x19c>)
 800301c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301e:	4b54      	ldr	r3, [pc, #336]	; (8003170 <MX_GPIO_Init+0x19c>)
 8003020:	2102      	movs	r1, #2
 8003022:	430a      	orrs	r2, r1
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
 8003026:	4b52      	ldr	r3, [pc, #328]	; (8003170 <MX_GPIO_Init+0x19c>)
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302a:	2202      	movs	r2, #2
 800302c:	4013      	ands	r3, r2
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEI_Pin|LDI_Pin|buzzer_Pin|Vermelho_Pin
 8003032:	4950      	ldr	r1, [pc, #320]	; (8003174 <MX_GPIO_Init+0x1a0>)
 8003034:	4b50      	ldr	r3, [pc, #320]	; (8003178 <MX_GPIO_Init+0x1a4>)
 8003036:	2200      	movs	r2, #0
 8003038:	0018      	movs	r0, r3
 800303a:	f001 fccd 	bl	80049d8 <HAL_GPIO_WritePin>
                          |LES_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800303e:	23a0      	movs	r3, #160	; 0xa0
 8003040:	05db      	lsls	r3, r3, #23
 8003042:	2200      	movs	r2, #0
 8003044:	2120      	movs	r1, #32
 8003046:	0018      	movs	r0, r3
 8003048:	f001 fcc6 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800304c:	23a0      	movs	r3, #160	; 0xa0
 800304e:	05db      	lsls	r3, r3, #23
 8003050:	2201      	movs	r2, #1
 8003052:	2180      	movs	r1, #128	; 0x80
 8003054:	0018      	movs	r0, r3
 8003056:	f001 fcbf 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Verde_GPIO_Port, Verde_Pin, GPIO_PIN_SET);
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <MX_GPIO_Init+0x1a4>)
 800305c:	2201      	movs	r2, #1
 800305e:	2110      	movs	r1, #16
 8003060:	0018      	movs	r0, r3
 8003062:	f001 fcb9 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDS_GPIO_Port, LDS_Pin, GPIO_PIN_RESET);
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4844      	ldr	r0, [pc, #272]	; (800317c <MX_GPIO_Init+0x1a8>)
 800306c:	2200      	movs	r2, #0
 800306e:	0019      	movs	r1, r3
 8003070:	f001 fcb2 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEI_Pin LDI_Pin LES_Pin */
  GPIO_InitStruct.Pin = LEI_Pin|LDI_Pin|LES_Pin;
 8003074:	193b      	adds	r3, r7, r4
 8003076:	22e0      	movs	r2, #224	; 0xe0
 8003078:	0152      	lsls	r2, r2, #5
 800307a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2201      	movs	r2, #1
 8003080:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	193b      	adds	r3, r7, r4
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2202      	movs	r2, #2
 800308c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800308e:	193b      	adds	r3, r7, r4
 8003090:	4a39      	ldr	r2, [pc, #228]	; (8003178 <MX_GPIO_Init+0x1a4>)
 8003092:	0019      	movs	r1, r3
 8003094:	0010      	movs	r0, r2
 8003096:	f001 fb33 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800309a:	0021      	movs	r1, r4
 800309c:	187b      	adds	r3, r7, r1
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	0192      	lsls	r2, r2, #6
 80030a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2284      	movs	r2, #132	; 0x84
 80030a8:	0392      	lsls	r2, r2, #14
 80030aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	000c      	movs	r4, r1
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030b4:	193b      	adds	r3, r7, r4
 80030b6:	4a30      	ldr	r2, [pc, #192]	; (8003178 <MX_GPIO_Init+0x1a4>)
 80030b8:	0019      	movs	r1, r3
 80030ba:	0010      	movs	r0, r2
 80030bc:	f001 fb20 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzer_Pin Verde_Pin Vermelho_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin|Verde_Pin|Vermelho_Pin;
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	2238      	movs	r2, #56	; 0x38
 80030c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c6:	193b      	adds	r3, r7, r4
 80030c8:	2201      	movs	r2, #1
 80030ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	193b      	adds	r3, r7, r4
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	4a27      	ldr	r2, [pc, #156]	; (8003178 <MX_GPIO_Init+0x1a4>)
 80030dc:	0019      	movs	r1, r3
 80030de:	0010      	movs	r0, r2
 80030e0:	f001 fb0e 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	2220      	movs	r2, #32
 80030e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	193b      	adds	r3, r7, r4
 80030ec:	2201      	movs	r2, #1
 80030ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80030fc:	193a      	adds	r2, r7, r4
 80030fe:	23a0      	movs	r3, #160	; 0xa0
 8003100:	05db      	lsls	r3, r3, #23
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f001 fafb 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	193b      	adds	r3, r7, r4
 8003112:	2201      	movs	r2, #1
 8003114:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	193b      	adds	r3, r7, r4
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800311c:	193b      	adds	r3, r7, r4
 800311e:	2202      	movs	r2, #2
 8003120:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8003122:	193a      	adds	r2, r7, r4
 8003124:	23a0      	movs	r3, #160	; 0xa0
 8003126:	05db      	lsls	r3, r3, #23
 8003128:	0011      	movs	r1, r2
 800312a:	0018      	movs	r0, r3
 800312c:	f001 fae8 	bl	8004700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDS_Pin */
  GPIO_InitStruct.Pin = LDS_Pin;
 8003130:	0021      	movs	r1, r4
 8003132:	187b      	adds	r3, r7, r1
 8003134:	2280      	movs	r2, #128	; 0x80
 8003136:	0052      	lsls	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2201      	movs	r2, #1
 800313e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2202      	movs	r2, #2
 800314a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LDS_GPIO_Port, &GPIO_InitStruct);
 800314c:	187b      	adds	r3, r7, r1
 800314e:	4a0b      	ldr	r2, [pc, #44]	; (800317c <MX_GPIO_Init+0x1a8>)
 8003150:	0019      	movs	r1, r3
 8003152:	0010      	movs	r0, r2
 8003154:	f001 fad4 	bl	8004700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	2100      	movs	r1, #0
 800315c:	2007      	movs	r0, #7
 800315e:	f001 fa9d 	bl	800469c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003162:	2007      	movs	r0, #7
 8003164:	f001 faaf 	bl	80046c6 <HAL_NVIC_EnableIRQ>

}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b009      	add	sp, #36	; 0x24
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	00001c28 	.word	0x00001c28
 8003178:	50000800 	.word	0x50000800
 800317c:	50000400 	.word	0x50000400

08003180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003184:	b672      	cpsid	i
}
 8003186:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003188:	e7fe      	b.n	8003188 <Error_Handler+0x8>
	...

0800318c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_MspInit+0x4c>)
 8003194:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_MspInit+0x4c>)
 8003198:	2101      	movs	r1, #1
 800319a:	430a      	orrs	r2, r1
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_MspInit+0x4c>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2201      	movs	r2, #1
 80031a4:	4013      	ands	r3, r2
 80031a6:	607b      	str	r3, [r7, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_MspInit+0x4c>)
 80031ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_MspInit+0x4c>)
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	0549      	lsls	r1, r1, #21
 80031b4:	430a      	orrs	r2, r1
 80031b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <HAL_MspInit+0x4c>)
 80031ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	055b      	lsls	r3, r3, #21
 80031c0:	4013      	ands	r3, r2
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80031c6:	23c0      	movs	r3, #192	; 0xc0
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fa36 	bl	800363c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b09d      	sub	sp, #116	; 0x74
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	235c      	movs	r3, #92	; 0x5c
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	0018      	movs	r0, r3
 80031ea:	2314      	movs	r3, #20
 80031ec:	001a      	movs	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f004 fca6 	bl	8007b40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031f4:	2410      	movs	r4, #16
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	0018      	movs	r0, r3
 80031fa:	234c      	movs	r3, #76	; 0x4c
 80031fc:	001a      	movs	r2, r3
 80031fe:	2100      	movs	r1, #0
 8003200:	f004 fc9e 	bl	8007b40 <memset>
  if(hadc->Instance==ADC1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <HAL_ADC_MspInit+0xac>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d138      	bne.n	8003280 <HAL_ADC_MspInit+0xa4>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800320e:	193b      	adds	r3, r7, r4
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	01d2      	lsls	r2, r2, #7
 8003214:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003216:	193b      	adds	r3, r7, r4
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800321c:	193b      	adds	r3, r7, r4
 800321e:	0018      	movs	r0, r3
 8003220:	f002 f966 	bl	80054f0 <HAL_RCCEx_PeriphCLKConfig>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003228:	f7ff ffaa 	bl	8003180 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_ADC_MspInit+0xb0>)
 800322e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_ADC_MspInit+0xb0>)
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	0349      	lsls	r1, r1, #13
 8003236:	430a      	orrs	r2, r1
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_ADC_MspInit+0xb0>)
 800323c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	035b      	lsls	r3, r3, #13
 8003242:	4013      	ands	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003248:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_ADC_MspInit+0xb0>)
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_ADC_MspInit+0xb0>)
 800324e:	2102      	movs	r1, #2
 8003250:	430a      	orrs	r2, r1
 8003252:	635a      	str	r2, [r3, #52]	; 0x34
 8003254:	4b0d      	ldr	r3, [pc, #52]	; (800328c <HAL_ADC_MspInit+0xb0>)
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003260:	215c      	movs	r1, #92	; 0x5c
 8003262:	187b      	adds	r3, r7, r1
 8003264:	2202      	movs	r2, #2
 8003266:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003268:	187b      	adds	r3, r7, r1
 800326a:	2203      	movs	r2, #3
 800326c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	187b      	adds	r3, r7, r1
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003274:	187b      	adds	r3, r7, r1
 8003276:	4a06      	ldr	r2, [pc, #24]	; (8003290 <HAL_ADC_MspInit+0xb4>)
 8003278:	0019      	movs	r1, r3
 800327a:	0010      	movs	r0, r2
 800327c:	f001 fa40 	bl	8004700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003280:	46c0      	nop			; (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	b01d      	add	sp, #116	; 0x74
 8003286:	bd90      	pop	{r4, r7, pc}
 8003288:	40012400 	.word	0x40012400
 800328c:	40021000 	.word	0x40021000
 8003290:	50000400 	.word	0x50000400

08003294 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b08b      	sub	sp, #44	; 0x2c
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	2414      	movs	r4, #20
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	0018      	movs	r0, r3
 80032a2:	2314      	movs	r3, #20
 80032a4:	001a      	movs	r2, r3
 80032a6:	2100      	movs	r1, #0
 80032a8:	f004 fc4a 	bl	8007b40 <memset>
  if(hspi->Instance==SPI1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_SPI_MspInit+0x8c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d130      	bne.n	8003318 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032b6:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_SPI_MspInit+0x90>)
 80032b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_SPI_MspInit+0x90>)
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	0149      	lsls	r1, r1, #5
 80032c0:	430a      	orrs	r2, r1
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40
 80032c4:	4b17      	ldr	r3, [pc, #92]	; (8003324 <HAL_SPI_MspInit+0x90>)
 80032c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_SPI_MspInit+0x90>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_SPI_MspInit+0x90>)
 80032d8:	2101      	movs	r1, #1
 80032da:	430a      	orrs	r2, r1
 80032dc:	635a      	str	r2, [r3, #52]	; 0x34
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_SPI_MspInit+0x90>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	2201      	movs	r2, #1
 80032e4:	4013      	ands	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 80032ea:	0021      	movs	r1, r4
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2246      	movs	r2, #70	; 0x46
 80032f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2202      	movs	r2, #2
 80032f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800330a:	187a      	adds	r2, r7, r1
 800330c:	23a0      	movs	r3, #160	; 0xa0
 800330e:	05db      	lsls	r3, r3, #23
 8003310:	0011      	movs	r1, r2
 8003312:	0018      	movs	r0, r3
 8003314:	f001 f9f4 	bl	8004700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b00b      	add	sp, #44	; 0x2c
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	40013000 	.word	0x40013000
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	05db      	lsls	r3, r3, #23
 8003338:	429a      	cmp	r2, r3
 800333a:	d113      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_TIM_Base_MspInit+0x44>)
 800333e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003340:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_TIM_Base_MspInit+0x44>)
 8003342:	2101      	movs	r1, #1
 8003344:	430a      	orrs	r2, r1
 8003346:	63da      	str	r2, [r3, #60]	; 0x3c
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_TIM_Base_MspInit+0x44>)
 800334a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	200f      	movs	r0, #15
 800335a:	f001 f99f 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800335e:	200f      	movs	r0, #15
 8003360:	f001 f9b1 	bl	80046c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b004      	add	sp, #16
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000

08003370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b08b      	sub	sp, #44	; 0x2c
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	2414      	movs	r4, #20
 800337a:	193b      	adds	r3, r7, r4
 800337c:	0018      	movs	r0, r3
 800337e:	2314      	movs	r3, #20
 8003380:	001a      	movs	r2, r3
 8003382:	2100      	movs	r1, #0
 8003384:	f004 fbdc 	bl	8007b40 <memset>
  if(htim->Instance==TIM2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	05db      	lsls	r3, r3, #23
 8003390:	429a      	cmp	r2, r3
 8003392:	d143      	bne.n	800341c <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003394:	4b23      	ldr	r3, [pc, #140]	; (8003424 <HAL_TIM_MspPostInit+0xb4>)
 8003396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003398:	4b22      	ldr	r3, [pc, #136]	; (8003424 <HAL_TIM_MspPostInit+0xb4>)
 800339a:	2101      	movs	r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	635a      	str	r2, [r3, #52]	; 0x34
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <HAL_TIM_MspPostInit+0xb4>)
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	2201      	movs	r2, #1
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ac:	4b1d      	ldr	r3, [pc, #116]	; (8003424 <HAL_TIM_MspPostInit+0xb4>)
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	4b1c      	ldr	r3, [pc, #112]	; (8003424 <HAL_TIM_MspPostInit+0xb4>)
 80033b2:	2102      	movs	r1, #2
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <HAL_TIM_MspPostInit+0xb4>)
 80033ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033bc:	2202      	movs	r2, #2
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80033c4:	193b      	adds	r3, r7, r4
 80033c6:	2201      	movs	r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	2202      	movs	r2, #2
 80033ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	193b      	adds	r3, r7, r4
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d6:	193b      	adds	r3, r7, r4
 80033d8:	2200      	movs	r2, #0
 80033da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	2202      	movs	r2, #2
 80033e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033e2:	193a      	adds	r2, r7, r4
 80033e4:	23a0      	movs	r3, #160	; 0xa0
 80033e6:	05db      	lsls	r3, r3, #23
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f001 f988 	bl	8004700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80033f0:	0021      	movs	r1, r4
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	2208      	movs	r2, #8
 80033f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	2202      	movs	r2, #2
 80033fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	187b      	adds	r3, r7, r1
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2202      	movs	r2, #2
 800340e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003410:	187b      	adds	r3, r7, r1
 8003412:	4a05      	ldr	r2, [pc, #20]	; (8003428 <HAL_TIM_MspPostInit+0xb8>)
 8003414:	0019      	movs	r1, r3
 8003416:	0010      	movs	r0, r2
 8003418:	f001 f972 	bl	8004700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	b00b      	add	sp, #44	; 0x2c
 8003422:	bd90      	pop	{r4, r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	50000400 	.word	0x50000400

0800342c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003430:	e7fe      	b.n	8003430 <NMI_Handler+0x4>

08003432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003436:	e7fe      	b.n	8003436 <HardFault_Handler+0x4>

08003438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003450:	f000 f8b4 	bl	80035bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	019b      	lsls	r3, r3, #6
 8003462:	0018      	movs	r0, r3
 8003464:	f001 fad6 	bl	8004a14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <TIM2_IRQHandler+0x14>)
 8003476:	0018      	movs	r0, r3
 8003478:	f003 fb8e 	bl	8006b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	20000240 	.word	0x20000240

08003488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003494:	480d      	ldr	r0, [pc, #52]	; (80034cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003496:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003498:	f7ff fff6 	bl	8003488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800349c:	480c      	ldr	r0, [pc, #48]	; (80034d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800349e:	490d      	ldr	r1, [pc, #52]	; (80034d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034a0:	4a0d      	ldr	r2, [pc, #52]	; (80034d8 <LoopForever+0xe>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034a4:	e002      	b.n	80034ac <LoopCopyDataInit>

080034a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034aa:	3304      	adds	r3, #4

080034ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034b0:	d3f9      	bcc.n	80034a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80034b4:	4c0a      	ldr	r4, [pc, #40]	; (80034e0 <LoopForever+0x16>)
  movs r3, #0
 80034b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034b8:	e001      	b.n	80034be <LoopFillZerobss>

080034ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034bc:	3204      	adds	r2, #4

080034be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034c0:	d3fb      	bcc.n	80034ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80034c2:	f004 fb19 	bl	8007af8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80034c6:	f7ff fa9d 	bl	8002a04 <main>

080034ca <LoopForever>:

LoopForever:
  b LoopForever
 80034ca:	e7fe      	b.n	80034ca <LoopForever>
  ldr   r0, =_estack
 80034cc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80034d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80034d8:	08007d0c 	.word	0x08007d0c
  ldr r2, =_sbss
 80034dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80034e0:	200002c0 	.word	0x200002c0

080034e4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80034e4:	e7fe      	b.n	80034e4 <ADC1_COMP_IRQHandler>
	...

080034e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_Init+0x3c>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_Init+0x3c>)
 80034fa:	2180      	movs	r1, #128	; 0x80
 80034fc:	0049      	lsls	r1, r1, #1
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003502:	2003      	movs	r0, #3
 8003504:	f000 f810 	bl	8003528 <HAL_InitTick>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d003      	beq.n	8003514 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800350c:	1dfb      	adds	r3, r7, #7
 800350e:	2201      	movs	r2, #1
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e001      	b.n	8003518 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003514:	f7ff fe3a 	bl	800318c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003518:	1dfb      	adds	r3, r7, #7
 800351a:	781b      	ldrb	r3, [r3, #0]
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40022000 	.word	0x40022000

08003528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003530:	230f      	movs	r3, #15
 8003532:	18fb      	adds	r3, r7, r3
 8003534:	2200      	movs	r2, #0
 8003536:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_InitTick+0x88>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d02b      	beq.n	8003598 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003540:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <HAL_InitTick+0x8c>)
 8003542:	681c      	ldr	r4, [r3, #0]
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <HAL_InitTick+0x88>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	0019      	movs	r1, r3
 800354a:	23fa      	movs	r3, #250	; 0xfa
 800354c:	0098      	lsls	r0, r3, #2
 800354e:	f7fc fdd9 	bl	8000104 <__udivsi3>
 8003552:	0003      	movs	r3, r0
 8003554:	0019      	movs	r1, r3
 8003556:	0020      	movs	r0, r4
 8003558:	f7fc fdd4 	bl	8000104 <__udivsi3>
 800355c:	0003      	movs	r3, r0
 800355e:	0018      	movs	r0, r3
 8003560:	f001 f8c1 	bl	80046e6 <HAL_SYSTICK_Config>
 8003564:	1e03      	subs	r3, r0, #0
 8003566:	d112      	bne.n	800358e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d80a      	bhi.n	8003584 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	2301      	movs	r3, #1
 8003572:	425b      	negs	r3, r3
 8003574:	2200      	movs	r2, #0
 8003576:	0018      	movs	r0, r3
 8003578:	f001 f890 	bl	800469c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <HAL_InitTick+0x90>)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e00d      	b.n	80035a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003584:	230f      	movs	r3, #15
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	e008      	b.n	80035a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800358e:	230f      	movs	r3, #15
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	2201      	movs	r2, #1
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	e003      	b.n	80035a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003598:	230f      	movs	r3, #15
 800359a:	18fb      	adds	r3, r7, r3
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80035a0:	230f      	movs	r3, #15
 80035a2:	18fb      	adds	r3, r7, r3
 80035a4:	781b      	ldrb	r3, [r3, #0]
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b005      	add	sp, #20
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	20000008 	.word	0x20000008
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_IncTick+0x1c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	001a      	movs	r2, r3
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_IncTick+0x20>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	18d2      	adds	r2, r2, r3
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <HAL_IncTick+0x20>)
 80035ce:	601a      	str	r2, [r3, #0]
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	20000008 	.word	0x20000008
 80035dc:	200002bc 	.word	0x200002bc

080035e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  return uwTick;
 80035e4:	4b02      	ldr	r3, [pc, #8]	; (80035f0 <HAL_GetTick+0x10>)
 80035e6:	681b      	ldr	r3, [r3, #0]
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	200002bc 	.word	0x200002bc

080035f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff fff0 	bl	80035e0 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	d005      	beq.n	800361a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360e:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_Delay+0x44>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	001a      	movs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	189b      	adds	r3, r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	f7ff ffe0 	bl	80035e0 <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d8f7      	bhi.n	800361c <HAL_Delay+0x28>
  {
  }
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b004      	add	sp, #16
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000008 	.word	0x20000008

0800363c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a06      	ldr	r2, [pc, #24]	; (8003664 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800364a:	4013      	ands	r3, r2
 800364c:	0019      	movs	r1, r3
 800364e:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40010000 	.word	0x40010000
 8003664:	fffff9ff 	.word	0xfffff9ff

08003668 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a05      	ldr	r2, [pc, #20]	; (800368c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003678:	401a      	ands	r2, r3
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	fe3fffff 	.word	0xfe3fffff

08003690 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	23e0      	movs	r3, #224	; 0xe0
 800369e:	045b      	lsls	r3, r3, #17
 80036a0:	4013      	ands	r3, r2
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}

080036aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	2104      	movs	r1, #4
 80036be:	400a      	ands	r2, r1
 80036c0:	2107      	movs	r1, #7
 80036c2:	4091      	lsls	r1, r2
 80036c4:	000a      	movs	r2, r1
 80036c6:	43d2      	mvns	r2, r2
 80036c8:	401a      	ands	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2104      	movs	r1, #4
 80036ce:	400b      	ands	r3, r1
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4099      	lsls	r1, r3
 80036d4:	000b      	movs	r3, r1
 80036d6:	431a      	orrs	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b004      	add	sp, #16
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	4013      	ands	r3, r2
 80036f6:	d101      	bne.n	80036fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b002      	add	sp, #8
 8003704:	bd80      	pop	{r7, pc}

08003706 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	60f8      	str	r0, [r7, #12]
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	211f      	movs	r1, #31
 800371a:	400a      	ands	r2, r1
 800371c:	210f      	movs	r1, #15
 800371e:	4091      	lsls	r1, r2
 8003720:	000a      	movs	r2, r1
 8003722:	43d2      	mvns	r2, r2
 8003724:	401a      	ands	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	210f      	movs	r1, #15
 800372c:	4019      	ands	r1, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	201f      	movs	r0, #31
 8003732:	4003      	ands	r3, r0
 8003734:	4099      	lsls	r1, r3
 8003736:	000b      	movs	r3, r1
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b004      	add	sp, #16
 8003744:	bd80      	pop	{r7, pc}

08003746 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	035b      	lsls	r3, r3, #13
 8003758:	0b5b      	lsrs	r3, r3, #13
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	0352      	lsls	r2, r2, #13
 800377a:	0b52      	lsrs	r2, r2, #13
 800377c:	43d2      	mvns	r2, r2
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	0212      	lsls	r2, r2, #8
 80037a0:	43d2      	mvns	r2, r2
 80037a2:	401a      	ands	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	400b      	ands	r3, r1
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80037ae:	400b      	ands	r3, r1
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	07ffff00 	.word	0x07ffff00

080037c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	0552      	lsls	r2, r2, #21
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b002      	add	sp, #8
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	6fffffe8 	.word	0x6fffffe8

080037ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	055b      	lsls	r3, r3, #21
 80037fc:	401a      	ands	r2, r3
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	055b      	lsls	r3, r3, #21
 8003802:	429a      	cmp	r2, r3
 8003804:	d101      	bne.n	800380a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800380a:	2300      	movs	r3, #0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b002      	add	sp, #8
 8003812:	bd80      	pop	{r7, pc}

08003814 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a04      	ldr	r2, [pc, #16]	; (8003834 <LL_ADC_Enable+0x20>)
 8003822:	4013      	ands	r3, r2
 8003824:	2201      	movs	r2, #1
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	7fffffe8 	.word	0x7fffffe8

08003838 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a04      	ldr	r2, [pc, #16]	; (8003858 <LL_ADC_Disable+0x20>)
 8003846:	4013      	ands	r3, r2
 8003848:	2202      	movs	r2, #2
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}
 8003858:	7fffffe8 	.word	0x7fffffe8

0800385c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <LL_ADC_IsEnabled+0x18>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <LL_ADC_IsEnabled+0x1a>
 8003874:	2300      	movs	r3, #0
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	b002      	add	sp, #8
 800387c:	bd80      	pop	{r7, pc}

0800387e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d101      	bne.n	8003896 <LL_ADC_IsDisableOngoing+0x18>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <LL_ADC_IsDisableOngoing+0x1a>
 8003896:	2300      	movs	r3, #0
}
 8003898:	0018      	movs	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	b002      	add	sp, #8
 800389e:	bd80      	pop	{r7, pc}

080038a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <LL_ADC_REG_StartConversion+0x20>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	2204      	movs	r2, #4
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b002      	add	sp, #8
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	7fffffe8 	.word	0x7fffffe8

080038c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d101      	bne.n	80038dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b002      	add	sp, #8
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f0:	231f      	movs	r3, #31
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003900:	2300      	movs	r3, #0
 8003902:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1b1      	b.n	8003c72 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fc5f 	bl	80031dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2254      	movs	r2, #84	; 0x54
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	0018      	movs	r0, r3
 8003932:	f7ff ff5b 	bl	80037ec <LL_ADC_IsInternalRegulatorEnabled>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d115      	bne.n	8003966 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	0018      	movs	r0, r3
 8003940:	f7ff ff40 	bl	80037c4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003944:	4bcd      	ldr	r3, [pc, #820]	; (8003c7c <HAL_ADC_Init+0x394>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	49cd      	ldr	r1, [pc, #820]	; (8003c80 <HAL_ADC_Init+0x398>)
 800394a:	0018      	movs	r0, r3
 800394c:	f7fc fbda 	bl	8000104 <__udivsi3>
 8003950:	0003      	movs	r3, r0
 8003952:	3301      	adds	r3, #1
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003958:	e002      	b.n	8003960 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	3b01      	subs	r3, #1
 800395e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f9      	bne.n	800395a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff ff3e 	bl	80037ec <LL_ADC_IsInternalRegulatorEnabled>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d10f      	bne.n	8003994 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	2210      	movs	r2, #16
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	2201      	movs	r2, #1
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800398c:	231f      	movs	r3, #31
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff ff93 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 800399e:	0003      	movs	r3, r0
 80039a0:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	2210      	movs	r2, #16
 80039a8:	4013      	ands	r3, r2
 80039aa:	d000      	beq.n	80039ae <HAL_ADC_Init+0xc6>
 80039ac:	e154      	b.n	8003c58 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d000      	beq.n	80039b6 <HAL_ADC_Init+0xce>
 80039b4:	e150      	b.n	8003c58 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	4ab2      	ldr	r2, [pc, #712]	; (8003c84 <HAL_ADC_Init+0x39c>)
 80039bc:	4013      	ands	r3, r2
 80039be:	2202      	movs	r2, #2
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0018      	movs	r0, r3
 80039cc:	f7ff ff46 	bl	800385c <LL_ADC_IsEnabled>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d156      	bne.n	8003a82 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2218      	movs	r2, #24
 80039dc:	4393      	bics	r3, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0f9b      	lsrs	r3, r3, #30
 80039f2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80039f8:	4313      	orrs	r3, r2
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	223c      	movs	r2, #60	; 0x3c
 8003a04:	5c9b      	ldrb	r3, [r3, r2]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d111      	bne.n	8003a2e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	0f9b      	lsrs	r3, r3, #30
 8003a10:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003a16:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003a1c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003a22:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	4a94      	ldr	r2, [pc, #592]	; (8003c88 <HAL_ADC_Init+0x3a0>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	0019      	movs	r1, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	23c0      	movs	r3, #192	; 0xc0
 8003a4a:	061b      	lsls	r3, r3, #24
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d018      	beq.n	8003a82 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003a54:	2380      	movs	r3, #128	; 0x80
 8003a56:	05db      	lsls	r3, r3, #23
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d012      	beq.n	8003a82 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003a60:	2380      	movs	r3, #128	; 0x80
 8003a62:	061b      	lsls	r3, r3, #24
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d00c      	beq.n	8003a82 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003a68:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_ADC_Init+0x3a4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a88      	ldr	r2, [pc, #544]	; (8003c90 <HAL_ADC_Init+0x3a8>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	23f0      	movs	r3, #240	; 0xf0
 8003a78:	039b      	lsls	r3, r3, #14
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <HAL_ADC_Init+0x3a4>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7e1b      	ldrb	r3, [r3, #24]
 8003a86:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7e5b      	ldrb	r3, [r3, #25]
 8003a8c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003a8e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	7e9b      	ldrb	r3, [r3, #26]
 8003a94:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003a96:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_ADC_Init+0x1be>
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	015b      	lsls	r3, r3, #5
 8003aa4:	e000      	b.n	8003aa8 <HAL_ADC_Init+0x1c0>
 8003aa6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003aa8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003aae:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	da04      	bge.n	8003ac2 <HAL_ADC_Init+0x1da>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	e001      	b.n	8003ac6 <HAL_ADC_Init+0x1de>
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003ac6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	5c5b      	ldrb	r3, [r3, r1]
 8003ace:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ad0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	5c9b      	ldrb	r3, [r3, r2]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d115      	bne.n	8003b0e <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	7e9b      	ldrb	r3, [r3, #26]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d105      	bne.n	8003af6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	0252      	lsls	r2, r2, #9
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	e00b      	b.n	8003b0e <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afa:	2220      	movs	r2, #32
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	2201      	movs	r2, #1
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1a:	23e0      	movs	r3, #224	; 0xe0
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003b24:	4313      	orrs	r3, r2
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_ADC_Init+0x3ac>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	4a53      	ldr	r2, [pc, #332]	; (8003c98 <HAL_ADC_Init+0x3b0>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	0019      	movs	r1, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6818      	ldr	r0, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	001a      	movs	r2, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	f7ff fda1 	bl	80036aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6818      	ldr	r0, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	494a      	ldr	r1, [pc, #296]	; (8003c9c <HAL_ADC_Init+0x3b4>)
 8003b72:	001a      	movs	r2, r3
 8003b74:	f7ff fd99 	bl	80036aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	4249      	negs	r1, r1
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	629a      	str	r2, [r3, #40]	; 0x28
 8003b92:	e03a      	b.n	8003c0a <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	039b      	lsls	r3, r3, #14
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d134      	bne.n	8003c0a <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	e00c      	b.n	8003bc0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	40da      	lsrs	r2, r3
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	220f      	movs	r2, #15
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	d006      	beq.n	8003bc8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b07      	cmp	r3, #7
 8003bc4:	d9ef      	bls.n	8003ba6 <HAL_ADC_Init+0x2be>
 8003bc6:	e000      	b.n	8003bca <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003bc8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d109      	bne.n	8003be4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2110      	movs	r1, #16
 8003bdc:	4249      	negs	r1, r1
 8003bde:	430a      	orrs	r2, r1
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
 8003be2:	e012      	b.n	8003c0a <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	221c      	movs	r2, #28
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	4252      	negs	r2, r2
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <HAL_ADC_Init+0x3b8>)
 8003c12:	4013      	ands	r3, r2
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d10b      	bne.n	8003c32 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	2203      	movs	r2, #3
 8003c26:	4393      	bics	r3, r2
 8003c28:	2201      	movs	r2, #1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c30:	e01c      	b.n	8003c6c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	2212      	movs	r2, #18
 8003c38:	4393      	bics	r3, r2
 8003c3a:	2210      	movs	r2, #16
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c46:	2201      	movs	r2, #1
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003c4e:	231f      	movs	r3, #31
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003c56:	e009      	b.n	8003c6c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c64:	231f      	movs	r3, #31
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003c6c:	231f      	movs	r3, #31
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b008      	add	sp, #32
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	20000000 	.word	0x20000000
 8003c80:	00030d40 	.word	0x00030d40
 8003c84:	fffffefd 	.word	0xfffffefd
 8003c88:	1ffffc02 	.word	0x1ffffc02
 8003c8c:	40012708 	.word	0x40012708
 8003c90:	ffc3ffff 	.word	0xffc3ffff
 8003c94:	fffe0219 	.word	0xfffe0219
 8003c98:	dffffc02 	.word	0xdffffc02
 8003c9c:	07ffff04 	.word	0x07ffff04
 8003ca0:	833fffe7 	.word	0x833fffe7

08003ca4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff fe07 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003cb6:	1e03      	subs	r3, r0, #0
 8003cb8:	d135      	bne.n	8003d26 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2254      	movs	r2, #84	; 0x54
 8003cbe:	5c9b      	ldrb	r3, [r3, r2]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_Start+0x24>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	e035      	b.n	8003d34 <HAL_ADC_Start+0x90>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2254      	movs	r2, #84	; 0x54
 8003ccc:	2101      	movs	r1, #1
 8003cce:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cd0:	250f      	movs	r5, #15
 8003cd2:	197c      	adds	r4, r7, r5
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f000 faaa 	bl	8004230 <ADC_Enable>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ce0:	197b      	adds	r3, r7, r5
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d119      	bne.n	8003d1c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cec:	4a13      	ldr	r2, [pc, #76]	; (8003d3c <HAL_ADC_Start+0x98>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	0052      	lsls	r2, r2, #1
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	221c      	movs	r2, #28
 8003d06:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2254      	movs	r2, #84	; 0x54
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff fdc3 	bl	80038a0 <LL_ADC_REG_StartConversion>
 8003d1a:	e008      	b.n	8003d2e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2254      	movs	r2, #84	; 0x54
 8003d20:	2100      	movs	r1, #0
 8003d22:	5499      	strb	r1, [r3, r2]
 8003d24:	e003      	b.n	8003d2e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d26:	230f      	movs	r3, #15
 8003d28:	18fb      	adds	r3, r7, r3
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003d2e:	230f      	movs	r3, #15
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	781b      	ldrb	r3, [r3, #0]
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b004      	add	sp, #16
 8003d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3c:	fffff0fe 	.word	0xfffff0fe

08003d40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d102      	bne.n	8003d58 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003d52:	2308      	movs	r3, #8
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e00f      	b.n	8003d78 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	4013      	ands	r3, r2
 8003d62:	d007      	beq.n	8003d74 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	2220      	movs	r2, #32
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e072      	b.n	8003e5a <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003d74:	2304      	movs	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d78:	f7ff fc32 	bl	80035e0 <HAL_GetTick>
 8003d7c:	0003      	movs	r3, r0
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003d80:	e01f      	b.n	8003dc2 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	d01c      	beq.n	8003dc2 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d88:	f7ff fc2a 	bl	80035e0 <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <HAL_ADC_PollForConversion+0x5e>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d111      	bne.n	8003dc2 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	d10b      	bne.n	8003dc2 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dae:	2204      	movs	r2, #4
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2254      	movs	r2, #84	; 0x54
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e04b      	b.n	8003e5a <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d0d9      	beq.n	8003d82 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	0092      	lsls	r2, r2, #2
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff fc7f 	bl	80036e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d02e      	beq.n	8003e48 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7e9b      	ldrb	r3, [r3, #26]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d12a      	bne.n	8003e48 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b08      	cmp	r3, #8
 8003dfe:	d123      	bne.n	8003e48 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7ff fd5d 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003e0a:	1e03      	subs	r3, r0, #0
 8003e0c:	d110      	bne.n	8003e30 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	210c      	movs	r1, #12
 8003e1a:	438a      	bics	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <HAL_ADC_PollForConversion+0x124>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	2201      	movs	r2, #1
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8003e2e:	e00b      	b.n	8003e48 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	2220      	movs	r2, #32
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e40:	2201      	movs	r2, #1
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	7e1b      	ldrb	r3, [r3, #24]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	220c      	movs	r2, #12
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b004      	add	sp, #16
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	46c0      	nop			; (mov r8, r8)
 8003e64:	fffffefe 	.word	0xfffffefe

08003e68 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd80      	pop	{r7, pc}
	...

08003e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8a:	2317      	movs	r3, #23
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2200      	movs	r2, #0
 8003e90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2254      	movs	r2, #84	; 0x54
 8003e9a:	5c9b      	ldrb	r3, [r3, r2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x24>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e1c0      	b.n	8004226 <HAL_ADC_ConfigChannel+0x3a6>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2254      	movs	r2, #84	; 0x54
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff fd07 	bl	80038c4 <LL_ADC_REG_IsConversionOngoing>
 8003eb6:	1e03      	subs	r3, r0, #0
 8003eb8:	d000      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x3c>
 8003eba:	e1a3      	b.n	8004204 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d100      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x46>
 8003ec4:	e143      	b.n	800414e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d004      	beq.n	8003edc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ed6:	4ac1      	ldr	r2, [pc, #772]	; (80041dc <HAL_ADC_ConfigChannel+0x35c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d108      	bne.n	8003eee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f7ff fc2d 	bl	8003746 <LL_ADC_REG_SetSequencerChAdd>
 8003eec:	e0c9      	b.n	8004082 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	211f      	movs	r1, #31
 8003ef8:	400b      	ands	r3, r1
 8003efa:	210f      	movs	r1, #15
 8003efc:	4099      	lsls	r1, r3
 8003efe:	000b      	movs	r3, r1
 8003f00:	43db      	mvns	r3, r3
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	035b      	lsls	r3, r3, #13
 8003f0c:	0b5b      	lsrs	r3, r3, #13
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x9c>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	221f      	movs	r2, #31
 8003f18:	4013      	ands	r3, r2
 8003f1a:	e098      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2201      	movs	r2, #1
 8003f22:	4013      	ands	r3, r2
 8003f24:	d000      	beq.n	8003f28 <HAL_ADC_ConfigChannel+0xa8>
 8003f26:	e091      	b.n	800404c <HAL_ADC_ConfigChannel+0x1cc>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d000      	beq.n	8003f34 <HAL_ADC_ConfigChannel+0xb4>
 8003f32:	e089      	b.n	8004048 <HAL_ADC_ConfigChannel+0x1c8>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2204      	movs	r2, #4
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d000      	beq.n	8003f40 <HAL_ADC_ConfigChannel+0xc0>
 8003f3e:	e081      	b.n	8004044 <HAL_ADC_ConfigChannel+0x1c4>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2208      	movs	r2, #8
 8003f46:	4013      	ands	r3, r2
 8003f48:	d000      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0xcc>
 8003f4a:	e079      	b.n	8004040 <HAL_ADC_ConfigChannel+0x1c0>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2210      	movs	r2, #16
 8003f52:	4013      	ands	r3, r2
 8003f54:	d000      	beq.n	8003f58 <HAL_ADC_ConfigChannel+0xd8>
 8003f56:	e071      	b.n	800403c <HAL_ADC_ConfigChannel+0x1bc>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d000      	beq.n	8003f64 <HAL_ADC_ConfigChannel+0xe4>
 8003f62:	e069      	b.n	8004038 <HAL_ADC_ConfigChannel+0x1b8>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2240      	movs	r2, #64	; 0x40
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d000      	beq.n	8003f70 <HAL_ADC_ConfigChannel+0xf0>
 8003f6e:	e061      	b.n	8004034 <HAL_ADC_ConfigChannel+0x1b4>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	4013      	ands	r3, r2
 8003f78:	d000      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0xfc>
 8003f7a:	e059      	b.n	8004030 <HAL_ADC_ConfigChannel+0x1b0>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4013      	ands	r3, r2
 8003f86:	d151      	bne.n	800402c <HAL_ADC_ConfigChannel+0x1ac>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4013      	ands	r3, r2
 8003f92:	d149      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x1a8>
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d141      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1a4>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d139      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x1a0>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d131      	bne.n	800401c <HAL_ADC_ConfigChannel+0x19c>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d129      	bne.n	8004018 <HAL_ADC_ConfigChannel+0x198>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	2380      	movs	r3, #128	; 0x80
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d121      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x194>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d119      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x190>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	025b      	lsls	r3, r3, #9
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d111      	bne.n	800400c <HAL_ADC_ConfigChannel+0x18c>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	029b      	lsls	r3, r3, #10
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d109      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x188>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	02db      	lsls	r3, r3, #11
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d001      	beq.n	8004004 <HAL_ADC_ConfigChannel+0x184>
 8004000:	2312      	movs	r3, #18
 8004002:	e024      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004004:	2300      	movs	r3, #0
 8004006:	e022      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004008:	2311      	movs	r3, #17
 800400a:	e020      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800400c:	2310      	movs	r3, #16
 800400e:	e01e      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004010:	230f      	movs	r3, #15
 8004012:	e01c      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004014:	230e      	movs	r3, #14
 8004016:	e01a      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004018:	230d      	movs	r3, #13
 800401a:	e018      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800401c:	230c      	movs	r3, #12
 800401e:	e016      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004020:	230b      	movs	r3, #11
 8004022:	e014      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004024:	230a      	movs	r3, #10
 8004026:	e012      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004028:	2309      	movs	r3, #9
 800402a:	e010      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800402c:	2308      	movs	r3, #8
 800402e:	e00e      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004030:	2307      	movs	r3, #7
 8004032:	e00c      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004034:	2306      	movs	r3, #6
 8004036:	e00a      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004038:	2305      	movs	r3, #5
 800403a:	e008      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800403c:	2304      	movs	r3, #4
 800403e:	e006      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004040:	2303      	movs	r3, #3
 8004042:	e004      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004044:	2302      	movs	r3, #2
 8004046:	e002      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_ADC_ConfigChannel+0x1ce>
 800404c:	2300      	movs	r3, #0
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	6852      	ldr	r2, [r2, #4]
 8004052:	201f      	movs	r0, #31
 8004054:	4002      	ands	r2, r0
 8004056:	4093      	lsls	r3, r2
 8004058:	000a      	movs	r2, r1
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	429a      	cmp	r2, r3
 800406e:	d808      	bhi.n	8004082 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6859      	ldr	r1, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	001a      	movs	r2, r3
 800407e:	f7ff fb42 	bl	8003706 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	001a      	movs	r2, r3
 8004090:	f7ff fb7c 	bl	800378c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db00      	blt.n	800409e <HAL_ADC_ConfigChannel+0x21e>
 800409c:	e0bc      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800409e:	4b50      	ldr	r3, [pc, #320]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7ff faf5 	bl	8003690 <LL_ADC_GetCommonPathInternalCh>
 80040a6:	0003      	movs	r3, r0
 80040a8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a4d      	ldr	r2, [pc, #308]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d122      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040bc:	d11d      	bne.n	80040fa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2280      	movs	r2, #128	; 0x80
 80040c2:	0412      	lsls	r2, r2, #16
 80040c4:	4313      	orrs	r3, r2
 80040c6:	4a46      	ldr	r2, [pc, #280]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 80040c8:	0019      	movs	r1, r3
 80040ca:	0010      	movs	r0, r2
 80040cc:	f7ff facc 	bl	8003668 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040d0:	4b45      	ldr	r3, [pc, #276]	; (80041e8 <HAL_ADC_ConfigChannel+0x368>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4945      	ldr	r1, [pc, #276]	; (80041ec <HAL_ADC_ConfigChannel+0x36c>)
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fc f814 	bl	8000104 <__udivsi3>
 80040dc:	0003      	movs	r3, r0
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	0013      	movs	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040ea:	e002      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f9      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040f8:	e08e      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a3c      	ldr	r2, [pc, #240]	; (80041f0 <HAL_ADC_ConfigChannel+0x370>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10e      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x2a2>
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	2380      	movs	r3, #128	; 0x80
 8004108:	045b      	lsls	r3, r3, #17
 800410a:	4013      	ands	r3, r2
 800410c:	d109      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2280      	movs	r2, #128	; 0x80
 8004112:	0452      	lsls	r2, r2, #17
 8004114:	4313      	orrs	r3, r2
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 8004118:	0019      	movs	r1, r3
 800411a:	0010      	movs	r0, r2
 800411c:	f7ff faa4 	bl	8003668 <LL_ADC_SetCommonPathInternalCh>
 8004120:	e07a      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a33      	ldr	r2, [pc, #204]	; (80041f4 <HAL_ADC_ConfigChannel+0x374>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d000      	beq.n	800412e <HAL_ADC_ConfigChannel+0x2ae>
 800412c:	e074      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	2380      	movs	r3, #128	; 0x80
 8004132:	03db      	lsls	r3, r3, #15
 8004134:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004136:	d000      	beq.n	800413a <HAL_ADC_ConfigChannel+0x2ba>
 8004138:	e06e      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2280      	movs	r2, #128	; 0x80
 800413e:	03d2      	lsls	r2, r2, #15
 8004140:	4313      	orrs	r3, r2
 8004142:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 8004144:	0019      	movs	r1, r3
 8004146:	0010      	movs	r0, r2
 8004148:	f7ff fa8e 	bl	8003668 <LL_ADC_SetCommonPathInternalCh>
 800414c:	e064      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	061b      	lsls	r3, r3, #24
 8004156:	429a      	cmp	r2, r3
 8004158:	d004      	beq.n	8004164 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <HAL_ADC_ConfigChannel+0x35c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d107      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	0019      	movs	r1, r3
 800416e:	0010      	movs	r0, r2
 8004170:	f7ff fafa 	bl	8003768 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da4d      	bge.n	8004218 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 800417e:	0018      	movs	r0, r3
 8004180:	f7ff fa86 	bl	8003690 <LL_ADC_GetCommonPathInternalCh>
 8004184:	0003      	movs	r3, r0
 8004186:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a15      	ldr	r2, [pc, #84]	; (80041e4 <HAL_ADC_ConfigChannel+0x364>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_ADC_ConfigChannel+0x378>)
 8004196:	4013      	ands	r3, r2
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 800419a:	0019      	movs	r1, r3
 800419c:	0010      	movs	r0, r2
 800419e:	f7ff fa63 	bl	8003668 <LL_ADC_SetCommonPathInternalCh>
 80041a2:	e039      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <HAL_ADC_ConfigChannel+0x370>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d108      	bne.n	80041c0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_ADC_ConfigChannel+0x37c>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 80041b6:	0019      	movs	r1, r3
 80041b8:	0010      	movs	r0, r2
 80041ba:	f7ff fa55 	bl	8003668 <LL_ADC_SetCommonPathInternalCh>
 80041be:	e02b      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0b      	ldr	r2, [pc, #44]	; (80041f4 <HAL_ADC_ConfigChannel+0x374>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d126      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <HAL_ADC_ConfigChannel+0x380>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	4a03      	ldr	r2, [pc, #12]	; (80041e0 <HAL_ADC_ConfigChannel+0x360>)
 80041d2:	0019      	movs	r1, r3
 80041d4:	0010      	movs	r0, r2
 80041d6:	f7ff fa47 	bl	8003668 <LL_ADC_SetCommonPathInternalCh>
 80041da:	e01d      	b.n	8004218 <HAL_ADC_ConfigChannel+0x398>
 80041dc:	80000004 	.word	0x80000004
 80041e0:	40012708 	.word	0x40012708
 80041e4:	b0001000 	.word	0xb0001000
 80041e8:	20000000 	.word	0x20000000
 80041ec:	00030d40 	.word	0x00030d40
 80041f0:	b8004000 	.word	0xb8004000
 80041f4:	b4002000 	.word	0xb4002000
 80041f8:	ff7fffff 	.word	0xff7fffff
 80041fc:	feffffff 	.word	0xfeffffff
 8004200:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004208:	2220      	movs	r2, #32
 800420a:	431a      	orrs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004210:	2317      	movs	r3, #23
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2254      	movs	r2, #84	; 0x54
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004220:	2317      	movs	r3, #23
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	781b      	ldrb	r3, [r3, #0]
}
 8004226:	0018      	movs	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	b006      	add	sp, #24
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)

08004230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004238:	2300      	movs	r3, #0
 800423a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0018      	movs	r0, r3
 8004242:	f7ff fb0b 	bl	800385c <LL_ADC_IsEnabled>
 8004246:	1e03      	subs	r3, r0, #0
 8004248:	d000      	beq.n	800424c <ADC_Enable+0x1c>
 800424a:	e069      	b.n	8004320 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4a36      	ldr	r2, [pc, #216]	; (800432c <ADC_Enable+0xfc>)
 8004254:	4013      	ands	r3, r2
 8004256:	d00d      	beq.n	8004274 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	2210      	movs	r2, #16
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	2201      	movs	r2, #1
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e056      	b.n	8004322 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	0018      	movs	r0, r3
 800427a:	f7ff facb 	bl	8003814 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800427e:	4b2c      	ldr	r3, [pc, #176]	; (8004330 <ADC_Enable+0x100>)
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff fa05 	bl	8003690 <LL_ADC_GetCommonPathInternalCh>
 8004286:	0002      	movs	r2, r0
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	4013      	ands	r3, r2
 800428e:	d00f      	beq.n	80042b0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004290:	4b28      	ldr	r3, [pc, #160]	; (8004334 <ADC_Enable+0x104>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4928      	ldr	r1, [pc, #160]	; (8004338 <ADC_Enable+0x108>)
 8004296:	0018      	movs	r0, r3
 8004298:	f7fb ff34 	bl	8000104 <__udivsi3>
 800429c:	0003      	movs	r3, r0
 800429e:	3301      	adds	r3, #1
 80042a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042a2:	e002      	b.n	80042aa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f9      	bne.n	80042a4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7e5b      	ldrb	r3, [r3, #25]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d033      	beq.n	8004320 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80042b8:	f7ff f992 	bl	80035e0 <HAL_GetTick>
 80042bc:	0003      	movs	r3, r0
 80042be:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042c0:	e027      	b.n	8004312 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7ff fac8 	bl	800385c <LL_ADC_IsEnabled>
 80042cc:	1e03      	subs	r3, r0, #0
 80042ce:	d104      	bne.n	80042da <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fa9d 	bl	8003814 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80042da:	f7ff f981 	bl	80035e0 <HAL_GetTick>
 80042de:	0002      	movs	r2, r0
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d914      	bls.n	8004312 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d00d      	beq.n	8004312 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	2210      	movs	r2, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	2201      	movs	r2, #1
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e007      	b.n	8004322 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2201      	movs	r2, #1
 800431a:	4013      	ands	r3, r2
 800431c:	2b01      	cmp	r3, #1
 800431e:	d1d0      	bne.n	80042c2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b004      	add	sp, #16
 8004328:	bd80      	pop	{r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	80000017 	.word	0x80000017
 8004330:	40012708 	.word	0x40012708
 8004334:	20000000 	.word	0x20000000
 8004338:	00030d40 	.word	0x00030d40

0800433c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff fa98 	bl	800387e <LL_ADC_IsDisableOngoing>
 800434e:	0003      	movs	r3, r0
 8004350:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff fa80 	bl	800385c <LL_ADC_IsEnabled>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d046      	beq.n	80043ee <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d143      	bne.n	80043ee <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2205      	movs	r2, #5
 800436e:	4013      	ands	r3, r2
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10d      	bne.n	8004390 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff fa5d 	bl	8003838 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2203      	movs	r2, #3
 8004384:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004386:	f7ff f92b 	bl	80035e0 <HAL_GetTick>
 800438a:	0003      	movs	r3, r0
 800438c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800438e:	e028      	b.n	80043e2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	2210      	movs	r2, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	2201      	movs	r2, #1
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e021      	b.n	80043f0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80043ac:	f7ff f918 	bl	80035e0 <HAL_GetTick>
 80043b0:	0002      	movs	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d913      	bls.n	80043e2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2201      	movs	r2, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	d00d      	beq.n	80043e2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	2210      	movs	r2, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	2201      	movs	r2, #1
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e006      	b.n	80043f0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2201      	movs	r2, #1
 80043ea:	4013      	ands	r3, r2
 80043ec:	d1de      	bne.n	80043ac <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <LL_ADC_IsEnabled>:
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2201      	movs	r2, #1
 8004406:	4013      	ands	r3, r2
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <LL_ADC_IsEnabled+0x18>
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <LL_ADC_IsEnabled+0x1a>
 8004410:	2300      	movs	r3, #0
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}

0800441a <LL_ADC_IsCalibrationOnGoing>:
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0fdb      	lsrs	r3, r3, #31
 8004428:	07da      	lsls	r2, r3, #31
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	429a      	cmp	r2, r3
 8004430:	d101      	bne.n	8004436 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004440:	b590      	push	{r4, r7, lr}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2254      	movs	r2, #84	; 0x54
 8004450:	5c9b      	ldrb	r3, [r3, r2]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_ADCEx_Calibration_Start+0x1a>
 8004456:	2302      	movs	r3, #2
 8004458:	e06c      	b.n	8004534 <HAL_ADCEx_Calibration_Start+0xf4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2254      	movs	r2, #84	; 0x54
 800445e:	2101      	movs	r1, #1
 8004460:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004462:	2317      	movs	r3, #23
 8004464:	18fc      	adds	r4, r7, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0018      	movs	r0, r3
 800446a:	f7ff ff67 	bl	800433c <ADC_Disable>
 800446e:	0003      	movs	r3, r0
 8004470:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff ffbe 	bl	80043f8 <LL_ADC_IsEnabled>
 800447c:	1e03      	subs	r3, r0, #0
 800447e:	d14c      	bne.n	800451a <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	4a2d      	ldr	r2, [pc, #180]	; (800453c <HAL_ADCEx_Calibration_Start+0xfc>)
 8004486:	4013      	ands	r3, r2
 8004488:	2202      	movs	r2, #2
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2203      	movs	r2, #3
 8004498:	4013      	ands	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2103      	movs	r1, #3
 80044a8:	438a      	bics	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2180      	movs	r1, #128	; 0x80
 80044b8:	0609      	lsls	r1, r1, #24
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044be:	e014      	b.n	80044ea <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_ADCEx_Calibration_Start+0x100>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d90d      	bls.n	80044ea <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d2:	2212      	movs	r2, #18
 80044d4:	4393      	bics	r3, r2
 80044d6:	2210      	movs	r2, #16
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2254      	movs	r2, #84	; 0x54
 80044e2:	2100      	movs	r1, #0
 80044e4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e024      	b.n	8004534 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f7ff ff93 	bl	800441a <LL_ADC_IsCalibrationOnGoing>
 80044f4:	1e03      	subs	r3, r0, #0
 80044f6:	d1e3      	bne.n	80044c0 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	2203      	movs	r2, #3
 800450e:	4393      	bics	r3, r2
 8004510:	2201      	movs	r2, #1
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
 8004518:	e005      	b.n	8004526 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451e:	2210      	movs	r2, #16
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2254      	movs	r2, #84	; 0x54
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800452e:	2317      	movs	r3, #23
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	781b      	ldrb	r3, [r3, #0]
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b007      	add	sp, #28
 800453a:	bd90      	pop	{r4, r7, pc}
 800453c:	fffffefd 	.word	0xfffffefd
 8004540:	0002f1ff 	.word	0x0002f1ff

08004544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	0002      	movs	r2, r0
 800454c:	1dfb      	adds	r3, r7, #7
 800454e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b7f      	cmp	r3, #127	; 0x7f
 8004556:	d809      	bhi.n	800456c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004558:	1dfb      	adds	r3, r7, #7
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	001a      	movs	r2, r3
 800455e:	231f      	movs	r3, #31
 8004560:	401a      	ands	r2, r3
 8004562:	4b04      	ldr	r3, [pc, #16]	; (8004574 <__NVIC_EnableIRQ+0x30>)
 8004564:	2101      	movs	r1, #1
 8004566:	4091      	lsls	r1, r2
 8004568:	000a      	movs	r2, r1
 800456a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	0002      	movs	r2, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	1dfb      	adds	r3, r7, #7
 8004584:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004586:	1dfb      	adds	r3, r7, #7
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b7f      	cmp	r3, #127	; 0x7f
 800458c:	d828      	bhi.n	80045e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800458e:	4a2f      	ldr	r2, [pc, #188]	; (800464c <__NVIC_SetPriority+0xd4>)
 8004590:	1dfb      	adds	r3, r7, #7
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b25b      	sxtb	r3, r3
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	33c0      	adds	r3, #192	; 0xc0
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	589b      	ldr	r3, [r3, r2]
 800459e:	1dfa      	adds	r2, r7, #7
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	0011      	movs	r1, r2
 80045a4:	2203      	movs	r2, #3
 80045a6:	400a      	ands	r2, r1
 80045a8:	00d2      	lsls	r2, r2, #3
 80045aa:	21ff      	movs	r1, #255	; 0xff
 80045ac:	4091      	lsls	r1, r2
 80045ae:	000a      	movs	r2, r1
 80045b0:	43d2      	mvns	r2, r2
 80045b2:	401a      	ands	r2, r3
 80045b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	401a      	ands	r2, r3
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	0018      	movs	r0, r3
 80045c4:	2303      	movs	r3, #3
 80045c6:	4003      	ands	r3, r0
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045cc:	481f      	ldr	r0, [pc, #124]	; (800464c <__NVIC_SetPriority+0xd4>)
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	430a      	orrs	r2, r1
 80045d8:	33c0      	adds	r3, #192	; 0xc0
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045de:	e031      	b.n	8004644 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <__NVIC_SetPriority+0xd8>)
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	0019      	movs	r1, r3
 80045e8:	230f      	movs	r3, #15
 80045ea:	400b      	ands	r3, r1
 80045ec:	3b08      	subs	r3, #8
 80045ee:	089b      	lsrs	r3, r3, #2
 80045f0:	3306      	adds	r3, #6
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	18d3      	adds	r3, r2, r3
 80045f6:	3304      	adds	r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	1dfa      	adds	r2, r7, #7
 80045fc:	7812      	ldrb	r2, [r2, #0]
 80045fe:	0011      	movs	r1, r2
 8004600:	2203      	movs	r2, #3
 8004602:	400a      	ands	r2, r1
 8004604:	00d2      	lsls	r2, r2, #3
 8004606:	21ff      	movs	r1, #255	; 0xff
 8004608:	4091      	lsls	r1, r2
 800460a:	000a      	movs	r2, r1
 800460c:	43d2      	mvns	r2, r2
 800460e:	401a      	ands	r2, r3
 8004610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	019b      	lsls	r3, r3, #6
 8004616:	22ff      	movs	r2, #255	; 0xff
 8004618:	401a      	ands	r2, r3
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	0018      	movs	r0, r3
 8004620:	2303      	movs	r3, #3
 8004622:	4003      	ands	r3, r0
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004628:	4809      	ldr	r0, [pc, #36]	; (8004650 <__NVIC_SetPriority+0xd8>)
 800462a:	1dfb      	adds	r3, r7, #7
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	001c      	movs	r4, r3
 8004630:	230f      	movs	r3, #15
 8004632:	4023      	ands	r3, r4
 8004634:	3b08      	subs	r3, #8
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	430a      	orrs	r2, r1
 800463a:	3306      	adds	r3, #6
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	18c3      	adds	r3, r0, r3
 8004640:	3304      	adds	r3, #4
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b003      	add	sp, #12
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	e000e100 	.word	0xe000e100
 8004650:	e000ed00 	.word	0xe000ed00

08004654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	045b      	lsls	r3, r3, #17
 8004664:	429a      	cmp	r2, r3
 8004666:	d301      	bcc.n	800466c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004668:	2301      	movs	r3, #1
 800466a:	e010      	b.n	800468e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800466c:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <SysTick_Config+0x44>)
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	3a01      	subs	r2, #1
 8004672:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004674:	2301      	movs	r3, #1
 8004676:	425b      	negs	r3, r3
 8004678:	2103      	movs	r1, #3
 800467a:	0018      	movs	r0, r3
 800467c:	f7ff ff7c 	bl	8004578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <SysTick_Config+0x44>)
 8004682:	2200      	movs	r2, #0
 8004684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <SysTick_Config+0x44>)
 8004688:	2207      	movs	r2, #7
 800468a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800468c:	2300      	movs	r3, #0
}
 800468e:	0018      	movs	r0, r3
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	e000e010 	.word	0xe000e010

0800469c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	210f      	movs	r1, #15
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	1c02      	adds	r2, r0, #0
 80046ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	0011      	movs	r1, r2
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff ff5d 	bl	8004578 <__NVIC_SetPriority>
}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b004      	add	sp, #16
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	0002      	movs	r2, r0
 80046ce:	1dfb      	adds	r3, r7, #7
 80046d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046d2:	1dfb      	adds	r3, r7, #7
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff ff33 	bl	8004544 <__NVIC_EnableIRQ>
}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b002      	add	sp, #8
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b082      	sub	sp, #8
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff ffaf 	bl	8004654 <SysTick_Config>
 80046f6:	0003      	movs	r3, r0
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b002      	add	sp, #8
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800470e:	e14d      	b.n	80049ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4091      	lsls	r1, r2
 800471a:	000a      	movs	r2, r1
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d100      	bne.n	8004728 <HAL_GPIO_Init+0x28>
 8004726:	e13e      	b.n	80049a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	2203      	movs	r2, #3
 800472e:	4013      	ands	r3, r2
 8004730:	2b01      	cmp	r3, #1
 8004732:	d005      	beq.n	8004740 <HAL_GPIO_Init+0x40>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2203      	movs	r2, #3
 800473a:	4013      	ands	r3, r2
 800473c:	2b02      	cmp	r3, #2
 800473e:	d130      	bne.n	80047a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	2203      	movs	r2, #3
 800474c:	409a      	lsls	r2, r3
 800474e:	0013      	movs	r3, r2
 8004750:	43da      	mvns	r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4013      	ands	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	409a      	lsls	r2, r3
 8004762:	0013      	movs	r3, r2
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004776:	2201      	movs	r2, #1
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	409a      	lsls	r2, r3
 800477c:	0013      	movs	r3, r2
 800477e:	43da      	mvns	r2, r3
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	2201      	movs	r2, #1
 800478e:	401a      	ands	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	409a      	lsls	r2, r3
 8004794:	0013      	movs	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2203      	movs	r2, #3
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d017      	beq.n	80047de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	409a      	lsls	r2, r3
 80047bc:	0013      	movs	r3, r2
 80047be:	43da      	mvns	r2, r3
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4013      	ands	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	409a      	lsls	r2, r3
 80047d0:	0013      	movs	r3, r2
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2203      	movs	r2, #3
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d123      	bne.n	8004832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	08da      	lsrs	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3208      	adds	r2, #8
 80047f2:	0092      	lsls	r2, r2, #2
 80047f4:	58d3      	ldr	r3, [r2, r3]
 80047f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2207      	movs	r2, #7
 80047fc:	4013      	ands	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	220f      	movs	r2, #15
 8004802:	409a      	lsls	r2, r3
 8004804:	0013      	movs	r3, r2
 8004806:	43da      	mvns	r2, r3
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	2107      	movs	r1, #7
 8004816:	400b      	ands	r3, r1
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	409a      	lsls	r2, r3
 800481c:	0013      	movs	r3, r2
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	08da      	lsrs	r2, r3, #3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3208      	adds	r2, #8
 800482c:	0092      	lsls	r2, r2, #2
 800482e:	6939      	ldr	r1, [r7, #16]
 8004830:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	2203      	movs	r2, #3
 800483e:	409a      	lsls	r2, r3
 8004840:	0013      	movs	r3, r2
 8004842:	43da      	mvns	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2203      	movs	r2, #3
 8004850:	401a      	ands	r2, r3
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	409a      	lsls	r2, r3
 8004858:	0013      	movs	r3, r2
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	23c0      	movs	r3, #192	; 0xc0
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	4013      	ands	r3, r2
 8004870:	d100      	bne.n	8004874 <HAL_GPIO_Init+0x174>
 8004872:	e098      	b.n	80049a6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004874:	4a53      	ldr	r2, [pc, #332]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3318      	adds	r3, #24
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	589b      	ldr	r3, [r3, r2]
 8004880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2203      	movs	r2, #3
 8004886:	4013      	ands	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	220f      	movs	r2, #15
 800488c:	409a      	lsls	r2, r3
 800488e:	0013      	movs	r3, r2
 8004890:	43da      	mvns	r2, r3
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	23a0      	movs	r3, #160	; 0xa0
 800489c:	05db      	lsls	r3, r3, #23
 800489e:	429a      	cmp	r2, r3
 80048a0:	d019      	beq.n	80048d6 <HAL_GPIO_Init+0x1d6>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a48      	ldr	r2, [pc, #288]	; (80049c8 <HAL_GPIO_Init+0x2c8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_GPIO_Init+0x1d2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a47      	ldr	r2, [pc, #284]	; (80049cc <HAL_GPIO_Init+0x2cc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00d      	beq.n	80048ce <HAL_GPIO_Init+0x1ce>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a46      	ldr	r2, [pc, #280]	; (80049d0 <HAL_GPIO_Init+0x2d0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <HAL_GPIO_Init+0x1ca>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a45      	ldr	r2, [pc, #276]	; (80049d4 <HAL_GPIO_Init+0x2d4>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_GPIO_Init+0x1c6>
 80048c2:	2304      	movs	r3, #4
 80048c4:	e008      	b.n	80048d8 <HAL_GPIO_Init+0x1d8>
 80048c6:	2305      	movs	r3, #5
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x1d8>
 80048ca:	2303      	movs	r3, #3
 80048cc:	e004      	b.n	80048d8 <HAL_GPIO_Init+0x1d8>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e002      	b.n	80048d8 <HAL_GPIO_Init+0x1d8>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_GPIO_Init+0x1d8>
 80048d6:	2300      	movs	r3, #0
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	2103      	movs	r1, #3
 80048dc:	400a      	ands	r2, r1
 80048de:	00d2      	lsls	r2, r2, #3
 80048e0:	4093      	lsls	r3, r2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80048e8:	4936      	ldr	r1, [pc, #216]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	3318      	adds	r3, #24
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80048f6:	4a33      	ldr	r2, [pc, #204]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	58d3      	ldr	r3, [r2, r3]
 80048fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	43da      	mvns	r2, r3
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4013      	ands	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	2380      	movs	r3, #128	; 0x80
 800490e:	025b      	lsls	r3, r3, #9
 8004910:	4013      	ands	r3, r2
 8004912:	d003      	beq.n	800491c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800491c:	4929      	ldr	r1, [pc, #164]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 800491e:	2280      	movs	r2, #128	; 0x80
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004924:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 8004926:	2384      	movs	r3, #132	; 0x84
 8004928:	58d3      	ldr	r3, [r2, r3]
 800492a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	43da      	mvns	r2, r3
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4013      	ands	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	2380      	movs	r3, #128	; 0x80
 800493c:	029b      	lsls	r3, r3, #10
 800493e:	4013      	ands	r3, r2
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800494a:	491e      	ldr	r1, [pc, #120]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 800494c:	2284      	movs	r2, #132	; 0x84
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43da      	mvns	r2, r3
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	035b      	lsls	r3, r3, #13
 800496a:	4013      	ands	r3, r2
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800497c:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	43da      	mvns	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4013      	ands	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	2380      	movs	r3, #128	; 0x80
 8004992:	039b      	lsls	r3, r3, #14
 8004994:	4013      	ands	r3, r2
 8004996:	d003      	beq.n	80049a0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <HAL_GPIO_Init+0x2c4>)
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	40da      	lsrs	r2, r3
 80049b4:	1e13      	subs	r3, r2, #0
 80049b6:	d000      	beq.n	80049ba <HAL_GPIO_Init+0x2ba>
 80049b8:	e6aa      	b.n	8004710 <HAL_GPIO_Init+0x10>
  }
}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b006      	add	sp, #24
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40021800 	.word	0x40021800
 80049c8:	50000400 	.word	0x50000400
 80049cc:	50000800 	.word	0x50000800
 80049d0:	50000c00 	.word	0x50000c00
 80049d4:	50001000 	.word	0x50001000

080049d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	0008      	movs	r0, r1
 80049e2:	0011      	movs	r1, r2
 80049e4:	1cbb      	adds	r3, r7, #2
 80049e6:	1c02      	adds	r2, r0, #0
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	1c7b      	adds	r3, r7, #1
 80049ec:	1c0a      	adds	r2, r1, #0
 80049ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049f0:	1c7b      	adds	r3, r7, #1
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049f8:	1cbb      	adds	r3, r7, #2
 80049fa:	881a      	ldrh	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a00:	e003      	b.n	8004a0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a02:	1cbb      	adds	r3, r7, #2
 8004a04:	881a      	ldrh	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	0002      	movs	r2, r0
 8004a1c:	1dbb      	adds	r3, r7, #6
 8004a1e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004a20:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	1dba      	adds	r2, r7, #6
 8004a26:	8812      	ldrh	r2, [r2, #0]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d008      	beq.n	8004a3e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a2e:	1dba      	adds	r2, r7, #6
 8004a30:	8812      	ldrh	r2, [r2, #0]
 8004a32:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004a34:	1dbb      	adds	r3, r7, #6
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 f815 	bl	8004a68 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	1dba      	adds	r2, r7, #6
 8004a44:	8812      	ldrh	r2, [r2, #0]
 8004a46:	4013      	ands	r3, r2
 8004a48:	d008      	beq.n	8004a5c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004a4c:	1dba      	adds	r2, r7, #6
 8004a4e:	8812      	ldrh	r2, [r2, #0]
 8004a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004a52:	1dbb      	adds	r3, r7, #6
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 f810 	bl	8004a7c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40021800 	.word	0x40021800

08004a68 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	0002      	movs	r2, r0
 8004a70:	1dbb      	adds	r3, r7, #6
 8004a72:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	0002      	movs	r2, r0
 8004a84:	1dbb      	adds	r3, r7, #6
 8004a86:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004a88:	46c0      	nop			; (mov r8, r8)
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	b002      	add	sp, #8
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d11f      	bne.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	0013      	movs	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	189b      	adds	r3, r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4912      	ldr	r1, [pc, #72]	; (8004b0c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f7fb fb1e 	bl	8000104 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	3301      	adds	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ace:	e008      	b.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e001      	b.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e009      	b.n	8004af6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	401a      	ands	r2, r3
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d0ed      	beq.n	8004ad0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	b004      	add	sp, #16
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	40007000 	.word	0x40007000
 8004b04:	fffff9ff 	.word	0xfffff9ff
 8004b08:	20000000 	.word	0x20000000
 8004b0c:	000f4240 	.word	0x000f4240

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f000 fb56 	bl	80051d0 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d100      	bne.n	8004b30 <HAL_RCC_OscConfig+0x20>
 8004b2e:	e07d      	b.n	8004c2c <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b30:	4bc3      	ldr	r3, [pc, #780]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2238      	movs	r2, #56	; 0x38
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b3a:	4bc1      	ldr	r3, [pc, #772]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2203      	movs	r2, #3
 8004b40:	4013      	ands	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d102      	bne.n	8004b50 <HAL_RCC_OscConfig+0x40>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d002      	beq.n	8004b56 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b56:	4bba      	ldr	r3, [pc, #744]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	029b      	lsls	r3, r3, #10
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d063      	beq.n	8004c2a <HAL_RCC_OscConfig+0x11a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d15f      	bne.n	8004c2a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f000 fb30 	bl	80051d0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	025b      	lsls	r3, r3, #9
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCC_OscConfig+0x7c>
 8004b7c:	4bb0      	ldr	r3, [pc, #704]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4baf      	ldr	r3, [pc, #700]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b82:	2180      	movs	r1, #128	; 0x80
 8004b84:	0249      	lsls	r1, r1, #9
 8004b86:	430a      	orrs	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e020      	b.n	8004bce <HAL_RCC_OscConfig+0xbe>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	23a0      	movs	r3, #160	; 0xa0
 8004b92:	02db      	lsls	r3, r3, #11
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d10e      	bne.n	8004bb6 <HAL_RCC_OscConfig+0xa6>
 8004b98:	4ba9      	ldr	r3, [pc, #676]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	4ba8      	ldr	r3, [pc, #672]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004b9e:	2180      	movs	r1, #128	; 0x80
 8004ba0:	02c9      	lsls	r1, r1, #11
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	4ba6      	ldr	r3, [pc, #664]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4ba5      	ldr	r3, [pc, #660]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004bac:	2180      	movs	r1, #128	; 0x80
 8004bae:	0249      	lsls	r1, r1, #9
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	e00b      	b.n	8004bce <HAL_RCC_OscConfig+0xbe>
 8004bb6:	4ba2      	ldr	r3, [pc, #648]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	4ba1      	ldr	r3, [pc, #644]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004bbc:	49a1      	ldr	r1, [pc, #644]	; (8004e44 <HAL_RCC_OscConfig+0x334>)
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	4b9f      	ldr	r3, [pc, #636]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	4b9e      	ldr	r3, [pc, #632]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004bc8:	499f      	ldr	r1, [pc, #636]	; (8004e48 <HAL_RCC_OscConfig+0x338>)
 8004bca:	400a      	ands	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d014      	beq.n	8004c00 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fe fd03 	bl	80035e0 <HAL_GetTick>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004be0:	f7fe fcfe 	bl	80035e0 <HAL_GetTick>
 8004be4:	0002      	movs	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b64      	cmp	r3, #100	; 0x64
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e2ee      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf2:	4b93      	ldr	r3, [pc, #588]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	029b      	lsls	r3, r3, #10
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d0f0      	beq.n	8004be0 <HAL_RCC_OscConfig+0xd0>
 8004bfe:	e015      	b.n	8004c2c <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fe fcee 	bl	80035e0 <HAL_GetTick>
 8004c04:	0003      	movs	r3, r0
 8004c06:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c08:	e008      	b.n	8004c1c <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0a:	f7fe fce9 	bl	80035e0 <HAL_GetTick>
 8004c0e:	0002      	movs	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b64      	cmp	r3, #100	; 0x64
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e2d9      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1c:	4b88      	ldr	r3, [pc, #544]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	029b      	lsls	r3, r3, #10
 8004c24:	4013      	ands	r3, r2
 8004c26:	d1f0      	bne.n	8004c0a <HAL_RCC_OscConfig+0xfa>
 8004c28:	e000      	b.n	8004c2c <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2202      	movs	r2, #2
 8004c32:	4013      	ands	r3, r2
 8004c34:	d100      	bne.n	8004c38 <HAL_RCC_OscConfig+0x128>
 8004c36:	e099      	b.n	8004d6c <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2238      	movs	r2, #56	; 0x38
 8004c3e:	4013      	ands	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c42:	4b7f      	ldr	r3, [pc, #508]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	2203      	movs	r2, #3
 8004c48:	4013      	ands	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2b10      	cmp	r3, #16
 8004c50:	d102      	bne.n	8004c58 <HAL_RCC_OscConfig+0x148>
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d002      	beq.n	8004c5e <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d135      	bne.n	8004cca <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c5e:	4b78      	ldr	r3, [pc, #480]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	2380      	movs	r3, #128	; 0x80
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4013      	ands	r3, r2
 8004c68:	d005      	beq.n	8004c76 <HAL_RCC_OscConfig+0x166>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e2ac      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c76:	4b72      	ldr	r3, [pc, #456]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4a74      	ldr	r2, [pc, #464]	; (8004e4c <HAL_RCC_OscConfig+0x33c>)
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	0019      	movs	r1, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	021a      	lsls	r2, r3, #8
 8004c86:	4b6e      	ldr	r3, [pc, #440]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d112      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c92:	4b6b      	ldr	r3, [pc, #428]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6e      	ldr	r2, [pc, #440]	; (8004e50 <HAL_RCC_OscConfig+0x340>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	4b67      	ldr	r3, [pc, #412]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004ca6:	4b66      	ldr	r3, [pc, #408]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0adb      	lsrs	r3, r3, #11
 8004cac:	2207      	movs	r2, #7
 8004cae:	4013      	ands	r3, r2
 8004cb0:	4a68      	ldr	r2, [pc, #416]	; (8004e54 <HAL_RCC_OscConfig+0x344>)
 8004cb2:	40da      	lsrs	r2, r3
 8004cb4:	4b68      	ldr	r3, [pc, #416]	; (8004e58 <HAL_RCC_OscConfig+0x348>)
 8004cb6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cb8:	4b68      	ldr	r3, [pc, #416]	; (8004e5c <HAL_RCC_OscConfig+0x34c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fe fc33 	bl	8003528 <HAL_InitTick>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d051      	beq.n	8004d6a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e282      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d030      	beq.n	8004d34 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004cd2:	4b5b      	ldr	r3, [pc, #364]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5e      	ldr	r2, [pc, #376]	; (8004e50 <HAL_RCC_OscConfig+0x340>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	4b57      	ldr	r3, [pc, #348]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004ce6:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4b55      	ldr	r3, [pc, #340]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0049      	lsls	r1, r1, #1
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe fc74 	bl	80035e0 <HAL_GetTick>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cfe:	f7fe fc6f 	bl	80035e0 <HAL_GetTick>
 8004d02:	0002      	movs	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e25f      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d10:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d1c:	4b48      	ldr	r3, [pc, #288]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a4a      	ldr	r2, [pc, #296]	; (8004e4c <HAL_RCC_OscConfig+0x33c>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	0019      	movs	r1, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	021a      	lsls	r2, r3, #8
 8004d2c:	4b44      	ldr	r3, [pc, #272]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	e01b      	b.n	8004d6c <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004d34:	4b42      	ldr	r3, [pc, #264]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d3a:	4949      	ldr	r1, [pc, #292]	; (8004e60 <HAL_RCC_OscConfig+0x350>)
 8004d3c:	400a      	ands	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe fc4e 	bl	80035e0 <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d4a:	f7fe fc49 	bl	80035e0 <HAL_GetTick>
 8004d4e:	0002      	movs	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e239      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d5c:	4b38      	ldr	r3, [pc, #224]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4013      	ands	r3, r2
 8004d66:	d1f0      	bne.n	8004d4a <HAL_RCC_OscConfig+0x23a>
 8004d68:	e000      	b.n	8004d6c <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d6a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2208      	movs	r2, #8
 8004d72:	4013      	ands	r3, r2
 8004d74:	d047      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	2238      	movs	r2, #56	; 0x38
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b18      	cmp	r3, #24
 8004d80:	d10a      	bne.n	8004d98 <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d82:	4b2f      	ldr	r3, [pc, #188]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d86:	2202      	movs	r2, #2
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d03c      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2f6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d138      	bne.n	8004e06 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e21b      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d019      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004da0:	4b27      	ldr	r3, [pc, #156]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004da2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004da4:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004da6:	2101      	movs	r1, #1
 8004da8:	430a      	orrs	r2, r1
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fe fc18 	bl	80035e0 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fe fc13 	bl	80035e0 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e203      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dcc:	2202      	movs	r2, #2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d0f1      	beq.n	8004db6 <HAL_RCC_OscConfig+0x2a6>
 8004dd2:	e018      	b.n	8004e06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004dd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dd8:	4b19      	ldr	r3, [pc, #100]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004dda:	2101      	movs	r1, #1
 8004ddc:	438a      	bics	r2, r1
 8004dde:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe fbfe 	bl	80035e0 <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fe fbf9 	bl	80035e0 <HAL_GetTick>
 8004dee:	0002      	movs	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e1e9      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e00:	2202      	movs	r2, #2
 8004e02:	4013      	ands	r3, r2
 8004e04:	d1f1      	bne.n	8004dea <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d100      	bne.n	8004e12 <HAL_RCC_OscConfig+0x302>
 8004e10:	e0c6      	b.n	8004fa0 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e12:	231f      	movs	r3, #31
 8004e14:	18fb      	adds	r3, r7, r3
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2238      	movs	r2, #56	; 0x38
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d11e      	bne.n	8004e64 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_RCC_OscConfig+0x330>)
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <HAL_RCC_OscConfig+0x322>
 8004e30:	e0b6      	b.n	8004fa0 <HAL_RCC_OscConfig+0x490>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d000      	beq.n	8004e3c <HAL_RCC_OscConfig+0x32c>
 8004e3a:	e0b1      	b.n	8004fa0 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e1c7      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
 8004e40:	40021000 	.word	0x40021000
 8004e44:	fffeffff 	.word	0xfffeffff
 8004e48:	fffbffff 	.word	0xfffbffff
 8004e4c:	ffff80ff 	.word	0xffff80ff
 8004e50:	ffffc7ff 	.word	0xffffc7ff
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	20000004 	.word	0x20000004
 8004e60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e64:	4bb8      	ldr	r3, [pc, #736]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	055b      	lsls	r3, r3, #21
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_OscConfig+0x364>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_RCC_OscConfig+0x366>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d011      	beq.n	8004e9e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4bb3      	ldr	r3, [pc, #716]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e7e:	4bb2      	ldr	r3, [pc, #712]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	0549      	lsls	r1, r1, #21
 8004e84:	430a      	orrs	r2, r1
 8004e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e88:	4baf      	ldr	r3, [pc, #700]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	055b      	lsls	r3, r3, #21
 8004e90:	4013      	ands	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e96:	231f      	movs	r3, #31
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e9e:	4bab      	ldr	r3, [pc, #684]	; (800514c <HAL_RCC_OscConfig+0x63c>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d11a      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eaa:	4ba8      	ldr	r3, [pc, #672]	; (800514c <HAL_RCC_OscConfig+0x63c>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	4ba7      	ldr	r3, [pc, #668]	; (800514c <HAL_RCC_OscConfig+0x63c>)
 8004eb0:	2180      	movs	r1, #128	; 0x80
 8004eb2:	0049      	lsls	r1, r1, #1
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004eb8:	f7fe fb92 	bl	80035e0 <HAL_GetTick>
 8004ebc:	0003      	movs	r3, r0
 8004ebe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec2:	f7fe fb8d 	bl	80035e0 <HAL_GetTick>
 8004ec6:	0002      	movs	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e17d      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed4:	4b9d      	ldr	r3, [pc, #628]	; (800514c <HAL_RCC_OscConfig+0x63c>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3e6>
 8004ee8:	4b97      	ldr	r3, [pc, #604]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eec:	4b96      	ldr	r3, [pc, #600]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004eee:	2101      	movs	r1, #1
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ef4:	e01c      	b.n	8004f30 <HAL_RCC_OscConfig+0x420>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x408>
 8004efe:	4b92      	ldr	r3, [pc, #584]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f02:	4b91      	ldr	r3, [pc, #580]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f04:	2104      	movs	r1, #4
 8004f06:	430a      	orrs	r2, r1
 8004f08:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f0a:	4b8f      	ldr	r3, [pc, #572]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f0e:	4b8e      	ldr	r3, [pc, #568]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f10:	2101      	movs	r1, #1
 8004f12:	430a      	orrs	r2, r1
 8004f14:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0x420>
 8004f18:	4b8b      	ldr	r3, [pc, #556]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f1c:	4b8a      	ldr	r3, [pc, #552]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f1e:	2101      	movs	r1, #1
 8004f20:	438a      	bics	r2, r1
 8004f22:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f24:	4b88      	ldr	r3, [pc, #544]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f28:	4b87      	ldr	r3, [pc, #540]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	438a      	bics	r2, r1
 8004f2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d014      	beq.n	8004f62 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fe fb52 	bl	80035e0 <HAL_GetTick>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f40:	e009      	b.n	8004f56 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fe fb4d 	bl	80035e0 <HAL_GetTick>
 8004f46:	0002      	movs	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	4a80      	ldr	r2, [pc, #512]	; (8005150 <HAL_RCC_OscConfig+0x640>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e13c      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f56:	4b7c      	ldr	r3, [pc, #496]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x432>
 8004f60:	e013      	b.n	8004f8a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f62:	f7fe fb3d 	bl	80035e0 <HAL_GetTick>
 8004f66:	0003      	movs	r3, r0
 8004f68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f6a:	e009      	b.n	8004f80 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7fe fb38 	bl	80035e0 <HAL_GetTick>
 8004f70:	0002      	movs	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	4a76      	ldr	r2, [pc, #472]	; (8005150 <HAL_RCC_OscConfig+0x640>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e127      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f80:	4b71      	ldr	r3, [pc, #452]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f84:	2202      	movs	r2, #2
 8004f86:	4013      	ands	r3, r2
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f8a:	231f      	movs	r3, #31
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f94:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f98:	4b6b      	ldr	r3, [pc, #428]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004f9a:	496e      	ldr	r1, [pc, #440]	; (8005154 <HAL_RCC_OscConfig+0x644>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	d039      	beq.n	800501e <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d01b      	beq.n	8004fea <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fb2:	4b65      	ldr	r3, [pc, #404]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b64      	ldr	r3, [pc, #400]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004fb8:	2180      	movs	r1, #128	; 0x80
 8004fba:	03c9      	lsls	r1, r1, #15
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fe fb0e 	bl	80035e0 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fca:	f7fe fb09 	bl	80035e0 <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0f9      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004fdc:	4b5a      	ldr	r3, [pc, #360]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	2380      	movs	r3, #128	; 0x80
 8004fe2:	041b      	lsls	r3, r3, #16
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x4ba>
 8004fe8:	e019      	b.n	800501e <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fea:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b56      	ldr	r3, [pc, #344]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8004ff0:	4959      	ldr	r1, [pc, #356]	; (8005158 <HAL_RCC_OscConfig+0x648>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff6:	f7fe faf3 	bl	80035e0 <HAL_GetTick>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005000:	f7fe faee 	bl	80035e0 <HAL_GetTick>
 8005004:	0002      	movs	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e0de      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005012:	4b4d      	ldr	r3, [pc, #308]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	4013      	ands	r3, r2
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d100      	bne.n	8005028 <HAL_RCC_OscConfig+0x518>
 8005026:	e0d2      	b.n	80051ce <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005028:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2238      	movs	r2, #56	; 0x38
 800502e:	4013      	ands	r3, r2
 8005030:	2b10      	cmp	r3, #16
 8005032:	d100      	bne.n	8005036 <HAL_RCC_OscConfig+0x526>
 8005034:	e081      	b.n	800513a <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d156      	bne.n	80050ec <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b42      	ldr	r3, [pc, #264]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8005044:	4945      	ldr	r1, [pc, #276]	; (800515c <HAL_RCC_OscConfig+0x64c>)
 8005046:	400a      	ands	r2, r1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fe fac9 	bl	80035e0 <HAL_GetTick>
 800504e:	0003      	movs	r3, r0
 8005050:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005054:	f7fe fac4 	bl	80035e0 <HAL_GetTick>
 8005058:	0002      	movs	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e0b4      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005066:	4b38      	ldr	r3, [pc, #224]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	049b      	lsls	r3, r3, #18
 800506e:	4013      	ands	r3, r2
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005072:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	4a3a      	ldr	r2, [pc, #232]	; (8005160 <HAL_RCC_OscConfig+0x650>)
 8005078:	4013      	ands	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	431a      	orrs	r2, r3
 80050a0:	4b29      	ldr	r3, [pc, #164]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050a2:	430a      	orrs	r2, r1
 80050a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a6:	4b28      	ldr	r3, [pc, #160]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4b27      	ldr	r3, [pc, #156]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	0449      	lsls	r1, r1, #17
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	4b23      	ldr	r3, [pc, #140]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	0549      	lsls	r1, r1, #21
 80050be:	430a      	orrs	r2, r1
 80050c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fe fa8d 	bl	80035e0 <HAL_GetTick>
 80050c6:	0003      	movs	r3, r0
 80050c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050cc:	f7fe fa88 	bl	80035e0 <HAL_GetTick>
 80050d0:	0002      	movs	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e078      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	049b      	lsls	r3, r3, #18
 80050e6:	4013      	ands	r3, r2
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x5bc>
 80050ea:	e070      	b.n	80051ce <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ec:	4b16      	ldr	r3, [pc, #88]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050f2:	491a      	ldr	r1, [pc, #104]	; (800515c <HAL_RCC_OscConfig+0x64c>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	4b12      	ldr	r3, [pc, #72]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 80050fe:	2103      	movs	r1, #3
 8005100:	438a      	bics	r2, r1
 8005102:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005104:	4b10      	ldr	r3, [pc, #64]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	4b0f      	ldr	r3, [pc, #60]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 800510a:	4916      	ldr	r1, [pc, #88]	; (8005164 <HAL_RCC_OscConfig+0x654>)
 800510c:	400a      	ands	r2, r1
 800510e:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fe fa66 	bl	80035e0 <HAL_GetTick>
 8005114:	0003      	movs	r3, r0
 8005116:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511a:	f7fe fa61 	bl	80035e0 <HAL_GetTick>
 800511e:	0002      	movs	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e051      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <HAL_RCC_OscConfig+0x638>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	049b      	lsls	r3, r3, #18
 8005134:	4013      	ands	r3, r2
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x60a>
 8005138:	e049      	b.n	80051ce <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d112      	bne.n	8005168 <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e044      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	40021000 	.word	0x40021000
 800514c:	40007000 	.word	0x40007000
 8005150:	00001388 	.word	0x00001388
 8005154:	efffffff 	.word	0xefffffff
 8005158:	ffbfffff 	.word	0xffbfffff
 800515c:	feffffff 	.word	0xfeffffff
 8005160:	11c1808c 	.word	0x11c1808c
 8005164:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x6c8>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2203      	movs	r2, #3
 8005172:	401a      	ands	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	429a      	cmp	r2, r3
 800517a:	d126      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2270      	movs	r2, #112	; 0x70
 8005180:	401a      	ands	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d11f      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	23fe      	movs	r3, #254	; 0xfe
 800518e:	01db      	lsls	r3, r3, #7
 8005190:	401a      	ands	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005198:	429a      	cmp	r2, r3
 800519a:	d116      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	23f8      	movs	r3, #248	; 0xf8
 80051a0:	039b      	lsls	r3, r3, #14
 80051a2:	401a      	ands	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d10e      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	23e0      	movs	r3, #224	; 0xe0
 80051b0:	051b      	lsls	r3, r3, #20
 80051b2:	401a      	ands	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d106      	bne.n	80051ca <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	0f5b      	lsrs	r3, r3, #29
 80051c0:	075a      	lsls	r2, r3, #29
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e000      	b.n	80051d0 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	0018      	movs	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b008      	add	sp, #32
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40021000 	.word	0x40021000

080051dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0e9      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051f0:	4b76      	ldr	r3, [pc, #472]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2207      	movs	r2, #7
 80051f6:	4013      	ands	r3, r2
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d91e      	bls.n	800523c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b73      	ldr	r3, [pc, #460]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2207      	movs	r2, #7
 8005204:	4393      	bics	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	4b70      	ldr	r3, [pc, #448]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005210:	f7fe f9e6 	bl	80035e0 <HAL_GetTick>
 8005214:	0003      	movs	r3, r0
 8005216:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005218:	e009      	b.n	800522e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800521a:	f7fe f9e1 	bl	80035e0 <HAL_GetTick>
 800521e:	0002      	movs	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	4a6a      	ldr	r2, [pc, #424]	; (80053d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d901      	bls.n	800522e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e0ca      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2207      	movs	r2, #7
 8005234:	4013      	ands	r3, r2
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d1ee      	bne.n	800521a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2202      	movs	r2, #2
 8005242:	4013      	ands	r3, r2
 8005244:	d015      	beq.n	8005272 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2204      	movs	r2, #4
 800524c:	4013      	ands	r3, r2
 800524e:	d006      	beq.n	800525e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005250:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4b5f      	ldr	r3, [pc, #380]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005256:	21e0      	movs	r1, #224	; 0xe0
 8005258:	01c9      	lsls	r1, r1, #7
 800525a:	430a      	orrs	r2, r1
 800525c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525e:	4b5d      	ldr	r3, [pc, #372]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	4a5d      	ldr	r2, [pc, #372]	; (80053d8 <HAL_RCC_ClockConfig+0x1fc>)
 8005264:	4013      	ands	r3, r2
 8005266:	0019      	movs	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	4b59      	ldr	r3, [pc, #356]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800526e:	430a      	orrs	r2, r1
 8005270:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	d057      	beq.n	800532c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005284:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	029b      	lsls	r3, r3, #10
 800528c:	4013      	ands	r3, r2
 800528e:	d12b      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e097      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d107      	bne.n	80052ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800529c:	4b4d      	ldr	r3, [pc, #308]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	049b      	lsls	r3, r3, #18
 80052a4:	4013      	ands	r3, r2
 80052a6:	d11f      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e08b      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b4:	4b47      	ldr	r3, [pc, #284]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	4013      	ands	r3, r2
 80052be:	d113      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e07f      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d106      	bne.n	80052da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052cc:	4b41      	ldr	r3, [pc, #260]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	2202      	movs	r2, #2
 80052d2:	4013      	ands	r3, r2
 80052d4:	d108      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e074      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052da:	4b3e      	ldr	r3, [pc, #248]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052de:	2202      	movs	r2, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e06d      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052e8:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2207      	movs	r2, #7
 80052ee:	4393      	bics	r3, r2
 80052f0:	0019      	movs	r1, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 80052f8:	430a      	orrs	r2, r1
 80052fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fc:	f7fe f970 	bl	80035e0 <HAL_GetTick>
 8005300:	0003      	movs	r3, r0
 8005302:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005304:	e009      	b.n	800531a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005306:	f7fe f96b 	bl	80035e0 <HAL_GetTick>
 800530a:	0002      	movs	r2, r0
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	4a2f      	ldr	r2, [pc, #188]	; (80053d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e054      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	4b2e      	ldr	r3, [pc, #184]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2238      	movs	r2, #56	; 0x38
 8005320:	401a      	ands	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	429a      	cmp	r2, r3
 800532a:	d1ec      	bne.n	8005306 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2207      	movs	r2, #7
 8005332:	4013      	ands	r3, r2
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d21e      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2207      	movs	r2, #7
 8005340:	4393      	bics	r3, r2
 8005342:	0019      	movs	r1, r3
 8005344:	4b21      	ldr	r3, [pc, #132]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800534c:	f7fe f948 	bl	80035e0 <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005354:	e009      	b.n	800536a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005356:	f7fe f943 	bl	80035e0 <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e02c      	b.n	80053c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800536a:	4b18      	ldr	r3, [pc, #96]	; (80053cc <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2207      	movs	r2, #7
 8005370:	4013      	ands	r3, r2
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d1ee      	bne.n	8005356 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2204      	movs	r2, #4
 800537e:	4013      	ands	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	4a15      	ldr	r2, [pc, #84]	; (80053dc <HAL_RCC_ClockConfig+0x200>)
 8005388:	4013      	ands	r3, r2
 800538a:	0019      	movs	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005396:	f000 f829 	bl	80053ec <HAL_RCC_GetSysClockFreq>
 800539a:	0001      	movs	r1, r0
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <HAL_RCC_ClockConfig+0x1f8>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	0a1b      	lsrs	r3, r3, #8
 80053a2:	220f      	movs	r2, #15
 80053a4:	401a      	ands	r2, r3
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCC_ClockConfig+0x204>)
 80053a8:	0092      	lsls	r2, r2, #2
 80053aa:	58d3      	ldr	r3, [r2, r3]
 80053ac:	221f      	movs	r2, #31
 80053ae:	4013      	ands	r3, r2
 80053b0:	000a      	movs	r2, r1
 80053b2:	40da      	lsrs	r2, r3
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <HAL_RCC_ClockConfig+0x208>)
 80053b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <HAL_RCC_ClockConfig+0x20c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	0018      	movs	r0, r3
 80053be:	f7fe f8b3 	bl	8003528 <HAL_InitTick>
 80053c2:	0003      	movs	r3, r0
}
 80053c4:	0018      	movs	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	b004      	add	sp, #16
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40022000 	.word	0x40022000
 80053d0:	00001388 	.word	0x00001388
 80053d4:	40021000 	.word	0x40021000
 80053d8:	fffff0ff 	.word	0xfffff0ff
 80053dc:	ffff8fff 	.word	0xffff8fff
 80053e0:	08007c70 	.word	0x08007c70
 80053e4:	20000000 	.word	0x20000000
 80053e8:	20000004 	.word	0x20000004

080053ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053f2:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2238      	movs	r2, #56	; 0x38
 80053f8:	4013      	ands	r3, r2
 80053fa:	d10f      	bne.n	800541c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80053fc:	4b39      	ldr	r3, [pc, #228]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	0adb      	lsrs	r3, r3, #11
 8005402:	2207      	movs	r2, #7
 8005404:	4013      	ands	r3, r2
 8005406:	2201      	movs	r2, #1
 8005408:	409a      	lsls	r2, r3
 800540a:	0013      	movs	r3, r2
 800540c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4835      	ldr	r0, [pc, #212]	; (80054e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005412:	f7fa fe77 	bl	8000104 <__udivsi3>
 8005416:	0003      	movs	r3, r0
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	e05d      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800541c:	4b31      	ldr	r3, [pc, #196]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2238      	movs	r2, #56	; 0x38
 8005422:	4013      	ands	r3, r2
 8005424:	2b08      	cmp	r3, #8
 8005426:	d102      	bne.n	800542e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005428:	4b30      	ldr	r3, [pc, #192]	; (80054ec <HAL_RCC_GetSysClockFreq+0x100>)
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e054      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800542e:	4b2d      	ldr	r3, [pc, #180]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2238      	movs	r2, #56	; 0x38
 8005434:	4013      	ands	r3, r2
 8005436:	2b10      	cmp	r3, #16
 8005438:	d138      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800543a:	4b2a      	ldr	r3, [pc, #168]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	2203      	movs	r2, #3
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005444:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	2207      	movs	r2, #7
 800544c:	4013      	ands	r3, r2
 800544e:	3301      	adds	r3, #1
 8005450:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d10d      	bne.n	8005474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4824      	ldr	r0, [pc, #144]	; (80054ec <HAL_RCC_GetSysClockFreq+0x100>)
 800545c:	f7fa fe52 	bl	8000104 <__udivsi3>
 8005460:	0003      	movs	r3, r0
 8005462:	0019      	movs	r1, r3
 8005464:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	0a1b      	lsrs	r3, r3, #8
 800546a:	227f      	movs	r2, #127	; 0x7f
 800546c:	4013      	ands	r3, r2
 800546e:	434b      	muls	r3, r1
 8005470:	617b      	str	r3, [r7, #20]
        break;
 8005472:	e00d      	b.n	8005490 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005474:	68b9      	ldr	r1, [r7, #8]
 8005476:	481c      	ldr	r0, [pc, #112]	; (80054e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005478:	f7fa fe44 	bl	8000104 <__udivsi3>
 800547c:	0003      	movs	r3, r0
 800547e:	0019      	movs	r1, r3
 8005480:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	227f      	movs	r2, #127	; 0x7f
 8005488:	4013      	ands	r3, r2
 800548a:	434b      	muls	r3, r1
 800548c:	617b      	str	r3, [r7, #20]
        break;
 800548e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005490:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	0f5b      	lsrs	r3, r3, #29
 8005496:	2207      	movs	r2, #7
 8005498:	4013      	ands	r3, r2
 800549a:	3301      	adds	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	6978      	ldr	r0, [r7, #20]
 80054a2:	f7fa fe2f 	bl	8000104 <__udivsi3>
 80054a6:	0003      	movs	r3, r0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e015      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2238      	movs	r2, #56	; 0x38
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d103      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e00b      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2238      	movs	r2, #56	; 0x38
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b18      	cmp	r3, #24
 80054ca:	d103      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80054cc:	23fa      	movs	r3, #250	; 0xfa
 80054ce:	01db      	lsls	r3, r3, #7
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e001      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80054d8:	693b      	ldr	r3, [r7, #16]
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b006      	add	sp, #24
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	40021000 	.word	0x40021000
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	007a1200 	.word	0x007a1200

080054f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80054f8:	2313      	movs	r3, #19
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2200      	movs	r2, #0
 80054fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005500:	2312      	movs	r3, #18
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	2200      	movs	r2, #0
 8005506:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	029b      	lsls	r3, r3, #10
 8005510:	4013      	ands	r3, r2
 8005512:	d100      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005514:	e0ad      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005516:	2011      	movs	r0, #17
 8005518:	183b      	adds	r3, r7, r0
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	055b      	lsls	r3, r3, #21
 8005526:	4013      	ands	r3, r2
 8005528:	d110      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	4b44      	ldr	r3, [pc, #272]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800552c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800552e:	4b43      	ldr	r3, [pc, #268]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	0549      	lsls	r1, r1, #21
 8005534:	430a      	orrs	r2, r1
 8005536:	63da      	str	r2, [r3, #60]	; 0x3c
 8005538:	4b40      	ldr	r3, [pc, #256]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800553a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800553c:	2380      	movs	r3, #128	; 0x80
 800553e:	055b      	lsls	r3, r3, #21
 8005540:	4013      	ands	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005546:	183b      	adds	r3, r7, r0
 8005548:	2201      	movs	r2, #1
 800554a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554c:	4b3c      	ldr	r3, [pc, #240]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	4b3b      	ldr	r3, [pc, #236]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	0049      	lsls	r1, r1, #1
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800555a:	f7fe f841 	bl	80035e0 <HAL_GetTick>
 800555e:	0003      	movs	r3, r0
 8005560:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005562:	e00b      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005564:	f7fe f83c 	bl	80035e0 <HAL_GetTick>
 8005568:	0002      	movs	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d904      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005572:	2313      	movs	r3, #19
 8005574:	18fb      	adds	r3, r7, r3
 8005576:	2203      	movs	r2, #3
 8005578:	701a      	strb	r2, [r3, #0]
        break;
 800557a:	e005      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800557c:	4b30      	ldr	r3, [pc, #192]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	; 0x80
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4013      	ands	r3, r2
 8005586:	d0ed      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005588:	2313      	movs	r3, #19
 800558a:	18fb      	adds	r3, r7, r3
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d15e      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005592:	4b2a      	ldr	r3, [pc, #168]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005596:	23c0      	movs	r3, #192	; 0xc0
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4013      	ands	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d019      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d014      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ae:	4b23      	ldr	r3, [pc, #140]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	4a24      	ldr	r2, [pc, #144]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b8:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055bc:	4b1f      	ldr	r3, [pc, #124]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055be:	2180      	movs	r1, #128	; 0x80
 80055c0:	0249      	lsls	r1, r1, #9
 80055c2:	430a      	orrs	r2, r1
 80055c4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c6:	4b1d      	ldr	r3, [pc, #116]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055ca:	4b1c      	ldr	r3, [pc, #112]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055cc:	491e      	ldr	r1, [pc, #120]	; (8005648 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80055ce:	400a      	ands	r2, r1
 80055d0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d2:	4b1a      	ldr	r3, [pc, #104]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	d016      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fd fffe 	bl	80035e0 <HAL_GetTick>
 80055e4:	0003      	movs	r3, r0
 80055e6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e8:	e00c      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fd fff9 	bl	80035e0 <HAL_GetTick>
 80055ee:	0002      	movs	r2, r0
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d904      	bls.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80055fa:	2313      	movs	r3, #19
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	2203      	movs	r2, #3
 8005600:	701a      	strb	r2, [r3, #0]
            break;
 8005602:	e004      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005608:	2202      	movs	r2, #2
 800560a:	4013      	ands	r3, r2
 800560c:	d0ed      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800560e:	2313      	movs	r3, #19
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10a      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005618:	4b08      	ldr	r3, [pc, #32]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800561a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561c:	4a09      	ldr	r2, [pc, #36]	; (8005644 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800561e:	4013      	ands	r3, r2
 8005620:	0019      	movs	r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005628:	430a      	orrs	r2, r1
 800562a:	65da      	str	r2, [r3, #92]	; 0x5c
 800562c:	e016      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800562e:	2312      	movs	r3, #18
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	2213      	movs	r2, #19
 8005634:	18ba      	adds	r2, r7, r2
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	e00f      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800563c:	40021000 	.word	0x40021000
 8005640:	40007000 	.word	0x40007000
 8005644:	fffffcff 	.word	0xfffffcff
 8005648:	fffeffff 	.word	0xfffeffff
 800564c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	2312      	movs	r3, #18
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2213      	movs	r2, #19
 8005656:	18ba      	adds	r2, r7, r2
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800565c:	2311      	movs	r3, #17
 800565e:	18fb      	adds	r3, r7, r3
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d105      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005666:	4bb6      	ldr	r3, [pc, #728]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800566a:	4bb5      	ldr	r3, [pc, #724]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800566c:	49b5      	ldr	r1, [pc, #724]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800566e:	400a      	ands	r2, r1
 8005670:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	4013      	ands	r3, r2
 800567a:	d009      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800567c:	4bb0      	ldr	r3, [pc, #704]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	2203      	movs	r2, #3
 8005682:	4393      	bics	r3, r2
 8005684:	0019      	movs	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	4bad      	ldr	r3, [pc, #692]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800568c:	430a      	orrs	r2, r1
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2202      	movs	r2, #2
 8005696:	4013      	ands	r3, r2
 8005698:	d009      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800569a:	4ba9      	ldr	r3, [pc, #676]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	220c      	movs	r2, #12
 80056a0:	4393      	bics	r3, r2
 80056a2:	0019      	movs	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	4ba5      	ldr	r3, [pc, #660]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056aa:	430a      	orrs	r2, r1
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2204      	movs	r2, #4
 80056b4:	4013      	ands	r3, r2
 80056b6:	d009      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056b8:	4ba1      	ldr	r3, [pc, #644]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	2230      	movs	r2, #48	; 0x30
 80056be:	4393      	bics	r3, r2
 80056c0:	0019      	movs	r1, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	4b9e      	ldr	r3, [pc, #632]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2210      	movs	r2, #16
 80056d2:	4013      	ands	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056d6:	4b9a      	ldr	r3, [pc, #616]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	4a9b      	ldr	r2, [pc, #620]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80056dc:	4013      	ands	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	4b96      	ldr	r3, [pc, #600]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056e6:	430a      	orrs	r2, r1
 80056e8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	015b      	lsls	r3, r3, #5
 80056f2:	4013      	ands	r3, r2
 80056f4:	d009      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80056f6:	4b92      	ldr	r3, [pc, #584]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	4a94      	ldr	r2, [pc, #592]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	0019      	movs	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	4b8e      	ldr	r3, [pc, #568]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005706:	430a      	orrs	r2, r1
 8005708:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	2380      	movs	r3, #128	; 0x80
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005716:	4b8a      	ldr	r3, [pc, #552]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	4a8d      	ldr	r2, [pc, #564]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800571c:	4013      	ands	r3, r2
 800571e:	0019      	movs	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005724:	4b86      	ldr	r3, [pc, #536]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005726:	430a      	orrs	r2, r1
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4013      	ands	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005736:	4b82      	ldr	r3, [pc, #520]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	4a86      	ldr	r2, [pc, #536]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800573c:	4013      	ands	r3, r2
 800573e:	0019      	movs	r1, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4b7e      	ldr	r3, [pc, #504]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005746:	430a      	orrs	r2, r1
 8005748:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2220      	movs	r2, #32
 8005750:	4013      	ands	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005754:	4b7a      	ldr	r3, [pc, #488]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005758:	4a7f      	ldr	r2, [pc, #508]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800575a:	4013      	ands	r3, r2
 800575c:	0019      	movs	r1, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	699a      	ldr	r2, [r3, #24]
 8005762:	4b77      	ldr	r3, [pc, #476]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005764:	430a      	orrs	r2, r1
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	4013      	ands	r3, r2
 8005770:	d009      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005772:	4b73      	ldr	r3, [pc, #460]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005776:	4a79      	ldr	r2, [pc, #484]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005778:	4013      	ands	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	4b6f      	ldr	r3, [pc, #444]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005782:	430a      	orrs	r2, r1
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	01db      	lsls	r3, r3, #7
 800578e:	4013      	ands	r3, r2
 8005790:	d015      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005792:	4b6b      	ldr	r3, [pc, #428]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	0899      	lsrs	r1, r3, #2
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800579e:	4b68      	ldr	r3, [pc, #416]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	05db      	lsls	r3, r3, #23
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d106      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80057b0:	4b63      	ldr	r3, [pc, #396]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	4b62      	ldr	r3, [pc, #392]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057b6:	2180      	movs	r1, #128	; 0x80
 80057b8:	0249      	lsls	r1, r1, #9
 80057ba:	430a      	orrs	r2, r1
 80057bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	031b      	lsls	r3, r3, #12
 80057c6:	4013      	ands	r3, r2
 80057c8:	d009      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057ca:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ce:	2240      	movs	r2, #64	; 0x40
 80057d0:	4393      	bics	r3, r2
 80057d2:	0019      	movs	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d8:	4b59      	ldr	r3, [pc, #356]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057da:	430a      	orrs	r2, r1
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	039b      	lsls	r3, r3, #14
 80057e6:	4013      	ands	r3, r2
 80057e8:	d016      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057ea:	4b55      	ldr	r3, [pc, #340]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	4a5c      	ldr	r2, [pc, #368]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	0019      	movs	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f8:	4b51      	ldr	r3, [pc, #324]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057fa:	430a      	orrs	r2, r1
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	03db      	lsls	r3, r3, #15
 8005806:	429a      	cmp	r2, r3
 8005808:	d106      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800580a:	4b4d      	ldr	r3, [pc, #308]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	4b4c      	ldr	r3, [pc, #304]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	0449      	lsls	r1, r1, #17
 8005814:	430a      	orrs	r2, r1
 8005816:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	03db      	lsls	r3, r3, #15
 8005820:	4013      	ands	r3, r2
 8005822:	d016      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005824:	4b46      	ldr	r3, [pc, #280]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	4a4e      	ldr	r2, [pc, #312]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800582a:	4013      	ands	r3, r2
 800582c:	0019      	movs	r1, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005832:	4b43      	ldr	r3, [pc, #268]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005834:	430a      	orrs	r2, r1
 8005836:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	045b      	lsls	r3, r3, #17
 8005840:	429a      	cmp	r2, r3
 8005842:	d106      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005844:	4b3e      	ldr	r3, [pc, #248]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	4b3d      	ldr	r3, [pc, #244]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800584a:	2180      	movs	r1, #128	; 0x80
 800584c:	0449      	lsls	r1, r1, #17
 800584e:	430a      	orrs	r2, r1
 8005850:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	011b      	lsls	r3, r3, #4
 800585a:	4013      	ands	r3, r2
 800585c:	d014      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800585e:	4b38      	ldr	r3, [pc, #224]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	2203      	movs	r2, #3
 8005864:	4393      	bics	r3, r2
 8005866:	0019      	movs	r1, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	4b34      	ldr	r3, [pc, #208]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800586e:	430a      	orrs	r2, r1
 8005870:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d106      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800587a:	4b31      	ldr	r3, [pc, #196]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	4b30      	ldr	r3, [pc, #192]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	0249      	lsls	r1, r1, #9
 8005884:	430a      	orrs	r2, r1
 8005886:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2380      	movs	r3, #128	; 0x80
 800588e:	019b      	lsls	r3, r3, #6
 8005890:	4013      	ands	r3, r2
 8005892:	d014      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	220c      	movs	r2, #12
 800589a:	4393      	bics	r3, r2
 800589c:	0019      	movs	r1, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058a2:	4b27      	ldr	r3, [pc, #156]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058a4:	430a      	orrs	r2, r1
 80058a6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d106      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058b0:	4b23      	ldr	r3, [pc, #140]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	4b22      	ldr	r3, [pc, #136]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058b6:	2180      	movs	r1, #128	; 0x80
 80058b8:	0249      	lsls	r1, r1, #9
 80058ba:	430a      	orrs	r2, r1
 80058bc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	2380      	movs	r3, #128	; 0x80
 80058c4:	045b      	lsls	r3, r3, #17
 80058c6:	4013      	ands	r3, r2
 80058c8:	d016      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058ca:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ce:	4a22      	ldr	r2, [pc, #136]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	0019      	movs	r1, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058da:	430a      	orrs	r2, r1
 80058dc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	019b      	lsls	r3, r3, #6
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d106      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80058ea:	4b15      	ldr	r3, [pc, #84]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	0449      	lsls	r1, r1, #17
 80058f4:	430a      	orrs	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	049b      	lsls	r3, r3, #18
 8005900:	4013      	ands	r3, r2
 8005902:	d016      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005904:	4b0e      	ldr	r3, [pc, #56]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	4a10      	ldr	r2, [pc, #64]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800590a:	4013      	ands	r3, r2
 800590c:	0019      	movs	r1, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005914:	430a      	orrs	r2, r1
 8005916:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800591c:	2380      	movs	r3, #128	; 0x80
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	429a      	cmp	r2, r3
 8005922:	d106      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	0449      	lsls	r1, r1, #17
 800592e:	430a      	orrs	r2, r1
 8005930:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005932:	2312      	movs	r3, #18
 8005934:	18fb      	adds	r3, r7, r3
 8005936:	781b      	ldrb	r3, [r3, #0]
}
 8005938:	0018      	movs	r0, r3
 800593a:	46bd      	mov	sp, r7
 800593c:	b006      	add	sp, #24
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40021000 	.word	0x40021000
 8005944:	efffffff 	.word	0xefffffff
 8005948:	fffff3ff 	.word	0xfffff3ff
 800594c:	fffffcff 	.word	0xfffffcff
 8005950:	fff3ffff 	.word	0xfff3ffff
 8005954:	ffcfffff 	.word	0xffcfffff
 8005958:	ffffcfff 	.word	0xffffcfff
 800595c:	ffff3fff 	.word	0xffff3fff
 8005960:	ffbfffff 	.word	0xffbfffff
 8005964:	feffffff 	.word	0xfeffffff

08005968 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d101      	bne.n	800597a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0a8      	b.n	8005acc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	2382      	movs	r3, #130	; 0x82
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	429a      	cmp	r2, r3
 800598c:	d009      	beq.n	80059a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	61da      	str	r2, [r3, #28]
 8005994:	e005      	b.n	80059a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	225d      	movs	r2, #93	; 0x5d
 80059ac:	5c9b      	ldrb	r3, [r3, r2]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d107      	bne.n	80059c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	225c      	movs	r2, #92	; 0x5c
 80059b8:	2100      	movs	r1, #0
 80059ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	0018      	movs	r0, r3
 80059c0:	f7fd fc68 	bl	8003294 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	225d      	movs	r2, #93	; 0x5d
 80059c8:	2102      	movs	r1, #2
 80059ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2140      	movs	r1, #64	; 0x40
 80059d8:	438a      	bics	r2, r1
 80059da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	23e0      	movs	r3, #224	; 0xe0
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d902      	bls.n	80059ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	e002      	b.n	80059f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	015b      	lsls	r3, r3, #5
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	23f0      	movs	r3, #240	; 0xf0
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d008      	beq.n	8005a12 <HAL_SPI_Init+0xaa>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	23e0      	movs	r3, #224	; 0xe0
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d002      	beq.n	8005a12 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	2382      	movs	r3, #130	; 0x82
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	2384      	movs	r3, #132	; 0x84
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	400b      	ands	r3, r1
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2102      	movs	r1, #2
 8005a2e:	400b      	ands	r3, r1
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	2101      	movs	r1, #1
 8005a38:	400b      	ands	r3, r1
 8005a3a:	431a      	orrs	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6999      	ldr	r1, [r3, #24]
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	400b      	ands	r3, r1
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	2138      	movs	r1, #56	; 0x38
 8005a4e:	400b      	ands	r3, r1
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	400b      	ands	r3, r1
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	0011      	movs	r1, r2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	019b      	lsls	r3, r3, #6
 8005a66:	401a      	ands	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	2204      	movs	r2, #4
 8005a78:	401a      	ands	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	2110      	movs	r1, #16
 8005a80:	400b      	ands	r3, r1
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a88:	2108      	movs	r1, #8
 8005a8a:	400b      	ands	r3, r1
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68d9      	ldr	r1, [r3, #12]
 8005a92:	23f0      	movs	r3, #240	; 0xf0
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	400b      	ands	r3, r1
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	0011      	movs	r1, r2
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	2380      	movs	r3, #128	; 0x80
 8005aa0:	015b      	lsls	r3, r3, #5
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4907      	ldr	r1, [pc, #28]	; (8005ad4 <HAL_SPI_Init+0x16c>)
 8005ab8:	400a      	ands	r2, r1
 8005aba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	225d      	movs	r2, #93	; 0x5d
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b004      	add	sp, #16
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	fffff7ff 	.word	0xfffff7ff

08005ad8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ae8:	231f      	movs	r3, #31
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	225c      	movs	r2, #92	; 0x5c
 8005af4:	5c9b      	ldrb	r3, [r3, r2]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_SPI_Transmit+0x26>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e140      	b.n	8005d80 <HAL_SPI_Transmit+0x2a8>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	225c      	movs	r2, #92	; 0x5c
 8005b02:	2101      	movs	r1, #1
 8005b04:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b06:	f7fd fd6b 	bl	80035e0 <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005b0e:	2316      	movs	r3, #22
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	1dba      	adds	r2, r7, #6
 8005b14:	8812      	ldrh	r2, [r2, #0]
 8005b16:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	225d      	movs	r2, #93	; 0x5d
 8005b1c:	5c9b      	ldrb	r3, [r3, r2]
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d004      	beq.n	8005b2e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005b24:	231f      	movs	r3, #31
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	2202      	movs	r2, #2
 8005b2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b2c:	e11d      	b.n	8005d6a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_SPI_Transmit+0x64>
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005b3c:	231f      	movs	r3, #31
 8005b3e:	18fb      	adds	r3, r7, r3
 8005b40:	2201      	movs	r2, #1
 8005b42:	701a      	strb	r2, [r3, #0]
    goto error;
 8005b44:	e111      	b.n	8005d6a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	225d      	movs	r2, #93	; 0x5d
 8005b4a:	2103      	movs	r1, #3
 8005b4c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1dba      	adds	r2, r7, #6
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1dba      	adds	r2, r7, #6
 8005b66:	8812      	ldrh	r2, [r2, #0]
 8005b68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2244      	movs	r2, #68	; 0x44
 8005b74:	2100      	movs	r1, #0
 8005b76:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2246      	movs	r2, #70	; 0x46
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d110      	bne.n	8005bba <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	438a      	bics	r2, r1
 8005ba6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2180      	movs	r1, #128	; 0x80
 8005bb4:	01c9      	lsls	r1, r1, #7
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2240      	movs	r2, #64	; 0x40
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b40      	cmp	r3, #64	; 0x40
 8005bc6:	d007      	beq.n	8005bd8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2140      	movs	r1, #64	; 0x40
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	23e0      	movs	r3, #224	; 0xe0
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d94e      	bls.n	8005c82 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d004      	beq.n	8005bf6 <HAL_SPI_Transmit+0x11e>
 8005bec:	2316      	movs	r3, #22
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d13f      	bne.n	8005c76 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	881a      	ldrh	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	1c9a      	adds	r2, r3, #2
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c1a:	e02c      	b.n	8005c76 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2202      	movs	r2, #2
 8005c24:	4013      	ands	r3, r2
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d112      	bne.n	8005c50 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	881a      	ldrh	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	1c9a      	adds	r2, r3, #2
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c4e:	e012      	b.n	8005c76 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c50:	f7fd fcc6 	bl	80035e0 <HAL_GetTick>
 8005c54:	0002      	movs	r2, r0
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d802      	bhi.n	8005c66 <HAL_SPI_Transmit+0x18e>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	d102      	bne.n	8005c6c <HAL_SPI_Transmit+0x194>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005c6c:	231f      	movs	r3, #31
 8005c6e:	18fb      	adds	r3, r7, r3
 8005c70:	2203      	movs	r2, #3
 8005c72:	701a      	strb	r2, [r3, #0]
          goto error;
 8005c74:	e079      	b.n	8005d6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1cd      	bne.n	8005c1c <HAL_SPI_Transmit+0x144>
 8005c80:	e04f      	b.n	8005d22 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <HAL_SPI_Transmit+0x1bc>
 8005c8a:	2316      	movs	r3, #22
 8005c8c:	18fb      	adds	r3, r7, r3
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d141      	bne.n	8005d18 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005cba:	e02d      	b.n	8005d18 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d113      	bne.n	8005cf2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cf0:	e012      	b.n	8005d18 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf2:	f7fd fc75 	bl	80035e0 <HAL_GetTick>
 8005cf6:	0002      	movs	r2, r0
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d802      	bhi.n	8005d08 <HAL_SPI_Transmit+0x230>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	d102      	bne.n	8005d0e <HAL_SPI_Transmit+0x236>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005d0e:	231f      	movs	r3, #31
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	2203      	movs	r2, #3
 8005d14:	701a      	strb	r2, [r3, #0]
          goto error;
 8005d16:	e028      	b.n	8005d6a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1cc      	bne.n	8005cbc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f000 fce5 	bl	80066f8 <SPI_EndRxTxTransaction>
 8005d2e:	1e03      	subs	r3, r0, #0
 8005d30:	d002      	beq.n	8005d38 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10a      	bne.n	8005d56 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d40:	2300      	movs	r3, #0
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005d5e:	231f      	movs	r3, #31
 8005d60:	18fb      	adds	r3, r7, r3
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e000      	b.n	8005d6a <HAL_SPI_Transmit+0x292>
  }

error:
 8005d68:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	225d      	movs	r2, #93	; 0x5d
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	225c      	movs	r2, #92	; 0x5c
 8005d76:	2100      	movs	r1, #0
 8005d78:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005d7a:	231f      	movs	r3, #31
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	781b      	ldrb	r3, [r3, #0]
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b008      	add	sp, #32
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b089      	sub	sp, #36	; 0x24
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	1dbb      	adds	r3, r7, #6
 8005d96:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d98:	2317      	movs	r3, #23
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	2382      	movs	r3, #130	; 0x82
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d113      	bne.n	8005dd4 <HAL_SPI_Receive+0x4c>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10f      	bne.n	8005dd4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	225d      	movs	r2, #93	; 0x5d
 8005db8:	2104      	movs	r1, #4
 8005dba:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dbc:	1dbb      	adds	r3, r7, #6
 8005dbe:	881c      	ldrh	r4, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68b9      	ldr	r1, [r7, #8]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	0023      	movs	r3, r4
 8005dcc:	f000 f928 	bl	8006020 <HAL_SPI_TransmitReceive>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	e11c      	b.n	800600e <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	225c      	movs	r2, #92	; 0x5c
 8005dd8:	5c9b      	ldrb	r3, [r3, r2]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d101      	bne.n	8005de2 <HAL_SPI_Receive+0x5a>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e115      	b.n	800600e <HAL_SPI_Receive+0x286>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	225c      	movs	r2, #92	; 0x5c
 8005de6:	2101      	movs	r1, #1
 8005de8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dea:	f7fd fbf9 	bl	80035e0 <HAL_GetTick>
 8005dee:	0003      	movs	r3, r0
 8005df0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	225d      	movs	r2, #93	; 0x5d
 8005df6:	5c9b      	ldrb	r3, [r3, r2]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d004      	beq.n	8005e08 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005dfe:	2317      	movs	r3, #23
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	2202      	movs	r2, #2
 8005e04:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e06:	e0f7      	b.n	8005ff8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_SPI_Receive+0x8e>
 8005e0e:	1dbb      	adds	r3, r7, #6
 8005e10:	881b      	ldrh	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d104      	bne.n	8005e20 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005e16:	2317      	movs	r3, #23
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e1e:	e0eb      	b.n	8005ff8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	225d      	movs	r2, #93	; 0x5d
 8005e24:	2104      	movs	r1, #4
 8005e26:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1dba      	adds	r2, r7, #6
 8005e38:	2144      	movs	r1, #68	; 0x44
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1dba      	adds	r2, r7, #6
 8005e42:	2146      	movs	r1, #70	; 0x46
 8005e44:	8812      	ldrh	r2, [r2, #0]
 8005e46:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	23e0      	movs	r3, #224	; 0xe0
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d908      	bls.n	8005e84 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4966      	ldr	r1, [pc, #408]	; (8006018 <HAL_SPI_Receive+0x290>)
 8005e7e:	400a      	ands	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	e008      	b.n	8005e96 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2180      	movs	r1, #128	; 0x80
 8005e90:	0149      	lsls	r1, r1, #5
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2140      	movs	r1, #64	; 0x40
 8005eae:	438a      	bics	r2, r1
 8005eb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4957      	ldr	r1, [pc, #348]	; (800601c <HAL_SPI_Receive+0x294>)
 8005ebe:	400a      	ands	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2240      	movs	r2, #64	; 0x40
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d007      	beq.n	8005ee0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2140      	movs	r1, #64	; 0x40
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	23e0      	movs	r3, #224	; 0xe0
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d900      	bls.n	8005eee <HAL_SPI_Receive+0x166>
 8005eec:	e069      	b.n	8005fc2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005eee:	e031      	b.n	8005f54 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d117      	bne.n	8005f2e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	330c      	adds	r3, #12
 8005f04:	001a      	movs	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	7812      	ldrb	r2, [r2, #0]
 8005f0c:	b2d2      	uxtb	r2, r2
 8005f0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2246      	movs	r2, #70	; 0x46
 8005f1e:	5a9b      	ldrh	r3, [r3, r2]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	3b01      	subs	r3, #1
 8005f24:	b299      	uxth	r1, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2246      	movs	r2, #70	; 0x46
 8005f2a:	5299      	strh	r1, [r3, r2]
 8005f2c:	e012      	b.n	8005f54 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f2e:	f7fd fb57 	bl	80035e0 <HAL_GetTick>
 8005f32:	0002      	movs	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d802      	bhi.n	8005f44 <HAL_SPI_Receive+0x1bc>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	d102      	bne.n	8005f4a <HAL_SPI_Receive+0x1c2>
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8005f4a:	2317      	movs	r3, #23
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	2203      	movs	r2, #3
 8005f50:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f52:	e051      	b.n	8005ff8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2246      	movs	r2, #70	; 0x46
 8005f58:	5a9b      	ldrh	r3, [r3, r2]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1c7      	bne.n	8005ef0 <HAL_SPI_Receive+0x168>
 8005f60:	e035      	b.n	8005fce <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d115      	bne.n	8005f9c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	b292      	uxth	r2, r2
 8005f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	1c9a      	adds	r2, r3, #2
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2246      	movs	r2, #70	; 0x46
 8005f8c:	5a9b      	ldrh	r3, [r3, r2]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b299      	uxth	r1, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2246      	movs	r2, #70	; 0x46
 8005f98:	5299      	strh	r1, [r3, r2]
 8005f9a:	e012      	b.n	8005fc2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f9c:	f7fd fb20 	bl	80035e0 <HAL_GetTick>
 8005fa0:	0002      	movs	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d802      	bhi.n	8005fb2 <HAL_SPI_Receive+0x22a>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	d102      	bne.n	8005fb8 <HAL_SPI_Receive+0x230>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005fb8:	2317      	movs	r3, #23
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	2203      	movs	r2, #3
 8005fbe:	701a      	strb	r2, [r3, #0]
          goto error;
 8005fc0:	e01a      	b.n	8005ff8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2246      	movs	r2, #70	; 0x46
 8005fc6:	5a9b      	ldrh	r3, [r3, r2]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1c9      	bne.n	8005f62 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f000 fb31 	bl	800663c <SPI_EndRxTransaction>
 8005fda:	1e03      	subs	r3, r0, #0
 8005fdc:	d002      	beq.n	8005fe4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005fec:	2317      	movs	r3, #23
 8005fee:	18fb      	adds	r3, r7, r3
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	e000      	b.n	8005ff8 <HAL_SPI_Receive+0x270>
  }

error :
 8005ff6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	225d      	movs	r2, #93	; 0x5d
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	225c      	movs	r2, #92	; 0x5c
 8006004:	2100      	movs	r1, #0
 8006006:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006008:	2317      	movs	r3, #23
 800600a:	18fb      	adds	r3, r7, r3
 800600c:	781b      	ldrb	r3, [r3, #0]
}
 800600e:	0018      	movs	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	b007      	add	sp, #28
 8006014:	bd90      	pop	{r4, r7, pc}
 8006016:	46c0      	nop			; (mov r8, r8)
 8006018:	ffffefff 	.word	0xffffefff
 800601c:	ffffbfff 	.word	0xffffbfff

08006020 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
 800602c:	001a      	movs	r2, r3
 800602e:	1cbb      	adds	r3, r7, #2
 8006030:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006032:	2301      	movs	r3, #1
 8006034:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006036:	2323      	movs	r3, #35	; 0x23
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	2200      	movs	r2, #0
 800603c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	225c      	movs	r2, #92	; 0x5c
 8006042:	5c9b      	ldrb	r3, [r3, r2]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_SPI_TransmitReceive+0x2c>
 8006048:	2302      	movs	r3, #2
 800604a:	e1b5      	b.n	80063b8 <HAL_SPI_TransmitReceive+0x398>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	225c      	movs	r2, #92	; 0x5c
 8006050:	2101      	movs	r1, #1
 8006052:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006054:	f7fd fac4 	bl	80035e0 <HAL_GetTick>
 8006058:	0003      	movs	r3, r0
 800605a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800605c:	201b      	movs	r0, #27
 800605e:	183b      	adds	r3, r7, r0
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	215d      	movs	r1, #93	; 0x5d
 8006064:	5c52      	ldrb	r2, [r2, r1]
 8006066:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800606e:	2312      	movs	r3, #18
 8006070:	18fb      	adds	r3, r7, r3
 8006072:	1cba      	adds	r2, r7, #2
 8006074:	8812      	ldrh	r2, [r2, #0]
 8006076:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006078:	183b      	adds	r3, r7, r0
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d011      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x84>
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	2382      	movs	r3, #130	; 0x82
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	429a      	cmp	r2, r3
 8006088:	d107      	bne.n	800609a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d103      	bne.n	800609a <HAL_SPI_TransmitReceive+0x7a>
 8006092:	183b      	adds	r3, r7, r0
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d004      	beq.n	80060a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800609a:	2323      	movs	r3, #35	; 0x23
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	2202      	movs	r2, #2
 80060a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80060a2:	e17e      	b.n	80063a2 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x98>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x98>
 80060b0:	1cbb      	adds	r3, r7, #2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80060b8:	2323      	movs	r3, #35	; 0x23
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	2201      	movs	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
    goto error;
 80060c0:	e16f      	b.n	80063a2 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	225d      	movs	r2, #93	; 0x5d
 80060c6:	5c9b      	ldrb	r3, [r3, r2]
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d003      	beq.n	80060d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	225d      	movs	r2, #93	; 0x5d
 80060d2:	2105      	movs	r1, #5
 80060d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1cba      	adds	r2, r7, #2
 80060e6:	2146      	movs	r1, #70	; 0x46
 80060e8:	8812      	ldrh	r2, [r2, #0]
 80060ea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	1cba      	adds	r2, r7, #2
 80060f0:	2144      	movs	r1, #68	; 0x44
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	1cba      	adds	r2, r7, #2
 8006100:	8812      	ldrh	r2, [r2, #0]
 8006102:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1cba      	adds	r2, r7, #2
 8006108:	8812      	ldrh	r2, [r2, #0]
 800610a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	23e0      	movs	r3, #224	; 0xe0
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	429a      	cmp	r2, r3
 8006122:	d908      	bls.n	8006136 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	49a4      	ldr	r1, [pc, #656]	; (80063c0 <HAL_SPI_TransmitReceive+0x3a0>)
 8006130:	400a      	ands	r2, r1
 8006132:	605a      	str	r2, [r3, #4]
 8006134:	e008      	b.n	8006148 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	0149      	lsls	r1, r1, #5
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2240      	movs	r2, #64	; 0x40
 8006150:	4013      	ands	r3, r2
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d007      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	23e0      	movs	r3, #224	; 0xe0
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	429a      	cmp	r2, r3
 8006170:	d800      	bhi.n	8006174 <HAL_SPI_TransmitReceive+0x154>
 8006172:	e07f      	b.n	8006274 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d005      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x168>
 800617c:	2312      	movs	r3, #18
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d000      	beq.n	8006188 <HAL_SPI_TransmitReceive+0x168>
 8006186:	e069      	b.n	800625c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006198:	1c9a      	adds	r2, r3, #2
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	3b01      	subs	r3, #1
 80061a6:	b29a      	uxth	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ac:	e056      	b.n	800625c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	2202      	movs	r2, #2
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d11b      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1d4>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_SPI_TransmitReceive+0x1d4>
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d113      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	881a      	ldrh	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	2201      	movs	r2, #1
 80061fc:	4013      	ands	r3, r2
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d11c      	bne.n	800623c <HAL_SPI_TransmitReceive+0x21c>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2246      	movs	r2, #70	; 0x46
 8006206:	5a9b      	ldrh	r3, [r3, r2]
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d016      	beq.n	800623c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	b292      	uxth	r2, r2
 800621a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2246      	movs	r2, #70	; 0x46
 800622a:	5a9b      	ldrh	r3, [r3, r2]
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b299      	uxth	r1, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2246      	movs	r2, #70	; 0x46
 8006236:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006238:	2301      	movs	r3, #1
 800623a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800623c:	f7fd f9d0 	bl	80035e0 <HAL_GetTick>
 8006240:	0002      	movs	r2, r0
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006248:	429a      	cmp	r2, r3
 800624a:	d807      	bhi.n	800625c <HAL_SPI_TransmitReceive+0x23c>
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	3301      	adds	r3, #1
 8006250:	d004      	beq.n	800625c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006252:	2323      	movs	r3, #35	; 0x23
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	2203      	movs	r2, #3
 8006258:	701a      	strb	r2, [r3, #0]
        goto error;
 800625a:	e0a2      	b.n	80063a2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1a3      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x18e>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2246      	movs	r2, #70	; 0x46
 800626a:	5a9b      	ldrh	r3, [r3, r2]
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d19d      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x18e>
 8006272:	e085      	b.n	8006380 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x268>
 800627c:	2312      	movs	r3, #18
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d000      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x268>
 8006286:	e070      	b.n	800636a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	7812      	ldrb	r2, [r2, #0]
 8006294:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062ae:	e05c      	b.n	800636a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2202      	movs	r2, #2
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d11c      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2d8>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d017      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x2d8>
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d114      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	330c      	adds	r3, #12
 80062d8:	7812      	ldrb	r2, [r2, #0]
 80062da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2201      	movs	r2, #1
 8006300:	4013      	ands	r3, r2
 8006302:	2b01      	cmp	r3, #1
 8006304:	d11e      	bne.n	8006344 <HAL_SPI_TransmitReceive+0x324>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2246      	movs	r2, #70	; 0x46
 800630a:	5a9b      	ldrh	r3, [r3, r2]
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	330c      	adds	r3, #12
 8006318:	001a      	movs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	7812      	ldrb	r2, [r2, #0]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2246      	movs	r2, #70	; 0x46
 8006332:	5a9b      	ldrh	r3, [r3, r2]
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b299      	uxth	r1, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2246      	movs	r2, #70	; 0x46
 800633e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006340:	2301      	movs	r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006344:	f7fd f94c 	bl	80035e0 <HAL_GetTick>
 8006348:	0002      	movs	r2, r0
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006350:	429a      	cmp	r2, r3
 8006352:	d802      	bhi.n	800635a <HAL_SPI_TransmitReceive+0x33a>
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	3301      	adds	r3, #1
 8006358:	d102      	bne.n	8006360 <HAL_SPI_TransmitReceive+0x340>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006360:	2323      	movs	r3, #35	; 0x23
 8006362:	18fb      	adds	r3, r7, r3
 8006364:	2203      	movs	r2, #3
 8006366:	701a      	strb	r2, [r3, #0]
        goto error;
 8006368:	e01b      	b.n	80063a2 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d19d      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x290>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2246      	movs	r2, #70	; 0x46
 8006378:	5a9b      	ldrh	r3, [r3, r2]
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d197      	bne.n	80062b0 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	0018      	movs	r0, r3
 8006388:	f000 f9b6 	bl	80066f8 <SPI_EndRxTxTransaction>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d007      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006390:	2323      	movs	r3, #35	; 0x23
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	661a      	str	r2, [r3, #96]	; 0x60
 800639e:	e000      	b.n	80063a2 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80063a0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	225d      	movs	r2, #93	; 0x5d
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	225c      	movs	r2, #92	; 0x5c
 80063ae:	2100      	movs	r1, #0
 80063b0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80063b2:	2323      	movs	r3, #35	; 0x23
 80063b4:	18fb      	adds	r3, r7, r3
 80063b6:	781b      	ldrb	r3, [r3, #0]
}
 80063b8:	0018      	movs	r0, r3
 80063ba:	46bd      	mov	sp, r7
 80063bc:	b00a      	add	sp, #40	; 0x28
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	ffffefff 	.word	0xffffefff

080063c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	225d      	movs	r2, #93	; 0x5d
 80063d0:	5c9b      	ldrb	r3, [r3, r2]
 80063d2:	b2db      	uxtb	r3, r3
}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b002      	add	sp, #8
 80063da:	bd80      	pop	{r7, pc}

080063dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	1dfb      	adds	r3, r7, #7
 80063ea:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063ec:	f7fd f8f8 	bl	80035e0 <HAL_GetTick>
 80063f0:	0002      	movs	r2, r0
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	1a9b      	subs	r3, r3, r2
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	18d3      	adds	r3, r2, r3
 80063fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063fc:	f7fd f8f0 	bl	80035e0 <HAL_GetTick>
 8006400:	0003      	movs	r3, r0
 8006402:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006404:	4b3a      	ldr	r3, [pc, #232]	; (80064f0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	015b      	lsls	r3, r3, #5
 800640a:	0d1b      	lsrs	r3, r3, #20
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	4353      	muls	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006412:	e058      	b.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	3301      	adds	r3, #1
 8006418:	d055      	beq.n	80064c6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800641a:	f7fd f8e1 	bl	80035e0 <HAL_GetTick>
 800641e:	0002      	movs	r2, r0
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	429a      	cmp	r2, r3
 8006428:	d902      	bls.n	8006430 <SPI_WaitFlagStateUntilTimeout+0x54>
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d142      	bne.n	80064b6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	21e0      	movs	r1, #224	; 0xe0
 800643c:	438a      	bics	r2, r1
 800643e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	2382      	movs	r3, #130	; 0x82
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	429a      	cmp	r2, r3
 800644a:	d113      	bne.n	8006474 <SPI_WaitFlagStateUntilTimeout+0x98>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	2380      	movs	r3, #128	; 0x80
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	429a      	cmp	r2, r3
 8006456:	d005      	beq.n	8006464 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	2380      	movs	r3, #128	; 0x80
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	429a      	cmp	r2, r3
 8006462:	d107      	bne.n	8006474 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2140      	movs	r1, #64	; 0x40
 8006470:	438a      	bics	r2, r1
 8006472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006478:	2380      	movs	r3, #128	; 0x80
 800647a:	019b      	lsls	r3, r3, #6
 800647c:	429a      	cmp	r2, r3
 800647e:	d110      	bne.n	80064a2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	491a      	ldr	r1, [pc, #104]	; (80064f4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800648c:	400a      	ands	r2, r1
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	0189      	lsls	r1, r1, #6
 800649e:	430a      	orrs	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	225d      	movs	r2, #93	; 0x5d
 80064a6:	2101      	movs	r1, #1
 80064a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	225c      	movs	r2, #92	; 0x5c
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e017      	b.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	3b01      	subs	r3, #1
 80064c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	425a      	negs	r2, r3
 80064d6:	4153      	adcs	r3, r2
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	001a      	movs	r2, r3
 80064dc:	1dfb      	adds	r3, r7, #7
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d197      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b008      	add	sp, #32
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	20000000 	.word	0x20000000
 80064f4:	ffffdfff 	.word	0xffffdfff

080064f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006506:	2317      	movs	r3, #23
 8006508:	18fb      	adds	r3, r7, r3
 800650a:	2200      	movs	r2, #0
 800650c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800650e:	f7fd f867 	bl	80035e0 <HAL_GetTick>
 8006512:	0002      	movs	r2, r0
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	18d3      	adds	r3, r2, r3
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800651e:	f7fd f85f 	bl	80035e0 <HAL_GetTick>
 8006522:	0003      	movs	r3, r0
 8006524:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800652e:	4b41      	ldr	r3, [pc, #260]	; (8006634 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	0013      	movs	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	189b      	adds	r3, r3, r2
 8006538:	00da      	lsls	r2, r3, #3
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	0d1b      	lsrs	r3, r3, #20
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	4353      	muls	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006544:	e068      	b.n	8006618 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	23c0      	movs	r3, #192	; 0xc0
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	429a      	cmp	r2, r3
 800654e:	d10a      	bne.n	8006566 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d107      	bne.n	8006566 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	b2da      	uxtb	r2, r3
 800655c:	2117      	movs	r1, #23
 800655e:	187b      	adds	r3, r7, r1
 8006560:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006562:	187b      	adds	r3, r7, r1
 8006564:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	d055      	beq.n	8006618 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800656c:	f7fd f838 	bl	80035e0 <HAL_GetTick>
 8006570:	0002      	movs	r2, r0
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006578:	429a      	cmp	r2, r3
 800657a:	d902      	bls.n	8006582 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b00      	cmp	r3, #0
 8006580:	d142      	bne.n	8006608 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	21e0      	movs	r1, #224	; 0xe0
 800658e:	438a      	bics	r2, r1
 8006590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	2382      	movs	r3, #130	; 0x82
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	429a      	cmp	r2, r3
 800659c:	d113      	bne.n	80065c6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d005      	beq.n	80065b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689a      	ldr	r2, [r3, #8]
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d107      	bne.n	80065c6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2140      	movs	r1, #64	; 0x40
 80065c2:	438a      	bics	r2, r1
 80065c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065ca:	2380      	movs	r3, #128	; 0x80
 80065cc:	019b      	lsls	r3, r3, #6
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d110      	bne.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4916      	ldr	r1, [pc, #88]	; (8006638 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80065de:	400a      	ands	r2, r1
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2180      	movs	r1, #128	; 0x80
 80065ee:	0189      	lsls	r1, r1, #6
 80065f0:	430a      	orrs	r2, r1
 80065f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	225d      	movs	r2, #93	; 0x5d
 80065f8:	2101      	movs	r1, #1
 80065fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	225c      	movs	r2, #92	; 0x5c
 8006600:	2100      	movs	r1, #0
 8006602:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e010      	b.n	800662a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	3b01      	subs	r3, #1
 8006616:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	4013      	ands	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	429a      	cmp	r2, r3
 8006626:	d18e      	bne.n	8006546 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	0018      	movs	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	b00a      	add	sp, #40	; 0x28
 8006630:	bd80      	pop	{r7, pc}
 8006632:	46c0      	nop			; (mov r8, r8)
 8006634:	20000000 	.word	0x20000000
 8006638:	ffffdfff 	.word	0xffffdfff

0800663c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af02      	add	r7, sp, #8
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	2382      	movs	r3, #130	; 0x82
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	429a      	cmp	r2, r3
 8006652:	d113      	bne.n	800667c <SPI_EndRxTransaction+0x40>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	429a      	cmp	r2, r3
 800665e:	d005      	beq.n	800666c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	2380      	movs	r3, #128	; 0x80
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	429a      	cmp	r2, r3
 800666a:	d107      	bne.n	800667c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2140      	movs	r1, #64	; 0x40
 8006678:	438a      	bics	r2, r1
 800667a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	0013      	movs	r3, r2
 8006686:	2200      	movs	r2, #0
 8006688:	2180      	movs	r1, #128	; 0x80
 800668a:	f7ff fea7 	bl	80063dc <SPI_WaitFlagStateUntilTimeout>
 800668e:	1e03      	subs	r3, r0, #0
 8006690:	d007      	beq.n	80066a2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006696:	2220      	movs	r2, #32
 8006698:	431a      	orrs	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e026      	b.n	80066f0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	2382      	movs	r3, #130	; 0x82
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d11f      	bne.n	80066ee <SPI_EndRxTransaction+0xb2>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	2380      	movs	r3, #128	; 0x80
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d005      	beq.n	80066c6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689a      	ldr	r2, [r3, #8]
 80066be:	2380      	movs	r3, #128	; 0x80
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d113      	bne.n	80066ee <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	23c0      	movs	r3, #192	; 0xc0
 80066ca:	00d9      	lsls	r1, r3, #3
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	0013      	movs	r3, r2
 80066d4:	2200      	movs	r2, #0
 80066d6:	f7ff ff0f 	bl	80064f8 <SPI_WaitFifoStateUntilTimeout>
 80066da:	1e03      	subs	r3, r0, #0
 80066dc:	d007      	beq.n	80066ee <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e2:	2220      	movs	r2, #32
 80066e4:	431a      	orrs	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e000      	b.n	80066f0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	0018      	movs	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	23c0      	movs	r3, #192	; 0xc0
 8006708:	0159      	lsls	r1, r3, #5
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	0013      	movs	r3, r2
 8006712:	2200      	movs	r2, #0
 8006714:	f7ff fef0 	bl	80064f8 <SPI_WaitFifoStateUntilTimeout>
 8006718:	1e03      	subs	r3, r0, #0
 800671a:	d007      	beq.n	800672c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006720:	2220      	movs	r2, #32
 8006722:	431a      	orrs	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e027      	b.n	800677c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	0013      	movs	r3, r2
 8006736:	2200      	movs	r2, #0
 8006738:	2180      	movs	r1, #128	; 0x80
 800673a:	f7ff fe4f 	bl	80063dc <SPI_WaitFlagStateUntilTimeout>
 800673e:	1e03      	subs	r3, r0, #0
 8006740:	d007      	beq.n	8006752 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	2220      	movs	r2, #32
 8006748:	431a      	orrs	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e014      	b.n	800677c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	23c0      	movs	r3, #192	; 0xc0
 8006756:	00d9      	lsls	r1, r3, #3
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	9300      	str	r3, [sp, #0]
 800675e:	0013      	movs	r3, r2
 8006760:	2200      	movs	r2, #0
 8006762:	f7ff fec9 	bl	80064f8 <SPI_WaitFifoStateUntilTimeout>
 8006766:	1e03      	subs	r3, r0, #0
 8006768:	d007      	beq.n	800677a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	2220      	movs	r2, #32
 8006770:	431a      	orrs	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e000      	b.n	800677c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	0018      	movs	r0, r3
 800677e:	46bd      	mov	sp, r7
 8006780:	b004      	add	sp, #16
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e04a      	b.n	800682c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	223d      	movs	r2, #61	; 0x3d
 800679a:	5c9b      	ldrb	r3, [r3, r2]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d107      	bne.n	80067b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	223c      	movs	r2, #60	; 0x3c
 80067a6:	2100      	movs	r1, #0
 80067a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	0018      	movs	r0, r3
 80067ae:	f7fc fdbb 	bl	8003328 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	223d      	movs	r2, #61	; 0x3d
 80067b6:	2102      	movs	r1, #2
 80067b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3304      	adds	r3, #4
 80067c2:	0019      	movs	r1, r3
 80067c4:	0010      	movs	r0, r2
 80067c6:	f000 fcfb 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2248      	movs	r2, #72	; 0x48
 80067ce:	2101      	movs	r1, #1
 80067d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	223e      	movs	r2, #62	; 0x3e
 80067d6:	2101      	movs	r1, #1
 80067d8:	5499      	strb	r1, [r3, r2]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	223f      	movs	r2, #63	; 0x3f
 80067de:	2101      	movs	r1, #1
 80067e0:	5499      	strb	r1, [r3, r2]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2240      	movs	r2, #64	; 0x40
 80067e6:	2101      	movs	r1, #1
 80067e8:	5499      	strb	r1, [r3, r2]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2241      	movs	r2, #65	; 0x41
 80067ee:	2101      	movs	r1, #1
 80067f0:	5499      	strb	r1, [r3, r2]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2242      	movs	r2, #66	; 0x42
 80067f6:	2101      	movs	r1, #1
 80067f8:	5499      	strb	r1, [r3, r2]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2243      	movs	r2, #67	; 0x43
 80067fe:	2101      	movs	r1, #1
 8006800:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2244      	movs	r2, #68	; 0x44
 8006806:	2101      	movs	r1, #1
 8006808:	5499      	strb	r1, [r3, r2]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2245      	movs	r2, #69	; 0x45
 800680e:	2101      	movs	r1, #1
 8006810:	5499      	strb	r1, [r3, r2]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2246      	movs	r2, #70	; 0x46
 8006816:	2101      	movs	r1, #1
 8006818:	5499      	strb	r1, [r3, r2]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2247      	movs	r2, #71	; 0x47
 800681e:	2101      	movs	r1, #1
 8006820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	223d      	movs	r2, #61	; 0x3d
 8006826:	2101      	movs	r1, #1
 8006828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	0018      	movs	r0, r3
 800682e:	46bd      	mov	sp, r7
 8006830:	b002      	add	sp, #8
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	223d      	movs	r2, #61	; 0x3d
 8006840:	5c9b      	ldrb	r3, [r3, r2]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d001      	beq.n	800684c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e047      	b.n	80068dc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	223d      	movs	r2, #61	; 0x3d
 8006850:	2102      	movs	r1, #2
 8006852:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68da      	ldr	r2, [r3, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2101      	movs	r1, #1
 8006860:	430a      	orrs	r2, r1
 8006862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d014      	beq.n	8006898 <HAL_TIM_Base_Start_IT+0x64>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	2380      	movs	r3, #128	; 0x80
 8006874:	05db      	lsls	r3, r3, #23
 8006876:	429a      	cmp	r2, r3
 8006878:	d00e      	beq.n	8006898 <HAL_TIM_Base_Start_IT+0x64>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a1a      	ldr	r2, [pc, #104]	; (80068e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d009      	beq.n	8006898 <HAL_TIM_Base_Start_IT+0x64>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a18      	ldr	r2, [pc, #96]	; (80068ec <HAL_TIM_Base_Start_IT+0xb8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d004      	beq.n	8006898 <HAL_TIM_Base_Start_IT+0x64>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a17      	ldr	r2, [pc, #92]	; (80068f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d116      	bne.n	80068c6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <HAL_TIM_Base_Start_IT+0xc0>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b06      	cmp	r3, #6
 80068a8:	d016      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0xa4>
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	2380      	movs	r3, #128	; 0x80
 80068ae:	025b      	lsls	r3, r3, #9
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d011      	beq.n	80068d8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2101      	movs	r1, #1
 80068c0:	430a      	orrs	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068c4:	e008      	b.n	80068d8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2101      	movs	r1, #1
 80068d2:	430a      	orrs	r2, r1
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	e000      	b.n	80068da <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	0018      	movs	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	b004      	add	sp, #16
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40000400 	.word	0x40000400
 80068ec:	40000800 	.word	0x40000800
 80068f0:	40014000 	.word	0x40014000
 80068f4:	00010007 	.word	0x00010007

080068f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d101      	bne.n	800690a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e04a      	b.n	80069a0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	223d      	movs	r2, #61	; 0x3d
 800690e:	5c9b      	ldrb	r3, [r3, r2]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d107      	bne.n	8006926 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	223c      	movs	r2, #60	; 0x3c
 800691a:	2100      	movs	r1, #0
 800691c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	0018      	movs	r0, r3
 8006922:	f000 f841 	bl	80069a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	223d      	movs	r2, #61	; 0x3d
 800692a:	2102      	movs	r1, #2
 800692c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	0019      	movs	r1, r3
 8006938:	0010      	movs	r0, r2
 800693a:	f000 fc41 	bl	80071c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2248      	movs	r2, #72	; 0x48
 8006942:	2101      	movs	r1, #1
 8006944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	223e      	movs	r2, #62	; 0x3e
 800694a:	2101      	movs	r1, #1
 800694c:	5499      	strb	r1, [r3, r2]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	223f      	movs	r2, #63	; 0x3f
 8006952:	2101      	movs	r1, #1
 8006954:	5499      	strb	r1, [r3, r2]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2240      	movs	r2, #64	; 0x40
 800695a:	2101      	movs	r1, #1
 800695c:	5499      	strb	r1, [r3, r2]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2241      	movs	r2, #65	; 0x41
 8006962:	2101      	movs	r1, #1
 8006964:	5499      	strb	r1, [r3, r2]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2242      	movs	r2, #66	; 0x42
 800696a:	2101      	movs	r1, #1
 800696c:	5499      	strb	r1, [r3, r2]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2243      	movs	r2, #67	; 0x43
 8006972:	2101      	movs	r1, #1
 8006974:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2244      	movs	r2, #68	; 0x44
 800697a:	2101      	movs	r1, #1
 800697c:	5499      	strb	r1, [r3, r2]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2245      	movs	r2, #69	; 0x45
 8006982:	2101      	movs	r1, #1
 8006984:	5499      	strb	r1, [r3, r2]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2246      	movs	r2, #70	; 0x46
 800698a:	2101      	movs	r1, #1
 800698c:	5499      	strb	r1, [r3, r2]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2247      	movs	r2, #71	; 0x47
 8006992:	2101      	movs	r1, #1
 8006994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	223d      	movs	r2, #61	; 0x3d
 800699a:	2101      	movs	r1, #1
 800699c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069b0:	46c0      	nop			; (mov r8, r8)
 80069b2:	46bd      	mov	sp, r7
 80069b4:	b002      	add	sp, #8
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d108      	bne.n	80069da <HAL_TIM_PWM_Start+0x22>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	223e      	movs	r2, #62	; 0x3e
 80069cc:	5c9b      	ldrb	r3, [r3, r2]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	4193      	sbcs	r3, r2
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	e037      	b.n	8006a4a <HAL_TIM_PWM_Start+0x92>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b04      	cmp	r3, #4
 80069de:	d108      	bne.n	80069f2 <HAL_TIM_PWM_Start+0x3a>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	223f      	movs	r2, #63	; 0x3f
 80069e4:	5c9b      	ldrb	r3, [r3, r2]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	3b01      	subs	r3, #1
 80069ea:	1e5a      	subs	r2, r3, #1
 80069ec:	4193      	sbcs	r3, r2
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	e02b      	b.n	8006a4a <HAL_TIM_PWM_Start+0x92>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d108      	bne.n	8006a0a <HAL_TIM_PWM_Start+0x52>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	5c9b      	ldrb	r3, [r3, r2]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	1e5a      	subs	r2, r3, #1
 8006a04:	4193      	sbcs	r3, r2
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	e01f      	b.n	8006a4a <HAL_TIM_PWM_Start+0x92>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b0c      	cmp	r3, #12
 8006a0e:	d108      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x6a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2241      	movs	r2, #65	; 0x41
 8006a14:	5c9b      	ldrb	r3, [r3, r2]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	1e5a      	subs	r2, r3, #1
 8006a1c:	4193      	sbcs	r3, r2
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e013      	b.n	8006a4a <HAL_TIM_PWM_Start+0x92>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d108      	bne.n	8006a3a <HAL_TIM_PWM_Start+0x82>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2242      	movs	r2, #66	; 0x42
 8006a2c:	5c9b      	ldrb	r3, [r3, r2]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	1e5a      	subs	r2, r3, #1
 8006a34:	4193      	sbcs	r3, r2
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	e007      	b.n	8006a4a <HAL_TIM_PWM_Start+0x92>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2243      	movs	r2, #67	; 0x43
 8006a3e:	5c9b      	ldrb	r3, [r3, r2]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	4193      	sbcs	r3, r2
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e090      	b.n	8006b74 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_Start+0xaa>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	223e      	movs	r2, #62	; 0x3e
 8006a5c:	2102      	movs	r1, #2
 8006a5e:	5499      	strb	r1, [r3, r2]
 8006a60:	e023      	b.n	8006aaa <HAL_TIM_PWM_Start+0xf2>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d104      	bne.n	8006a72 <HAL_TIM_PWM_Start+0xba>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	223f      	movs	r2, #63	; 0x3f
 8006a6c:	2102      	movs	r1, #2
 8006a6e:	5499      	strb	r1, [r3, r2]
 8006a70:	e01b      	b.n	8006aaa <HAL_TIM_PWM_Start+0xf2>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d104      	bne.n	8006a82 <HAL_TIM_PWM_Start+0xca>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2240      	movs	r2, #64	; 0x40
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	5499      	strb	r1, [r3, r2]
 8006a80:	e013      	b.n	8006aaa <HAL_TIM_PWM_Start+0xf2>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b0c      	cmp	r3, #12
 8006a86:	d104      	bne.n	8006a92 <HAL_TIM_PWM_Start+0xda>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2241      	movs	r2, #65	; 0x41
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	5499      	strb	r1, [r3, r2]
 8006a90:	e00b      	b.n	8006aaa <HAL_TIM_PWM_Start+0xf2>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b10      	cmp	r3, #16
 8006a96:	d104      	bne.n	8006aa2 <HAL_TIM_PWM_Start+0xea>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2242      	movs	r2, #66	; 0x42
 8006a9c:	2102      	movs	r1, #2
 8006a9e:	5499      	strb	r1, [r3, r2]
 8006aa0:	e003      	b.n	8006aaa <HAL_TIM_PWM_Start+0xf2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2243      	movs	r2, #67	; 0x43
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	f000 ff6e 	bl	8007994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2f      	ldr	r2, [pc, #188]	; (8006b7c <HAL_TIM_PWM_Start+0x1c4>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_TIM_PWM_Start+0x128>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2e      	ldr	r2, [pc, #184]	; (8006b80 <HAL_TIM_PWM_Start+0x1c8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d009      	beq.n	8006ae0 <HAL_TIM_PWM_Start+0x128>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a2c      	ldr	r2, [pc, #176]	; (8006b84 <HAL_TIM_PWM_Start+0x1cc>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d004      	beq.n	8006ae0 <HAL_TIM_PWM_Start+0x128>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a2b      	ldr	r2, [pc, #172]	; (8006b88 <HAL_TIM_PWM_Start+0x1d0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d101      	bne.n	8006ae4 <HAL_TIM_PWM_Start+0x12c>
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e000      	b.n	8006ae6 <HAL_TIM_PWM_Start+0x12e>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2180      	movs	r1, #128	; 0x80
 8006af6:	0209      	lsls	r1, r1, #8
 8006af8:	430a      	orrs	r2, r1
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1e      	ldr	r2, [pc, #120]	; (8006b7c <HAL_TIM_PWM_Start+0x1c4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d014      	beq.n	8006b30 <HAL_TIM_PWM_Start+0x178>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	2380      	movs	r3, #128	; 0x80
 8006b0c:	05db      	lsls	r3, r3, #23
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d00e      	beq.n	8006b30 <HAL_TIM_PWM_Start+0x178>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <HAL_TIM_PWM_Start+0x1d4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d009      	beq.n	8006b30 <HAL_TIM_PWM_Start+0x178>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1b      	ldr	r2, [pc, #108]	; (8006b90 <HAL_TIM_PWM_Start+0x1d8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d004      	beq.n	8006b30 <HAL_TIM_PWM_Start+0x178>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <HAL_TIM_PWM_Start+0x1c8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d116      	bne.n	8006b5e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <HAL_TIM_PWM_Start+0x1dc>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b06      	cmp	r3, #6
 8006b40:	d016      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x1b8>
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	2380      	movs	r3, #128	; 0x80
 8006b46:	025b      	lsls	r3, r3, #9
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d011      	beq.n	8006b70 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2101      	movs	r1, #1
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b5c:	e008      	b.n	8006b70 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	e000      	b.n	8006b72 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b70:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b004      	add	sp, #16
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800
 8006b8c:	40000400 	.word	0x40000400
 8006b90:	40000800 	.word	0x40000800
 8006b94:	00010007 	.word	0x00010007

08006b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d124      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d11d      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	4252      	negs	r2, r2
 8006bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2203      	movs	r2, #3
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 fad8 	bl	8007190 <HAL_TIM_IC_CaptureCallback>
 8006be0:	e007      	b.n	8006bf2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	0018      	movs	r0, r3
 8006be6:	f000 facb 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f000 fad7 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2204      	movs	r2, #4
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d125      	bne.n	8006c52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2204      	movs	r2, #4
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d11e      	bne.n	8006c52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2205      	movs	r2, #5
 8006c1a:	4252      	negs	r2, r2
 8006c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	23c0      	movs	r3, #192	; 0xc0
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 faab 	bl	8007190 <HAL_TIM_IC_CaptureCallback>
 8006c3a:	e007      	b.n	8006c4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 fa9e 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	0018      	movs	r0, r3
 8006c48:	f000 faaa 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2208      	movs	r2, #8
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d124      	bne.n	8006caa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2208      	movs	r2, #8
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d11d      	bne.n	8006caa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2209      	movs	r2, #9
 8006c74:	4252      	negs	r2, r2
 8006c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2204      	movs	r2, #4
 8006c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	2203      	movs	r2, #3
 8006c86:	4013      	ands	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 fa7f 	bl	8007190 <HAL_TIM_IC_CaptureCallback>
 8006c92:	e007      	b.n	8006ca4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 fa72 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	f000 fa7e 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2210      	movs	r2, #16
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	2b10      	cmp	r3, #16
 8006cb6:	d125      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	2b10      	cmp	r3, #16
 8006cc4:	d11e      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2211      	movs	r2, #17
 8006ccc:	4252      	negs	r2, r2
 8006cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	23c0      	movs	r3, #192	; 0xc0
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	d004      	beq.n	8006cee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 fa52 	bl	8007190 <HAL_TIM_IC_CaptureCallback>
 8006cec:	e007      	b.n	8006cfe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f000 fa45 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 fa51 	bl	80071a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d10f      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d108      	bne.n	8006d32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2202      	movs	r2, #2
 8006d26:	4252      	negs	r2, r2
 8006d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f7fb fa39 	bl	80021a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	2280      	movs	r2, #128	; 0x80
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d10f      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	2280      	movs	r2, #128	; 0x80
 8006d48:	4013      	ands	r3, r2
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d108      	bne.n	8006d60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2281      	movs	r2, #129	; 0x81
 8006d54:	4252      	negs	r2, r2
 8006d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	f000 febc 	bl	8007ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	2380      	movs	r3, #128	; 0x80
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	401a      	ands	r2, r3
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d10e      	bne.n	8006d92 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d107      	bne.n	8006d92 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1c      	ldr	r2, [pc, #112]	; (8006df8 <HAL_TIM_IRQHandler+0x260>)
 8006d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	f000 feab 	bl	8007ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2240      	movs	r2, #64	; 0x40
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d10f      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	2240      	movs	r2, #64	; 0x40
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d108      	bne.n	8006dc0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2241      	movs	r2, #65	; 0x41
 8006db4:	4252      	negs	r2, r2
 8006db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 f9f8 	bl	80071b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	4013      	ands	r3, r2
 8006dca:	2b20      	cmp	r3, #32
 8006dcc:	d10f      	bne.n	8006dee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d108      	bne.n	8006dee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2221      	movs	r2, #33	; 0x21
 8006de2:	4252      	negs	r2, r2
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	0018      	movs	r0, r3
 8006dea:	f000 fe6d 	bl	8007ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	46bd      	mov	sp, r7
 8006df2:	b002      	add	sp, #8
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	46c0      	nop			; (mov r8, r8)
 8006df8:	fffffeff 	.word	0xfffffeff

08006dfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	223c      	movs	r2, #60	; 0x3c
 8006e0c:	5c9b      	ldrb	r3, [r3, r2]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e0df      	b.n	8006fd6 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	223c      	movs	r2, #60	; 0x3c
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	5499      	strb	r1, [r3, r2]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b14      	cmp	r3, #20
 8006e22:	d900      	bls.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8006e24:	e0d1      	b.n	8006fca <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	009a      	lsls	r2, r3, #2
 8006e2a:	4b6d      	ldr	r3, [pc, #436]	; (8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8006e2c:	18d3      	adds	r3, r2, r3
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	0011      	movs	r1, r2
 8006e3a:	0018      	movs	r0, r3
 8006e3c:	f000 fa4a 	bl	80072d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2108      	movs	r1, #8
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2104      	movs	r1, #4
 8006e5c:	438a      	bics	r2, r1
 8006e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	619a      	str	r2, [r3, #24]
      break;
 8006e72:	e0ab      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	0011      	movs	r1, r2
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f000 fab3 	bl	80073e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2180      	movs	r1, #128	; 0x80
 8006e8e:	0109      	lsls	r1, r1, #4
 8006e90:	430a      	orrs	r2, r1
 8006e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4951      	ldr	r1, [pc, #324]	; (8006fe4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006ea0:	400a      	ands	r2, r1
 8006ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6999      	ldr	r1, [r3, #24]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	021a      	lsls	r2, r3, #8
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	619a      	str	r2, [r3, #24]
      break;
 8006eb8:	e088      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	0011      	movs	r1, r2
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f000 fb14 	bl	80074f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2108      	movs	r1, #8
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69da      	ldr	r2, [r3, #28]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2104      	movs	r1, #4
 8006ee4:	438a      	bics	r2, r1
 8006ee6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69d9      	ldr	r1, [r3, #28]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	61da      	str	r2, [r3, #28]
      break;
 8006efa:	e067      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	0011      	movs	r1, r2
 8006f04:	0018      	movs	r0, r3
 8006f06:	f000 fb7b 	bl	8007600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2180      	movs	r1, #128	; 0x80
 8006f16:	0109      	lsls	r1, r1, #4
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	492f      	ldr	r1, [pc, #188]	; (8006fe4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006f28:	400a      	ands	r2, r1
 8006f2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69d9      	ldr	r1, [r3, #28]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	021a      	lsls	r2, r3, #8
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	61da      	str	r2, [r3, #28]
      break;
 8006f40:	e044      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	0011      	movs	r1, r2
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f000 fbc2 	bl	80076d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2108      	movs	r1, #8
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2104      	movs	r1, #4
 8006f6c:	438a      	bics	r2, r1
 8006f6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f82:	e023      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	0011      	movs	r1, r2
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f000 fc01 	bl	8007794 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2180      	movs	r1, #128	; 0x80
 8006f9e:	0109      	lsls	r1, r1, #4
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	490d      	ldr	r1, [pc, #52]	; (8006fe4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8006fb0:	400a      	ands	r2, r1
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	021a      	lsls	r2, r3, #8
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006fc8:	e000      	b.n	8006fcc <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 8006fca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	223c      	movs	r2, #60	; 0x3c
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	0018      	movs	r0, r3
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b004      	add	sp, #16
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	08007cb0 	.word	0x08007cb0
 8006fe4:	fffffbff 	.word	0xfffffbff

08006fe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	223c      	movs	r2, #60	; 0x3c
 8006ff6:	5c9b      	ldrb	r3, [r3, r2]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIM_ConfigClockSource+0x18>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e0b7      	b.n	8007170 <HAL_TIM_ConfigClockSource+0x188>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	223c      	movs	r2, #60	; 0x3c
 8007004:	2101      	movs	r1, #1
 8007006:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	223d      	movs	r2, #61	; 0x3d
 800700c:	2102      	movs	r1, #2
 800700e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4a57      	ldr	r2, [pc, #348]	; (8007178 <HAL_TIM_ConfigClockSource+0x190>)
 800701c:	4013      	ands	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a56      	ldr	r2, [pc, #344]	; (800717c <HAL_TIM_ConfigClockSource+0x194>)
 8007024:	4013      	ands	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2280      	movs	r2, #128	; 0x80
 8007036:	0192      	lsls	r2, r2, #6
 8007038:	4293      	cmp	r3, r2
 800703a:	d040      	beq.n	80070be <HAL_TIM_ConfigClockSource+0xd6>
 800703c:	2280      	movs	r2, #128	; 0x80
 800703e:	0192      	lsls	r2, r2, #6
 8007040:	4293      	cmp	r3, r2
 8007042:	d900      	bls.n	8007046 <HAL_TIM_ConfigClockSource+0x5e>
 8007044:	e088      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 8007046:	2280      	movs	r2, #128	; 0x80
 8007048:	0152      	lsls	r2, r2, #5
 800704a:	4293      	cmp	r3, r2
 800704c:	d100      	bne.n	8007050 <HAL_TIM_ConfigClockSource+0x68>
 800704e:	e085      	b.n	800715c <HAL_TIM_ConfigClockSource+0x174>
 8007050:	2280      	movs	r2, #128	; 0x80
 8007052:	0152      	lsls	r2, r2, #5
 8007054:	4293      	cmp	r3, r2
 8007056:	d900      	bls.n	800705a <HAL_TIM_ConfigClockSource+0x72>
 8007058:	e07e      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 800705a:	2b70      	cmp	r3, #112	; 0x70
 800705c:	d018      	beq.n	8007090 <HAL_TIM_ConfigClockSource+0xa8>
 800705e:	d900      	bls.n	8007062 <HAL_TIM_ConfigClockSource+0x7a>
 8007060:	e07a      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 8007062:	2b60      	cmp	r3, #96	; 0x60
 8007064:	d04f      	beq.n	8007106 <HAL_TIM_ConfigClockSource+0x11e>
 8007066:	d900      	bls.n	800706a <HAL_TIM_ConfigClockSource+0x82>
 8007068:	e076      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 800706a:	2b50      	cmp	r3, #80	; 0x50
 800706c:	d03b      	beq.n	80070e6 <HAL_TIM_ConfigClockSource+0xfe>
 800706e:	d900      	bls.n	8007072 <HAL_TIM_ConfigClockSource+0x8a>
 8007070:	e072      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d057      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x13e>
 8007076:	d900      	bls.n	800707a <HAL_TIM_ConfigClockSource+0x92>
 8007078:	e06e      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 800707a:	2b30      	cmp	r3, #48	; 0x30
 800707c:	d063      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15e>
 800707e:	d86b      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 8007080:	2b20      	cmp	r3, #32
 8007082:	d060      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15e>
 8007084:	d868      	bhi.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d05d      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15e>
 800708a:	2b10      	cmp	r3, #16
 800708c:	d05b      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800708e:	e063      	b.n	8007158 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6818      	ldr	r0, [r3, #0]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	6899      	ldr	r1, [r3, #8]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f000 fc58 	bl	8007954 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2277      	movs	r2, #119	; 0x77
 80070b0:	4313      	orrs	r3, r2
 80070b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	609a      	str	r2, [r3, #8]
      break;
 80070bc:	e04f      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	6899      	ldr	r1, [r3, #8]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	f000 fc41 	bl	8007954 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	01c9      	lsls	r1, r1, #7
 80070e0:	430a      	orrs	r2, r1
 80070e2:	609a      	str	r2, [r3, #8]
      break;
 80070e4:	e03b      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6859      	ldr	r1, [r3, #4]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	001a      	movs	r2, r3
 80070f4:	f000 fbb2 	bl	800785c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2150      	movs	r1, #80	; 0x50
 80070fe:	0018      	movs	r0, r3
 8007100:	f000 fc0c 	bl	800791c <TIM_ITRx_SetConfig>
      break;
 8007104:	e02b      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6859      	ldr	r1, [r3, #4]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	001a      	movs	r2, r3
 8007114:	f000 fbd0 	bl	80078b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2160      	movs	r1, #96	; 0x60
 800711e:	0018      	movs	r0, r3
 8007120:	f000 fbfc 	bl	800791c <TIM_ITRx_SetConfig>
      break;
 8007124:	e01b      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	001a      	movs	r2, r3
 8007134:	f000 fb92 	bl	800785c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2140      	movs	r1, #64	; 0x40
 800713e:	0018      	movs	r0, r3
 8007140:	f000 fbec 	bl	800791c <TIM_ITRx_SetConfig>
      break;
 8007144:	e00b      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	0019      	movs	r1, r3
 8007150:	0010      	movs	r0, r2
 8007152:	f000 fbe3 	bl	800791c <TIM_ITRx_SetConfig>
        break;
 8007156:	e002      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	e000      	b.n	800715e <HAL_TIM_ConfigClockSource+0x176>
      break;
 800715c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	223d      	movs	r2, #61	; 0x3d
 8007162:	2101      	movs	r1, #1
 8007164:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	223c      	movs	r2, #60	; 0x3c
 800716a:	2100      	movs	r1, #0
 800716c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	0018      	movs	r0, r3
 8007172:	46bd      	mov	sp, r7
 8007174:	b004      	add	sp, #16
 8007176:	bd80      	pop	{r7, pc}
 8007178:	ffceff88 	.word	0xffceff88
 800717c:	ffff00ff 	.word	0xffff00ff

08007180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	46bd      	mov	sp, r7
 800718c:	b002      	add	sp, #8
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071a8:	46c0      	nop			; (mov r8, r8)
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b002      	add	sp, #8
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071b8:	46c0      	nop			; (mov r8, r8)
 80071ba:	46bd      	mov	sp, r7
 80071bc:	b002      	add	sp, #8
 80071be:	bd80      	pop	{r7, pc}

080071c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a38      	ldr	r2, [pc, #224]	; (80072b4 <TIM_Base_SetConfig+0xf4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d00c      	beq.n	80071f2 <TIM_Base_SetConfig+0x32>
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	2380      	movs	r3, #128	; 0x80
 80071dc:	05db      	lsls	r3, r3, #23
 80071de:	429a      	cmp	r2, r3
 80071e0:	d007      	beq.n	80071f2 <TIM_Base_SetConfig+0x32>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a34      	ldr	r2, [pc, #208]	; (80072b8 <TIM_Base_SetConfig+0xf8>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_Base_SetConfig+0x32>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a33      	ldr	r2, [pc, #204]	; (80072bc <TIM_Base_SetConfig+0xfc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d108      	bne.n	8007204 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2270      	movs	r2, #112	; 0x70
 80071f6:	4393      	bics	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a2b      	ldr	r2, [pc, #172]	; (80072b4 <TIM_Base_SetConfig+0xf4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d01c      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	2380      	movs	r3, #128	; 0x80
 8007210:	05db      	lsls	r3, r3, #23
 8007212:	429a      	cmp	r2, r3
 8007214:	d017      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <TIM_Base_SetConfig+0xf8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d013      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a26      	ldr	r2, [pc, #152]	; (80072bc <TIM_Base_SetConfig+0xfc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00f      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a25      	ldr	r2, [pc, #148]	; (80072c0 <TIM_Base_SetConfig+0x100>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00b      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <TIM_Base_SetConfig+0x104>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d007      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a23      	ldr	r2, [pc, #140]	; (80072c8 <TIM_Base_SetConfig+0x108>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_Base_SetConfig+0x86>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a22      	ldr	r2, [pc, #136]	; (80072cc <TIM_Base_SetConfig+0x10c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d108      	bne.n	8007258 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <TIM_Base_SetConfig+0x110>)
 800724a:	4013      	ands	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2280      	movs	r2, #128	; 0x80
 800725c:	4393      	bics	r3, r2
 800725e:	001a      	movs	r2, r3
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <TIM_Base_SetConfig+0xf4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00b      	beq.n	800729e <TIM_Base_SetConfig+0xde>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a0e      	ldr	r2, [pc, #56]	; (80072c4 <TIM_Base_SetConfig+0x104>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d007      	beq.n	800729e <TIM_Base_SetConfig+0xde>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a0d      	ldr	r2, [pc, #52]	; (80072c8 <TIM_Base_SetConfig+0x108>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d003      	beq.n	800729e <TIM_Base_SetConfig+0xde>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a0c      	ldr	r2, [pc, #48]	; (80072cc <TIM_Base_SetConfig+0x10c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d103      	bne.n	80072a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	615a      	str	r2, [r3, #20]
}
 80072ac:	46c0      	nop			; (mov r8, r8)
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b004      	add	sp, #16
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40000800 	.word	0x40000800
 80072c0:	40002000 	.word	0x40002000
 80072c4:	40014000 	.word	0x40014000
 80072c8:	40014400 	.word	0x40014400
 80072cc:	40014800 	.word	0x40014800
 80072d0:	fffffcff 	.word	0xfffffcff

080072d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	2201      	movs	r2, #1
 80072e4:	4393      	bics	r3, r2
 80072e6:	001a      	movs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a32      	ldr	r2, [pc, #200]	; (80073cc <TIM_OC1_SetConfig+0xf8>)
 8007302:	4013      	ands	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2203      	movs	r2, #3
 800730a:	4393      	bics	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2202      	movs	r2, #2
 800731c:	4393      	bics	r3, r2
 800731e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a28      	ldr	r2, [pc, #160]	; (80073d0 <TIM_OC1_SetConfig+0xfc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00b      	beq.n	800734a <TIM_OC1_SetConfig+0x76>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a27      	ldr	r2, [pc, #156]	; (80073d4 <TIM_OC1_SetConfig+0x100>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d007      	beq.n	800734a <TIM_OC1_SetConfig+0x76>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a26      	ldr	r2, [pc, #152]	; (80073d8 <TIM_OC1_SetConfig+0x104>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d003      	beq.n	800734a <TIM_OC1_SetConfig+0x76>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a25      	ldr	r2, [pc, #148]	; (80073dc <TIM_OC1_SetConfig+0x108>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d10c      	bne.n	8007364 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2208      	movs	r2, #8
 800734e:	4393      	bics	r3, r2
 8007350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2204      	movs	r2, #4
 8007360:	4393      	bics	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a1a      	ldr	r2, [pc, #104]	; (80073d0 <TIM_OC1_SetConfig+0xfc>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00b      	beq.n	8007384 <TIM_OC1_SetConfig+0xb0>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a19      	ldr	r2, [pc, #100]	; (80073d4 <TIM_OC1_SetConfig+0x100>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d007      	beq.n	8007384 <TIM_OC1_SetConfig+0xb0>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a18      	ldr	r2, [pc, #96]	; (80073d8 <TIM_OC1_SetConfig+0x104>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d003      	beq.n	8007384 <TIM_OC1_SetConfig+0xb0>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a17      	ldr	r2, [pc, #92]	; (80073dc <TIM_OC1_SetConfig+0x108>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d111      	bne.n	80073a8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <TIM_OC1_SetConfig+0x10c>)
 8007388:	4013      	ands	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <TIM_OC1_SetConfig+0x110>)
 8007390:	4013      	ands	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	621a      	str	r2, [r3, #32]
}
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b006      	add	sp, #24
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	fffeff8f 	.word	0xfffeff8f
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40014000 	.word	0x40014000
 80073d8:	40014400 	.word	0x40014400
 80073dc:	40014800 	.word	0x40014800
 80073e0:	fffffeff 	.word	0xfffffeff
 80073e4:	fffffdff 	.word	0xfffffdff

080073e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	2210      	movs	r2, #16
 80073f8:	4393      	bics	r3, r2
 80073fa:	001a      	movs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a1b      	ldr	r3, [r3, #32]
 8007404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4a2e      	ldr	r2, [pc, #184]	; (80074d0 <TIM_OC2_SetConfig+0xe8>)
 8007416:	4013      	ands	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a2d      	ldr	r2, [pc, #180]	; (80074d4 <TIM_OC2_SetConfig+0xec>)
 800741e:	4013      	ands	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	2220      	movs	r2, #32
 8007432:	4393      	bics	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a24      	ldr	r2, [pc, #144]	; (80074d8 <TIM_OC2_SetConfig+0xf0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d10d      	bne.n	8007466 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2280      	movs	r2, #128	; 0x80
 800744e:	4393      	bics	r3, r2
 8007450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2240      	movs	r2, #64	; 0x40
 8007462:	4393      	bics	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1b      	ldr	r2, [pc, #108]	; (80074d8 <TIM_OC2_SetConfig+0xf0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d00b      	beq.n	8007486 <TIM_OC2_SetConfig+0x9e>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a1a      	ldr	r2, [pc, #104]	; (80074dc <TIM_OC2_SetConfig+0xf4>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d007      	beq.n	8007486 <TIM_OC2_SetConfig+0x9e>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a19      	ldr	r2, [pc, #100]	; (80074e0 <TIM_OC2_SetConfig+0xf8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d003      	beq.n	8007486 <TIM_OC2_SetConfig+0x9e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a18      	ldr	r2, [pc, #96]	; (80074e4 <TIM_OC2_SetConfig+0xfc>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d113      	bne.n	80074ae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <TIM_OC2_SetConfig+0x100>)
 800748a:	4013      	ands	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4a16      	ldr	r2, [pc, #88]	; (80074ec <TIM_OC2_SetConfig+0x104>)
 8007492:	4013      	ands	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	621a      	str	r2, [r3, #32]
}
 80074c8:	46c0      	nop			; (mov r8, r8)
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b006      	add	sp, #24
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	feff8fff 	.word	0xfeff8fff
 80074d4:	fffffcff 	.word	0xfffffcff
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800
 80074e8:	fffffbff 	.word	0xfffffbff
 80074ec:	fffff7ff 	.word	0xfffff7ff

080074f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	4a35      	ldr	r2, [pc, #212]	; (80075d4 <TIM_OC3_SetConfig+0xe4>)
 8007500:	401a      	ands	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	69db      	ldr	r3, [r3, #28]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	4a2f      	ldr	r2, [pc, #188]	; (80075d8 <TIM_OC3_SetConfig+0xe8>)
 800751c:	4013      	ands	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2203      	movs	r2, #3
 8007524:	4393      	bics	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	4a29      	ldr	r2, [pc, #164]	; (80075dc <TIM_OC3_SetConfig+0xec>)
 8007536:	4013      	ands	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a25      	ldr	r2, [pc, #148]	; (80075e0 <TIM_OC3_SetConfig+0xf0>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d10d      	bne.n	800756a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	4a24      	ldr	r2, [pc, #144]	; (80075e4 <TIM_OC3_SetConfig+0xf4>)
 8007552:	4013      	ands	r3, r2
 8007554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	4a20      	ldr	r2, [pc, #128]	; (80075e8 <TIM_OC3_SetConfig+0xf8>)
 8007566:	4013      	ands	r3, r2
 8007568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a1c      	ldr	r2, [pc, #112]	; (80075e0 <TIM_OC3_SetConfig+0xf0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_OC3_SetConfig+0x9a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a1d      	ldr	r2, [pc, #116]	; (80075ec <TIM_OC3_SetConfig+0xfc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_OC3_SetConfig+0x9a>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <TIM_OC3_SetConfig+0x100>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_OC3_SetConfig+0x9a>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a1b      	ldr	r2, [pc, #108]	; (80075f4 <TIM_OC3_SetConfig+0x104>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d113      	bne.n	80075b2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	4a1a      	ldr	r2, [pc, #104]	; (80075f8 <TIM_OC3_SetConfig+0x108>)
 800758e:	4013      	ands	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4a19      	ldr	r2, [pc, #100]	; (80075fc <TIM_OC3_SetConfig+0x10c>)
 8007596:	4013      	ands	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	697a      	ldr	r2, [r7, #20]
 80075ca:	621a      	str	r2, [r3, #32]
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b006      	add	sp, #24
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	fffffeff 	.word	0xfffffeff
 80075d8:	fffeff8f 	.word	0xfffeff8f
 80075dc:	fffffdff 	.word	0xfffffdff
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	fffff7ff 	.word	0xfffff7ff
 80075e8:	fffffbff 	.word	0xfffffbff
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40014400 	.word	0x40014400
 80075f4:	40014800 	.word	0x40014800
 80075f8:	ffffefff 	.word	0xffffefff
 80075fc:	ffffdfff 	.word	0xffffdfff

08007600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	4a28      	ldr	r2, [pc, #160]	; (80076b0 <TIM_OC4_SetConfig+0xb0>)
 8007610:	401a      	ands	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <TIM_OC4_SetConfig+0xb4>)
 800762c:	4013      	ands	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a21      	ldr	r2, [pc, #132]	; (80076b8 <TIM_OC4_SetConfig+0xb8>)
 8007634:	4013      	ands	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	021b      	lsls	r3, r3, #8
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4313      	orrs	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <TIM_OC4_SetConfig+0xbc>)
 8007648:	4013      	ands	r3, r2
 800764a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	031b      	lsls	r3, r3, #12
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	4313      	orrs	r3, r2
 8007656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <TIM_OC4_SetConfig+0xc0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00b      	beq.n	8007678 <TIM_OC4_SetConfig+0x78>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <TIM_OC4_SetConfig+0xc4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d007      	beq.n	8007678 <TIM_OC4_SetConfig+0x78>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <TIM_OC4_SetConfig+0xc8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC4_SetConfig+0x78>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a16      	ldr	r2, [pc, #88]	; (80076cc <TIM_OC4_SetConfig+0xcc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d109      	bne.n	800768c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <TIM_OC4_SetConfig+0xd0>)
 800767c:	4013      	ands	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	019b      	lsls	r3, r3, #6
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	621a      	str	r2, [r3, #32]
}
 80076a6:	46c0      	nop			; (mov r8, r8)
 80076a8:	46bd      	mov	sp, r7
 80076aa:	b006      	add	sp, #24
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	ffffefff 	.word	0xffffefff
 80076b4:	feff8fff 	.word	0xfeff8fff
 80076b8:	fffffcff 	.word	0xfffffcff
 80076bc:	ffffdfff 	.word	0xffffdfff
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40014000 	.word	0x40014000
 80076c8:	40014400 	.word	0x40014400
 80076cc:	40014800 	.word	0x40014800
 80076d0:	ffffbfff 	.word	0xffffbfff

080076d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	4a25      	ldr	r2, [pc, #148]	; (8007778 <TIM_OC5_SetConfig+0xa4>)
 80076e4:	401a      	ands	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a1f      	ldr	r2, [pc, #124]	; (800777c <TIM_OC5_SetConfig+0xa8>)
 8007700:	4013      	ands	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	4a1b      	ldr	r2, [pc, #108]	; (8007780 <TIM_OC5_SetConfig+0xac>)
 8007712:	4013      	ands	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	4313      	orrs	r3, r2
 8007720:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a17      	ldr	r2, [pc, #92]	; (8007784 <TIM_OC5_SetConfig+0xb0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00b      	beq.n	8007742 <TIM_OC5_SetConfig+0x6e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a16      	ldr	r2, [pc, #88]	; (8007788 <TIM_OC5_SetConfig+0xb4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d007      	beq.n	8007742 <TIM_OC5_SetConfig+0x6e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a15      	ldr	r2, [pc, #84]	; (800778c <TIM_OC5_SetConfig+0xb8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d003      	beq.n	8007742 <TIM_OC5_SetConfig+0x6e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a14      	ldr	r2, [pc, #80]	; (8007790 <TIM_OC5_SetConfig+0xbc>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d109      	bne.n	8007756 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <TIM_OC5_SetConfig+0xa4>)
 8007746:	4013      	ands	r3, r2
 8007748:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	621a      	str	r2, [r3, #32]
}
 8007770:	46c0      	nop			; (mov r8, r8)
 8007772:	46bd      	mov	sp, r7
 8007774:	b006      	add	sp, #24
 8007776:	bd80      	pop	{r7, pc}
 8007778:	fffeffff 	.word	0xfffeffff
 800777c:	fffeff8f 	.word	0xfffeff8f
 8007780:	fffdffff 	.word	0xfffdffff
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40014000 	.word	0x40014000
 800778c:	40014400 	.word	0x40014400
 8007790:	40014800 	.word	0x40014800

08007794 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	4a26      	ldr	r2, [pc, #152]	; (800783c <TIM_OC6_SetConfig+0xa8>)
 80077a4:	401a      	ands	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a20      	ldr	r2, [pc, #128]	; (8007840 <TIM_OC6_SetConfig+0xac>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	4a1c      	ldr	r2, [pc, #112]	; (8007844 <TIM_OC6_SetConfig+0xb0>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	051b      	lsls	r3, r3, #20
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a18      	ldr	r2, [pc, #96]	; (8007848 <TIM_OC6_SetConfig+0xb4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00b      	beq.n	8007804 <TIM_OC6_SetConfig+0x70>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a17      	ldr	r2, [pc, #92]	; (800784c <TIM_OC6_SetConfig+0xb8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d007      	beq.n	8007804 <TIM_OC6_SetConfig+0x70>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a16      	ldr	r2, [pc, #88]	; (8007850 <TIM_OC6_SetConfig+0xbc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d003      	beq.n	8007804 <TIM_OC6_SetConfig+0x70>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a15      	ldr	r2, [pc, #84]	; (8007854 <TIM_OC6_SetConfig+0xc0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d109      	bne.n	8007818 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	4a14      	ldr	r2, [pc, #80]	; (8007858 <TIM_OC6_SetConfig+0xc4>)
 8007808:	4013      	ands	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	029b      	lsls	r3, r3, #10
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	4313      	orrs	r3, r2
 8007816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	46bd      	mov	sp, r7
 8007836:	b006      	add	sp, #24
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	ffefffff 	.word	0xffefffff
 8007840:	feff8fff 	.word	0xfeff8fff
 8007844:	ffdfffff 	.word	0xffdfffff
 8007848:	40012c00 	.word	0x40012c00
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800
 8007858:	fffbffff 	.word	0xfffbffff

0800785c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b086      	sub	sp, #24
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	2201      	movs	r2, #1
 8007874:	4393      	bics	r3, r2
 8007876:	001a      	movs	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	22f0      	movs	r2, #240	; 0xf0
 8007886:	4393      	bics	r3, r2
 8007888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	011b      	lsls	r3, r3, #4
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	220a      	movs	r2, #10
 8007898:	4393      	bics	r3, r2
 800789a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	621a      	str	r2, [r3, #32]
}
 80078b0:	46c0      	nop			; (mov r8, r8)
 80078b2:	46bd      	mov	sp, r7
 80078b4:	b006      	add	sp, #24
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	2210      	movs	r2, #16
 80078ca:	4393      	bics	r3, r2
 80078cc:	001a      	movs	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	4a0d      	ldr	r2, [pc, #52]	; (8007918 <TIM_TI2_ConfigInputStage+0x60>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	031b      	lsls	r3, r3, #12
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	22a0      	movs	r2, #160	; 0xa0
 80078f4:	4393      	bics	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	011b      	lsls	r3, r3, #4
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	46bd      	mov	sp, r7
 8007912:	b006      	add	sp, #24
 8007914:	bd80      	pop	{r7, pc}
 8007916:	46c0      	nop			; (mov r8, r8)
 8007918:	ffff0fff 	.word	0xffff0fff

0800791c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4a08      	ldr	r2, [pc, #32]	; (8007950 <TIM_ITRx_SetConfig+0x34>)
 8007930:	4013      	ands	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	2207      	movs	r2, #7
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	609a      	str	r2, [r3, #8]
}
 8007946:	46c0      	nop			; (mov r8, r8)
 8007948:	46bd      	mov	sp, r7
 800794a:	b004      	add	sp, #16
 800794c:	bd80      	pop	{r7, pc}
 800794e:	46c0      	nop			; (mov r8, r8)
 8007950:	ffcfff8f 	.word	0xffcfff8f

08007954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
 8007960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <TIM_ETR_SetConfig+0x3c>)
 800796c:	4013      	ands	r3, r2
 800796e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	021a      	lsls	r2, r3, #8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	431a      	orrs	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4313      	orrs	r3, r2
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	4313      	orrs	r3, r2
 8007980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	609a      	str	r2, [r3, #8]
}
 8007988:	46c0      	nop			; (mov r8, r8)
 800798a:	46bd      	mov	sp, r7
 800798c:	b006      	add	sp, #24
 800798e:	bd80      	pop	{r7, pc}
 8007990:	ffff00ff 	.word	0xffff00ff

08007994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	221f      	movs	r2, #31
 80079a4:	4013      	ands	r3, r2
 80079a6:	2201      	movs	r2, #1
 80079a8:	409a      	lsls	r2, r3
 80079aa:	0013      	movs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	43d2      	mvns	r2, r2
 80079b6:	401a      	ands	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a1a      	ldr	r2, [r3, #32]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	211f      	movs	r1, #31
 80079c4:	400b      	ands	r3, r1
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4099      	lsls	r1, r3
 80079ca:	000b      	movs	r3, r1
 80079cc:	431a      	orrs	r2, r3
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b006      	add	sp, #24
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	223c      	movs	r2, #60	; 0x3c
 80079ea:	5c9b      	ldrb	r3, [r3, r2]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e05a      	b.n	8007aaa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	223c      	movs	r2, #60	; 0x3c
 80079f8:	2101      	movs	r1, #1
 80079fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	223d      	movs	r2, #61	; 0x3d
 8007a00:	2102      	movs	r1, #2
 8007a02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a26      	ldr	r2, [pc, #152]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d108      	bne.n	8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4a25      	ldr	r2, [pc, #148]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2270      	movs	r2, #112	; 0x70
 8007a34:	4393      	bics	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d014      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	05db      	lsls	r3, r3, #23
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d00e      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a15      	ldr	r2, [pc, #84]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d009      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d004      	beq.n	8007a7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a12      	ldr	r2, [pc, #72]	; (8007ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d10c      	bne.n	8007a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2280      	movs	r2, #128	; 0x80
 8007a82:	4393      	bics	r3, r2
 8007a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	223d      	movs	r2, #61	; 0x3d
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	223c      	movs	r2, #60	; 0x3c
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	0018      	movs	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b004      	add	sp, #16
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	40012c00 	.word	0x40012c00
 8007ab8:	ff0fffff 	.word	0xff0fffff
 8007abc:	40000400 	.word	0x40000400
 8007ac0:	40000800 	.word	0x40000800
 8007ac4:	40014000 	.word	0x40014000

08007ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ad0:	46c0      	nop			; (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b002      	add	sp, #8
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae0:	46c0      	nop			; (mov r8, r8)
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b002      	add	sp, #8
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007af0:	46c0      	nop			; (mov r8, r8)
 8007af2:	46bd      	mov	sp, r7
 8007af4:	b002      	add	sp, #8
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <__libc_init_array>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	2600      	movs	r6, #0
 8007afc:	4d0c      	ldr	r5, [pc, #48]	; (8007b30 <__libc_init_array+0x38>)
 8007afe:	4c0d      	ldr	r4, [pc, #52]	; (8007b34 <__libc_init_array+0x3c>)
 8007b00:	1b64      	subs	r4, r4, r5
 8007b02:	10a4      	asrs	r4, r4, #2
 8007b04:	42a6      	cmp	r6, r4
 8007b06:	d109      	bne.n	8007b1c <__libc_init_array+0x24>
 8007b08:	2600      	movs	r6, #0
 8007b0a:	f000 f821 	bl	8007b50 <_init>
 8007b0e:	4d0a      	ldr	r5, [pc, #40]	; (8007b38 <__libc_init_array+0x40>)
 8007b10:	4c0a      	ldr	r4, [pc, #40]	; (8007b3c <__libc_init_array+0x44>)
 8007b12:	1b64      	subs	r4, r4, r5
 8007b14:	10a4      	asrs	r4, r4, #2
 8007b16:	42a6      	cmp	r6, r4
 8007b18:	d105      	bne.n	8007b26 <__libc_init_array+0x2e>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	00b3      	lsls	r3, r6, #2
 8007b1e:	58eb      	ldr	r3, [r5, r3]
 8007b20:	4798      	blx	r3
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7ee      	b.n	8007b04 <__libc_init_array+0xc>
 8007b26:	00b3      	lsls	r3, r6, #2
 8007b28:	58eb      	ldr	r3, [r5, r3]
 8007b2a:	4798      	blx	r3
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	e7f2      	b.n	8007b16 <__libc_init_array+0x1e>
 8007b30:	08007d04 	.word	0x08007d04
 8007b34:	08007d04 	.word	0x08007d04
 8007b38:	08007d04 	.word	0x08007d04
 8007b3c:	08007d08 	.word	0x08007d08

08007b40 <memset>:
 8007b40:	0003      	movs	r3, r0
 8007b42:	1882      	adds	r2, r0, r2
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d100      	bne.n	8007b4a <memset+0xa>
 8007b48:	4770      	bx	lr
 8007b4a:	7019      	strb	r1, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	e7f9      	b.n	8007b44 <memset+0x4>

08007b50 <_init>:
 8007b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b56:	bc08      	pop	{r3}
 8007b58:	469e      	mov	lr, r3
 8007b5a:	4770      	bx	lr

08007b5c <_fini>:
 8007b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5e:	46c0      	nop			; (mov r8, r8)
 8007b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b62:	bc08      	pop	{r3}
 8007b64:	469e      	mov	lr, r3
 8007b66:	4770      	bx	lr
